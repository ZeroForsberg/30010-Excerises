
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003c88  08003c88  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c88  08003c88  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000090  08003d20  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003d20  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3ea  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249a  00000000  00000000  0002d4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0002f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  000300d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004808  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009851  00000000  00000000  00034f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a6c8  00000000  00000000  0003e799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00098e61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002644  00000000  00000000  00098eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a24 	.word	0x08003a24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08003a24 	.word	0x08003a24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	807b      	strh	r3, [r7, #2]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000a64:	787a      	ldrb	r2, [r7, #1]
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3208      	adds	r2, #8
 8000a80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	8879      	ldrh	r1, [r7, #2]
 8000a96:	08c9      	lsrs	r1, r1, #3
 8000a98:	b289      	uxth	r1, r1
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	ea02 0103 	and.w	r1, r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f100 0208 	add.w	r2, r0, #8
 8000aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3208      	adds	r2, #8
 8000ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3208      	adds	r2, #8
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b08b      	sub	sp, #44	; 0x2c
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b08:	4b91      	ldr	r3, [pc, #580]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	d011      	beq.n	8000b3c <RCC_GetClocksFreq+0x5c>
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	2b08      	cmp	r3, #8
 8000b1c:	d837      	bhi.n	8000b8e <RCC_GetClocksFreq+0xae>
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <RCC_GetClocksFreq+0x4c>
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	d004      	beq.n	8000b34 <RCC_GetClocksFreq+0x54>
 8000b2a:	e030      	b.n	8000b8e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a89      	ldr	r2, [pc, #548]	; (8000d54 <RCC_GetClocksFreq+0x274>)
 8000b30:	601a      	str	r2, [r3, #0]
      break;
 8000b32:	e030      	b.n	8000b96 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a87      	ldr	r2, [pc, #540]	; (8000d54 <RCC_GetClocksFreq+0x274>)
 8000b38:	601a      	str	r2, [r3, #0]
      break;
 8000b3a:	e02c      	b.n	8000b96 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000b3c:	4b84      	ldr	r3, [pc, #528]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b44:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b46:	4b82      	ldr	r3, [pc, #520]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	0c9b      	lsrs	r3, r3, #18
 8000b54:	3302      	adds	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d105      	bne.n	8000b6a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	4a7d      	ldr	r2, [pc, #500]	; (8000d58 <RCC_GetClocksFreq+0x278>)
 8000b62:	fb02 f303 	mul.w	r3, r2, r3
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
 8000b68:	e00d      	b.n	8000b86 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000b6a:	4b79      	ldr	r3, [pc, #484]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3301      	adds	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000b76:	4a77      	ldr	r2, [pc, #476]	; (8000d54 <RCC_GetClocksFreq+0x274>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fb02 f303 	mul.w	r3, r2, r3
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8a:	601a      	str	r2, [r3, #0]
      break;
 8000b8c:	e003      	b.n	8000b96 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a70      	ldr	r2, [pc, #448]	; (8000d54 <RCC_GetClocksFreq+0x274>)
 8000b92:	601a      	str	r2, [r3, #0]
      break;
 8000b94:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b96:	4b6e      	ldr	r3, [pc, #440]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b9e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	091b      	lsrs	r3, r3, #4
 8000ba4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000ba6:	4a6d      	ldr	r2, [pc, #436]	; (8000d5c <RCC_GetClocksFreq+0x27c>)
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	40da      	lsrs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000bbe:	4b64      	ldr	r3, [pc, #400]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bc6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000bce:	4a63      	ldr	r2, [pc, #396]	; (8000d5c <RCC_GetClocksFreq+0x27c>)
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	40da      	lsrs	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000be6:	4b5a      	ldr	r3, [pc, #360]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000bee:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	0adb      	lsrs	r3, r3, #11
 8000bf4:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000bf6:	4a59      	ldr	r2, [pc, #356]	; (8000d5c <RCC_GetClocksFreq+0x27c>)
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	40da      	lsrs	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000c0e:	4b50      	ldr	r3, [pc, #320]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000c16:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	091b      	lsrs	r3, r3, #4
 8000c1c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c1e:	4a50      	ldr	r2, [pc, #320]	; (8000d60 <RCC_GetClocksFreq+0x280>)
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	611a      	str	r2, [r3, #16]
 8000c40:	e003      	b.n	8000c4a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000c52:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	0a5b      	lsrs	r3, r3, #9
 8000c58:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c5a:	4a41      	ldr	r2, [pc, #260]	; (8000d60 <RCC_GetClocksFreq+0x280>)
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	e003      	b.n	8000c86 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000c86:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	2b10      	cmp	r3, #16
 8000c90:	d003      	beq.n	8000c9a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a2f      	ldr	r2, [pc, #188]	; (8000d54 <RCC_GetClocksFreq+0x274>)
 8000c96:	619a      	str	r2, [r3, #24]
 8000c98:	e003      	b.n	8000ca2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	2b20      	cmp	r3, #32
 8000cac:	d003      	beq.n	8000cb6 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a28      	ldr	r2, [pc, #160]	; (8000d54 <RCC_GetClocksFreq+0x274>)
 8000cb2:	61da      	str	r2, [r3, #28]
 8000cb4:	e003      	b.n	8000cbe <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cca:	d10d      	bne.n	8000ce8 <RCC_GetClocksFreq+0x208>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d108      	bne.n	8000ce8 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d104      	bne.n	8000ce8 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	005a      	lsls	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	621a      	str	r2, [r3, #32]
 8000ce6:	e003      	b.n	8000cf0 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cfc:	d10d      	bne.n	8000d1a <RCC_GetClocksFreq+0x23a>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d108      	bne.n	8000d1a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d104      	bne.n	8000d1a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	005a      	lsls	r2, r3, #1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
 8000d18:	e003      	b.n	8000d22 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d104      	bne.n	8000d38 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
 8000d36:	e029      	b.n	8000d8c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <RCC_GetClocksFreq+0x270>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d10f      	bne.n	8000d64 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8000d4c:	e01e      	b.n	8000d8c <RCC_GetClocksFreq+0x2ac>
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	007a1200 	.word	0x007a1200
 8000d58:	003d0900 	.word	0x003d0900
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000d64:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d104      	bne.n	8000d7a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
 8000d78:	e008      	b.n	8000d8c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000d7a:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d102      	bne.n	8000d8c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a5e      	ldr	r2, [pc, #376]	; (8000f04 <RCC_GetClocksFreq+0x424>)
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000d8c:	4b5c      	ldr	r3, [pc, #368]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d104      	bne.n	8000da2 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000da0:	e021      	b.n	8000de6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000da2:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dae:	d104      	bne.n	8000dba <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db8:	e015      	b.n	8000de6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000dba:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000dc6:	d104      	bne.n	8000dd2 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd0:	e009      	b.n	8000de6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000dd2:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000dde:	d102      	bne.n	8000de6 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a48      	ldr	r2, [pc, #288]	; (8000f04 <RCC_GetClocksFreq+0x424>)
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000de6:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d104      	bne.n	8000dfc <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfa:	e021      	b.n	8000e40 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000dfc:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e08:	d104      	bne.n	8000e14 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
 8000e12:	e015      	b.n	8000e40 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e20:	d104      	bne.n	8000e2c <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e28:	631a      	str	r2, [r3, #48]	; 0x30
 8000e2a:	e009      	b.n	8000e40 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000e38:	d102      	bne.n	8000e40 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a31      	ldr	r2, [pc, #196]	; (8000f04 <RCC_GetClocksFreq+0x424>)
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d104      	bne.n	8000e56 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	635a      	str	r2, [r3, #52]	; 0x34
 8000e54:	e021      	b.n	8000e9a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e62:	d104      	bne.n	8000e6e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6c:	e015      	b.n	8000e9a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000e7a:	d104      	bne.n	8000e86 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34
 8000e84:	e009      	b.n	8000e9a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000e92:	d102      	bne.n	8000e9a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <RCC_GetClocksFreq+0x424>)
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d104      	bne.n	8000eb0 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000eae:	e021      	b.n	8000ef4 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ebc:	d104      	bne.n	8000ec8 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ec6:	e015      	b.n	8000ef4 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000ed4:	d104      	bne.n	8000ee0 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ede:	e009      	b.n	8000ef4 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <RCC_GetClocksFreq+0x420>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000eec:	d102      	bne.n	8000ef4 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <RCC_GetClocksFreq+0x424>)
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ef4:	bf00      	nop
 8000ef6:	372c      	adds	r7, #44	; 0x2c
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000
 8000f04:	007a1200 	.word	0x007a1200

08000f08 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	4613      	mov	r3, r2
 8000f38:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d103      	bne.n	8000f76 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	e005      	b.n	8000f82 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d102      	bne.n	8000f82 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	3308      	adds	r3, #8
 8000f80:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000f94:	e006      	b.n	8000fa4 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	3724      	adds	r7, #36	; 0x24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69da      	ldr	r2, [r3, #28]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e001      	b.n	8000fd4 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b087      	sub	sp, #28
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800100c:	2201      	movs	r2, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d105      	bne.n	8001028 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	4013      	ands	r3, r2
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e00d      	b.n	8001044 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d105      	bne.n	800103a <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4013      	ands	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e004      	b.n	8001044 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800104a:	2201      	movs	r2, #1
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <USART_GetITStatus+0x8e>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800106a:	2301      	movs	r3, #1
 800106c:	74fb      	strb	r3, [r7, #19]
 800106e:	e001      	b.n	8001074 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001074:	7cfb      	ldrb	r3, [r7, #19]
}
 8001076:	4618      	mov	r0, r3
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 031f 	and.w	r3, r3, #31
 8001094:	2201      	movs	r2, #1
 8001096:	fa02 f103 	lsl.w	r1, r2, r3
 800109a:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <NVIC_EnableIRQ+0x30>)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	095b      	lsrs	r3, r3, #5
 80010a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <uart_put_char+0x30>)
 80010ca:	f7ff ff1d 	bl	8000f08 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80010ce:	bf00      	nop
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <uart_put_char+0x30>)
 80010d4:	f7ff ff6c 	bl	8000fb0 <USART_GetFlagStatus>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f8      	beq.n	80010d0 <uart_put_char+0x18>
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40004400 	.word	0x40004400

080010ec <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e012      	b.n	8001126 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b0a      	cmp	r3, #10
 800110a:	d102      	bne.n	8001112 <_write_r+0x26>
            uart_put_char('\r');
 800110c:	200d      	movs	r0, #13
 800110e:	f7ff ffd3 	bl	80010b8 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ffcc 	bl	80010b8 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	dbe8      	blt.n	8001100 <_write_r+0x14>
    }

    return len;
 800112e:	683b      	ldr	r3, [r7, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 800113c:	4915      	ldr	r1, [pc, #84]	; (8001194 <USART2_IRQHandler+0x5c>)
 800113e:	4816      	ldr	r0, [pc, #88]	; (8001198 <USART2_IRQHandler+0x60>)
 8001140:	f7ff ff4f 	bl	8000fe2 <USART_GetITStatus>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d021      	beq.n	800118e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <USART2_IRQHandler+0x60>)
 800114c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800114e:	b299      	uxth	r1, r3
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <USART2_IRQHandler+0x64>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	b2d0      	uxtb	r0, r2
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <USART2_IRQHandler+0x64>)
 800115c:	7010      	strb	r0, [r2, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	b2c9      	uxtb	r1, r1
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <USART2_IRQHandler+0x68>)
 8001164:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <USART2_IRQHandler+0x6c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2bff      	cmp	r3, #255	; 0xff
 800116e:	d107      	bne.n	8001180 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <USART2_IRQHandler+0x70>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	3301      	adds	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <USART2_IRQHandler+0x70>)
 800117c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800117e:	e006      	b.n	800118e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <USART2_IRQHandler+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <USART2_IRQHandler+0x6c>)
 800118c:	701a      	strb	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	00050105 	.word	0x00050105
 8001198:	40004400 	.word	0x40004400
 800119c:	200001ac 	.word	0x200001ac
 80011a0:	200000ac 	.word	0x200000ac
 80011a4:	200001ae 	.word	0x200001ae
 80011a8:	200001ad 	.word	0x200001ad

080011ac <uart_clear>:

void uart_clear(){
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
    UART_START_IDX = 0;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <uart_clear+0x20>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
    UART_END_IDX = 0;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <uart_clear+0x24>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
    UART_COUNT = 0;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <uart_clear+0x28>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	200001ad 	.word	0x200001ad
 80011d0:	200001ac 	.word	0x200001ac
 80011d4:	200001ae 	.word	0x200001ae

080011d8 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	; 0x50
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80011e0:	4b86      	ldr	r3, [pc, #536]	; (80013fc <uart_init+0x224>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 fbd1 	bl	8002990 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80011ee:	4b83      	ldr	r3, [pc, #524]	; (80013fc <uart_init+0x224>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fbca 	bl	8002990 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80011fc:	4b80      	ldr	r3, [pc, #512]	; (8001400 <uart_init+0x228>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	4a7f      	ldr	r2, [pc, #508]	; (8001400 <uart_init+0x228>)
 8001202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001206:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001208:	4b7d      	ldr	r3, [pc, #500]	; (8001400 <uart_init+0x228>)
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	4a7c      	ldr	r2, [pc, #496]	; (8001400 <uart_init+0x228>)
 800120e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001212:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800121e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001222:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800122e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001232:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800123e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001242:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800124e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001252:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800125e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001262:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800126e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001272:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001278:	889b      	ldrh	r3, [r3, #4]
 800127a:	b29b      	uxth	r3, r3
 800127c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001280:	f023 030c 	bic.w	r3, r3, #12
 8001284:	b29b      	uxth	r3, r3
 8001286:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001288:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800128c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001290:	8892      	ldrh	r2, [r2, #4]
 8001292:	b292      	uxth	r2, r2
 8001294:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012a4:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80012a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012b0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80012b4:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80012b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012c4:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80012c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012d0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80012d4:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 80012d6:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <uart_init+0x22c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a4a      	ldr	r2, [pc, #296]	; (8001404 <uart_init+0x22c>)
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80012e2:	4b48      	ldr	r3, [pc, #288]	; (8001404 <uart_init+0x22c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a47      	ldr	r2, [pc, #284]	; (8001404 <uart_init+0x22c>)
 80012e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ec:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80012ee:	4b45      	ldr	r3, [pc, #276]	; (8001404 <uart_init+0x22c>)
 80012f0:	4a44      	ldr	r2, [pc, #272]	; (8001404 <uart_init+0x22c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <uart_init+0x22c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a42      	ldr	r2, [pc, #264]	; (8001404 <uart_init+0x22c>)
 80012fc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001300:	f023 030c 	bic.w	r3, r3, #12
 8001304:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <uart_init+0x22c>)
 8001308:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <uart_init+0x22c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800130e:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <uart_init+0x22c>)
 8001310:	4a3c      	ldr	r2, [pc, #240]	; (8001404 <uart_init+0x22c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <uart_init+0x22c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a3a      	ldr	r2, [pc, #232]	; (8001404 <uart_init+0x22c>)
 800131c:	f043 030c 	orr.w	r3, r3, #12
 8001320:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <uart_init+0x22c>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4a37      	ldr	r2, [pc, #220]	; (8001404 <uart_init+0x22c>)
 8001328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800132c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800132e:	4b35      	ldr	r3, [pc, #212]	; (8001404 <uart_init+0x22c>)
 8001330:	4a34      	ldr	r2, [pc, #208]	; (8001404 <uart_init+0x22c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800133a:	2300      	movs	r3, #0
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
 800133e:	2300      	movs	r3, #0
 8001340:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fbca 	bl	8000ae0 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <uart_init+0x22c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d010      	beq.n	800137e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 800135c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800135e:	005a      	lsls	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	fb01 f202 	mul.w	r2, r1, r2
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
 800137c:	e00d      	b.n	800139a <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800137e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	fb01 f202 	mul.w	r2, r1, r2
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d302      	bcc.n	80013aa <uart_init+0x1d2>
        divider++;
 80013a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a6:	3301      	adds	r3, #1
 80013a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <uart_init+0x22c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80013b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80013c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013c2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80013c6:	4013      	ands	r3, r2
 80013c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013ca:	4313      	orrs	r3, r2
 80013cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <uart_init+0x22c>)
 80013d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013d2:	b292      	uxth	r2, r2
 80013d4:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <uart_init+0x22c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <uart_init+0x22c>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80013e2:	2201      	movs	r2, #1
 80013e4:	4908      	ldr	r1, [pc, #32]	; (8001408 <uart_init+0x230>)
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <uart_init+0x22c>)
 80013e8:	f7ff fda0 	bl	8000f2c <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 80013ec:	2026      	movs	r0, #38	; 0x26
 80013ee:	f7ff fe49 	bl	8001084 <NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3750      	adds	r7, #80	; 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000002c 	.word	0x2000002c
 8001400:	40021000 	.word	0x40021000
 8001404:	40004400 	.word	0x40004400
 8001408:	00050105 	.word	0x00050105

0800140c <intiJoystick>:
#include <LED.h>
#include "stm32f30x_conf.h" // STM32 config
#include "ansi.h"
#include "joystick.h"

void intiJoystick(){
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8001410:	4b46      	ldr	r3, [pc, #280]	; (800152c <intiJoystick+0x120>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	4a45      	ldr	r2, [pc, #276]	; (800152c <intiJoystick+0x120>)
 8001416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <intiJoystick+0x120>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	4a42      	ldr	r2, [pc, #264]	; (800152c <intiJoystick+0x120>)
 8001422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001426:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <intiJoystick+0x120>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	4a3f      	ldr	r2, [pc, #252]	; (800152c <intiJoystick+0x120>)
 800142e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001432:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <intiJoystick+0x124>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a3d      	ldr	r2, [pc, #244]	; (8001530 <intiJoystick+0x124>)
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 8001440:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <intiJoystick+0x124>)
 8001442:	4a3b      	ldr	r2, [pc, #236]	; (8001530 <intiJoystick+0x124>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <intiJoystick+0x124>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a38      	ldr	r2, [pc, #224]	; (8001530 <intiJoystick+0x124>)
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 8001454:	4b36      	ldr	r3, [pc, #216]	; (8001530 <intiJoystick+0x124>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a35      	ldr	r2, [pc, #212]	; (8001530 <intiJoystick+0x124>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8001460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800146a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800146e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 8001470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001474:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 800147c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800148a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 800148c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149a:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <intiJoystick+0x128>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a24      	ldr	r2, [pc, #144]	; (8001534 <intiJoystick+0x128>)
 80014a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014a6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <intiJoystick+0x128>)
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <intiJoystick+0x128>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <intiJoystick+0x128>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a1f      	ldr	r2, [pc, #124]	; (8001534 <intiJoystick+0x128>)
 80014b6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014ba:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <intiJoystick+0x128>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <intiJoystick+0x128>)
 80014c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c6:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <intiJoystick+0x124>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <intiJoystick+0x124>)
 80014ce:	f023 030c 	bic.w	r3, r3, #12
 80014d2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <intiJoystick+0x124>)
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <intiJoystick+0x124>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <intiJoystick+0x124>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4a13      	ldr	r2, [pc, #76]	; (8001530 <intiJoystick+0x124>)
 80014e2:	f023 030c 	bic.w	r3, r3, #12
 80014e6:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <intiJoystick+0x124>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4a10      	ldr	r2, [pc, #64]	; (8001530 <intiJoystick+0x124>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <intiJoystick+0x128>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <intiJoystick+0x128>)
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <intiJoystick+0x128>)
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <intiJoystick+0x128>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <intiJoystick+0x128>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4a09      	ldr	r2, [pc, #36]	; (8001534 <intiJoystick+0x128>)
 800150e:	f023 0303 	bic.w	r3, r3, #3
 8001512:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <intiJoystick+0x128>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <intiJoystick+0x128>)
 800151a:	f043 0302 	orr.w	r3, r3, #2
 800151e:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	48000800 	.word	0x48000800
 8001534:	48000400 	.word	0x48000400

08001538 <readJoystick>:


void readJoystick(){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
	uint8_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - right
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <readJoystick+0xac>)
 8001540:	8a1b      	ldrh	r3, [r3, #16]
 8001542:	b29b      	uxth	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	70fb      	strb	r3, [r7, #3]
	uint8_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 800154c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001550:	8a1b      	ldrh	r3, [r3, #16]
 8001552:	b29b      	uxth	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	71fb      	strb	r3, [r7, #7]
	uint8_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - center
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <readJoystick+0xb0>)
 800155e:	8a1b      	ldrh	r3, [r3, #16]
 8001560:	b29b      	uxth	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	71bb      	strb	r3, [r7, #6]
	uint8_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - left
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <readJoystick+0xac>)
 800156c:	8a1b      	ldrh	r3, [r3, #16]
 800156e:	b29b      	uxth	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	717b      	strb	r3, [r7, #5]
	uint8_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - down
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <readJoystick+0xb0>)
 800157a:	8a1b      	ldrh	r3, [r3, #16]
 800157c:	b29b      	uxth	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	713b      	strb	r3, [r7, #4]


	if(b){b = 1;}
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <readJoystick+0x58>
 800158c:	2301      	movs	r3, #1
 800158e:	71fb      	strb	r3, [r7, #7]
	if(c){c = 1;}
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <readJoystick+0x62>
 8001596:	2301      	movs	r3, #1
 8001598:	71bb      	strb	r3, [r7, #6]
	if(d){d = 1;}
 800159a:	797b      	ldrb	r3, [r7, #5]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <readJoystick+0x6c>
 80015a0:	2301      	movs	r3, #1
 80015a2:	717b      	strb	r3, [r7, #5]
	if(e){e = 1;}
 80015a4:	793b      	ldrb	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <readJoystick+0x76>
 80015aa:	2301      	movs	r3, #1
 80015ac:	713b      	strb	r3, [r7, #4]

	joy.right 	= a;
 80015ae:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <readJoystick+0xb4>)
 80015b4:	70da      	strb	r2, [r3, #3]
	joy.up 		= b;
 80015b6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <readJoystick+0xb4>)
 80015bc:	701a      	strb	r2, [r3, #0]
	joy.center	= c;
 80015be:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <readJoystick+0xb4>)
 80015c4:	711a      	strb	r2, [r3, #4]
	joy.left	= d;
 80015c6:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <readJoystick+0xb4>)
 80015cc:	709a      	strb	r2, [r3, #2]
	joy.down 	= e;
 80015ce:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <readJoystick+0xb4>)
 80015d4:	705a      	strb	r2, [r3, #1]
	if(0){
	gotoxy(1,8);
	printf("Joys: %d%d%d%d%d",a,b,c,d,e);
	}

}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	48000800 	.word	0x48000800
 80015e8:	48000400 	.word	0x48000400
 80015ec:	200001e0 	.word	0x200001e0

080015f0 <initLed>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi.h"

void initLed(){
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <initLed+0x128>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4a47      	ldr	r2, [pc, #284]	; (8001718 <initLed+0x128>)
 80015fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fe:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8001600:	4b45      	ldr	r3, [pc, #276]	; (8001718 <initLed+0x128>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	4a44      	ldr	r2, [pc, #272]	; (8001718 <initLed+0x128>)
 8001606:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <initLed+0x128>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	4a41      	ldr	r2, [pc, #260]	; (8001718 <initLed+0x128>)
 8001612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001616:	6153      	str	r3, [r2, #20]

	// Set pin PA9 to output - BLUE LED
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2)); // Clear speed register
 8001618:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001622:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001626:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2)); // set speed register
 8001628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001636:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOA->OTYPER &= ~(0x0001 << (9 * 1)); // Clear output type register
 8001638:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800163c:	889b      	ldrh	r3, [r3, #4]
 800163e:	b29b      	uxth	r3, r3
 8001640:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001648:	b29b      	uxth	r3, r3
 800164a:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9)); // Set output type register
 800164c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001654:	8892      	ldrh	r2, [r2, #4]
 8001656:	b292      	uxth	r2, r2
 8001658:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOA->MODER &= ~(0x00000003 << (9 * 2)); // Clear mode register
 800165a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001664:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001668:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2)); // Set mode register
 800166a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PC7 to output - GREEN LED
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2)); // Clear speed register
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <initLed+0x12c>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4a27      	ldr	r2, [pc, #156]	; (800171c <initLed+0x12c>)
 8001680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001684:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2)); // set speed register
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <initLed+0x12c>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	4a24      	ldr	r2, [pc, #144]	; (800171c <initLed+0x12c>)
 800168c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001690:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOC->OTYPER &= ~(0x0001 << (7 * 1)); // Clear output type register
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <initLed+0x12c>)
 8001694:	889b      	ldrh	r3, [r3, #4]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4a20      	ldr	r2, [pc, #128]	; (800171c <initLed+0x12c>)
 800169a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800169e:	b29b      	uxth	r3, r3
 80016a0:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7)); // Set output type register
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <initLed+0x12c>)
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <initLed+0x12c>)
 80016a6:	8892      	ldrh	r2, [r2, #4]
 80016a8:	b292      	uxth	r2, r2
 80016aa:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOC->MODER &= ~(0x00000003 << (7 * 2)); // Clear mode register
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <initLed+0x12c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <initLed+0x12c>)
 80016b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016b6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2)); // Set mode register
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <initLed+0x12c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <initLed+0x12c>)
 80016be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c2:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PB4 to output - RED LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2)); // Clear speed register
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <initLed+0x130>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <initLed+0x130>)
 80016ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ce:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2)); // set speed register
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <initLed+0x130>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <initLed+0x130>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016da:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (4 * 1)); // Clear output type register
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <initLed+0x130>)
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <initLed+0x130>)
 80016e4:	f023 0310 	bic.w	r3, r3, #16
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4)); // Set output type register
 80016ec:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <initLed+0x130>)
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <initLed+0x130>)
 80016f0:	8892      	ldrh	r2, [r2, #4]
 80016f2:	b292      	uxth	r2, r2
 80016f4:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <initLed+0x130>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <initLed+0x130>)
 80016fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001700:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2)); // Set mode register
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <initLed+0x130>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <initLed+0x130>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	48000800 	.word	0x48000800
 8001720:	48000400 	.word	0x48000400

08001724 <writeLed>:


void writeLed(){
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

	// Right - Blue
	if(led.blu){
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <writeLed+0x94>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00a      	beq.n	8001746 <writeLed+0x22>
		GPIOA->ODR &= ~(0x0001 << 9); //Set pin PA9 to low - on
 8001730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001734:	8a9b      	ldrh	r3, [r3, #20]
 8001736:	b29b      	uxth	r3, r3
 8001738:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800173c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001740:	b29b      	uxth	r3, r3
 8001742:	8293      	strh	r3, [r2, #20]
 8001744:	e009      	b.n	800175a <writeLed+0x36>
	}
	else{
		GPIOA->ODR |= (0x0001 << 9); //Set pin PA9 to high - off
 8001746:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800174a:	8a9b      	ldrh	r3, [r3, #20]
 800174c:	b29b      	uxth	r3, r3
 800174e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	b29b      	uxth	r3, r3
 8001758:	8293      	strh	r3, [r2, #20]
	}


	// Up - Green
	if(led.gre){
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <writeLed+0x94>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <writeLed+0x50>
		GPIOC->ODR &= ~(0x0001 << 7); //Set pin PC7 to low - on
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <writeLed+0x98>)
 8001764:	8a9b      	ldrh	r3, [r3, #20]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <writeLed+0x98>)
 800176a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800176e:	b29b      	uxth	r3, r3
 8001770:	8293      	strh	r3, [r2, #20]
 8001772:	e007      	b.n	8001784 <writeLed+0x60>
	}
	else{
		GPIOC->ODR |= (0x0001 << 7); //Set pin PC7 to high - off
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <writeLed+0x98>)
 8001776:	8a9b      	ldrh	r3, [r3, #20]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4a10      	ldr	r2, [pc, #64]	; (80017bc <writeLed+0x98>)
 800177c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001780:	b29b      	uxth	r3, r3
 8001782:	8293      	strh	r3, [r2, #20]
	}


	// Left - Red
	if(led.red){
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <writeLed+0x94>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <writeLed+0x7a>
		GPIOB->ODR &= ~(0x0001 << 4); //Set pin PB4 to low - on
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <writeLed+0x9c>)
 800178e:	8a9b      	ldrh	r3, [r3, #20]
 8001790:	b29b      	uxth	r3, r3
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <writeLed+0x9c>)
 8001794:	f023 0310 	bic.w	r3, r3, #16
 8001798:	b29b      	uxth	r3, r3
 800179a:	8293      	strh	r3, [r2, #20]
	}
	else{
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
	}

}
 800179c:	e007      	b.n	80017ae <writeLed+0x8a>
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <writeLed+0x9c>)
 80017a0:	8a9b      	ldrh	r3, [r3, #20]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <writeLed+0x9c>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	8293      	strh	r3, [r2, #20]
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	200001c4 	.word	0x200001c4
 80017bc:	48000800 	.word	0x48000800
 80017c0:	48000400 	.word	0x48000400

080017c4 <windowSmp>:
		printf("%c", btt);
	}
	printf("%c\n", br);
}

void windowSmp(int x1, int y1, int x2, int y2) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b090      	sub	sp, #64	; 0x40
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]

		int tl = 218; 	// ┌
 80017d2:	23da      	movs	r3, #218	; 0xda
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
		int lsd = 180; 	// ┤
 80017d6:	23b4      	movs	r3, #180	; 0xb4
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		int bl = 192;	// └
 80017da:	23c0      	movs	r3, #192	; 0xc0
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
		int wll = 179;	// │
 80017de:	23b3      	movs	r3, #179	; 0xb3
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
		int btt = 196; 	// ─
 80017e2:	23c4      	movs	r3, #196	; 0xc4
 80017e4:	623b      	str	r3, [r7, #32]
		int tr = 191; 	// ┐
 80017e6:	23bf      	movs	r3, #191	; 0xbf
 80017e8:	61fb      	str	r3, [r7, #28]
		int rsd = 195;	// ├
 80017ea:	23c3      	movs	r3, #195	; 0xc3
 80017ec:	61bb      	str	r3, [r7, #24]
		int br = 217;	// ┘
 80017ee:	23d9      	movs	r3, #217	; 0xd9
 80017f0:	617b      	str	r3, [r7, #20]

		//Top ┌──────┐
		gotoxy(x1, y1);
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 f8a3 	bl	8001940 <gotoxy>
		printf("%c", tl);
 80017fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017fc:	f001 f8b2 	bl	8002964 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3301      	adds	r3, #1
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001806:	e005      	b.n	8001814 <windowSmp+0x50>
			printf("%c",btt);
 8001808:	6a38      	ldr	r0, [r7, #32]
 800180a:	f001 f8ab 	bl	8002964 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 800180e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001810:	3301      	adds	r3, #1
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800181a:	429a      	cmp	r2, r3
 800181c:	dbf4      	blt.n	8001808 <windowSmp+0x44>
		}


		printf("%c\n", tr);
 800181e:	69f9      	ldr	r1, [r7, #28]
 8001820:	481d      	ldr	r0, [pc, #116]	; (8001898 <windowSmp+0xd4>)
 8001822:	f001 f887 	bl	8002934 <iprintf>

		//Mid │        │
		for (int i = y1+1; i < y2; i++) {
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3301      	adds	r3, #1
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
 800182c:	e012      	b.n	8001854 <windowSmp+0x90>
			gotoxy(x1, i);
 800182e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f885 	bl	8001940 <gotoxy>
			printf("%c", wll);
 8001836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001838:	f001 f894 	bl	8002964 <putchar>
			gotoxy(x2-1,i);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f87c 	bl	8001940 <gotoxy>
			printf("%c", wll);
 8001848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800184a:	f001 f88b 	bl	8002964 <putchar>
		for (int i = y1+1; i < y2; i++) {
 800184e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001850:	3301      	adds	r3, #1
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
 8001854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbe8      	blt.n	800182e <windowSmp+0x6a>
		}

		//Bottom  └─────────┘
		gotoxy(x1,y2);
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f86e 	bl	8001940 <gotoxy>
		printf("%c", bl);
 8001864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001866:	f001 f87d 	bl	8002964 <putchar>
		for (int i=x1; i < x2-2; i++){
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
 800186e:	e005      	b.n	800187c <windowSmp+0xb8>
			printf("%c", btt);
 8001870:	6a38      	ldr	r0, [r7, #32]
 8001872:	f001 f877 	bl	8002964 <putchar>
		for (int i=x1; i < x2-2; i++){
 8001876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001878:	3301      	adds	r3, #1
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b02      	subs	r3, #2
 8001880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001882:	429a      	cmp	r2, r3
 8001884:	dbf4      	blt.n	8001870 <windowSmp+0xac>
		}
		printf("%c\n", br);
 8001886:	6979      	ldr	r1, [r7, #20]
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <windowSmp+0xd4>)
 800188a:	f001 f853 	bl	8002934 <iprintf>
	}
 800188e:	bf00      	nop
 8001890:	3740      	adds	r7, #64	; 0x40
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	08003a54 	.word	0x08003a54

0800189c <fgcolor>:
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	 4        Blue            12       Light Blue
	 5        Purple          13       Light Purple
	 6        Cyan            14       Light Cyan
	 7        Light Gray      15       White
	 */
	uint8_t type = 22;             // normal text
 80018a6:	2316      	movs	r3, #22
 80018a8:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b07      	cmp	r3, #7
 80018ae:	d904      	bls.n	80018ba <fgcolor+0x1e>
		type = 1;                // bold text
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	3b08      	subs	r3, #8
 80018b8:	71fb      	strb	r3, [r7, #7]
	}
	printf("%c[%d;%dm", ESC, type, foreground + 30);
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	331e      	adds	r3, #30
 80018c0:	211b      	movs	r1, #27
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <fgcolor+0x34>)
 80018c4:	f001 f836 	bl	8002934 <iprintf>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	08003a58 	.word	0x08003a58

080018d4 <bgcolor>:

void bgcolor(uint8_t background) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	 4        Blue
	 5        Purple
	 6        Cyan
	 7        Gray
	 */
	printf("%c[%dm", ESC, background + 40);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	3328      	adds	r3, #40	; 0x28
 80018e2:	461a      	mov	r2, r3
 80018e4:	211b      	movs	r1, #27
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <bgcolor+0x20>)
 80018e8:	f001 f824 	bl	8002934 <iprintf>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	08003a64 	.word	0x08003a64

080018f8 <resetbgcolor>:
		foreground -= 8;
	}
	printf("%c[%d;%d;%dm", ESC, type, foreground + 30, background + 40);
}

void resetbgcolor() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
 80018fc:	211b      	movs	r1, #27
 80018fe:	4802      	ldr	r0, [pc, #8]	; (8001908 <resetbgcolor+0x10>)
 8001900:	f001 f818 	bl	8002934 <iprintf>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08003a7c 	.word	0x08003a7c

0800190c <clrscr>:

void clrscr() {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 8001910:	4a08      	ldr	r2, [pc, #32]	; (8001934 <clrscr+0x28>)
 8001912:	211b      	movs	r1, #27
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <clrscr+0x2c>)
 8001916:	f001 f80d 	bl	8002934 <iprintf>
	printf("%c[%s", ESC, "3J");
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <clrscr+0x30>)
 800191c:	211b      	movs	r1, #27
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <clrscr+0x2c>)
 8001920:	f001 f808 	bl	8002934 <iprintf>
	resetbgcolor();
 8001924:	f7ff ffe8 	bl	80018f8 <resetbgcolor>

	gotoxy(0, 0);
 8001928:	2100      	movs	r1, #0
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f808 	bl	8001940 <gotoxy>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	08003a84 	.word	0x08003a84
 8001938:	08003a88 	.word	0x08003a88
 800193c:	08003a90 	.word	0x08003a90

08001940 <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	211b      	movs	r1, #27
 8001950:	4803      	ldr	r0, [pc, #12]	; (8001960 <gotoxy+0x20>)
 8001952:	f000 ffef 	bl	8002934 <iprintf>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	08003a98 	.word	0x08003a98

08001964 <bold>:
		//printf("\x1b[24m");
		printf("%c[%dm", ESC, 24);
	}
}

void bold(int state) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if (state) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <bold+0x1a>
		//printf("\x1b[4m");
		printf("%c[%dm", ESC, 01);
 8001972:	2201      	movs	r2, #1
 8001974:	211b      	movs	r1, #27
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <bold+0x2c>)
 8001978:	f000 ffdc 	bl	8002934 <iprintf>
	} else {
		//printf("\x1b[24m");
		printf("%c[%dm", ESC, 22);
	}
}
 800197c:	e004      	b.n	8001988 <bold+0x24>
		printf("%c[%dm", ESC, 22);
 800197e:	2216      	movs	r2, #22
 8001980:	211b      	movs	r1, #27
 8001982:	4803      	ldr	r0, [pc, #12]	; (8001990 <bold+0x2c>)
 8001984:	f000 ffd6 	bl	8002934 <iprintf>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	08003a64 	.word	0x08003a64

08001994 <NVIC_EnableIRQ>:
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2201      	movs	r2, #1
 80019a6:	fa02 f103 	lsl.w	r1, r2, r3
 80019aa:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <NVIC_EnableIRQ+0x30>)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	095b      	lsrs	r3, r3, #5
 80019b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da0b      	bge.n	80019f4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <NVIC_SetPriority+0x4c>)
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	3b04      	subs	r3, #4
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80019f2:	e009      	b.n	8001a08 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <NVIC_SetPriority+0x50>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <initTimer2>:
#include "ansi.h"
#include "timer.h"
#include "joystick.h"


void initTimer2(){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2;
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <initTimer2+0xd8>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <initTimer2+0xd8>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 	= 0x0000; // Configure timer 2
 8001a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]

	TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 8001a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a42:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 8001a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6213      	str	r3, [r2, #32]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 8001a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a62:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6e:	f023 0303 	bic.w	r3, r3, #3
 8001a72:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 8001a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a82:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8001a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8e:	f023 0308 	bic.w	r3, r3, #8
 8001a92:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9e:	f043 0308 	orr.w	r3, r3, #8
 8001aa2:	61d3      	str	r3, [r2, #28]
	TIM2->CCR3 = RELOAD_VALUE / 2; // Set duty cycle to 50 %
 8001aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001aac:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CR1 	= 0x0001; // Configure timer 2
 8001aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	801a      	strh	r2, [r3, #0]

	TIM2->ARR 	= 0xF9FF; // Set reload value
 8001ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aba:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC 	= 0x0009; // Set prescale value
 8001ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac4:	2209      	movs	r2, #9
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->DIER	|= 0x0001;
 8001ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	60d3      	str	r3, [r2, #12]
	TIM2->SR	= 0x0000;
 8001ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]

	NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	201c      	movs	r0, #28
 8001ae4:	f7ff ff70 	bl	80019c8 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt
 8001ae8:	201c      	movs	r0, #28
 8001aea:	f7ff ff53 	bl	8001994 <NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0


//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM2->SR &= ~0x0001; // Clear interrupt bit
 8001afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	6113      	str	r3, [r2, #16]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <initBuzz>:


void initBuzz(){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	// Set pin PA9 to output - BLUE LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (10 * 2)); // Clear speed register
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <initBuzz+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <initBuzz+0x5c>)
 8001b22:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b26:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (10 * 2)); // set speed register
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <initBuzz+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <initBuzz+0x5c>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b32:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (10 * 1)); // Clear output type register
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <initBuzz+0x5c>)
 8001b36:	889b      	ldrh	r3, [r3, #4]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <initBuzz+0x5c>)
 8001b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (10)); // Set output type register
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <initBuzz+0x5c>)
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <initBuzz+0x5c>)
 8001b48:	8892      	ldrh	r2, [r2, #4]
 8001b4a:	b292      	uxth	r2, r2
 8001b4c:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (10 * 2)); // Clear mode register
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <initBuzz+0x5c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <initBuzz+0x5c>)
 8001b54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b58:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000002 << (10 * 2)); // Set mode register
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <initBuzz+0x5c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <initBuzz+0x5c>)
 8001b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b64:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 8001b66:	2201      	movs	r2, #1
 8001b68:	210a      	movs	r1, #10
 8001b6a:	4802      	ldr	r0, [pc, #8]	; (8001b74 <initBuzz+0x5c>)
 8001b6c:	f7fe ff6e 	bl	8000a4c <GPIO_PinAFConfig>

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	48000400 	.word	0x48000400

08001b78 <setFreq>:




void setFreq(uint16_t freq)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
    // Calculate the new auto-reload value based on the desired frequency
    uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fcc5 	bl	8000514 <__aeabi_i2d>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	a11c      	add	r1, pc, #112	; (adr r1, 8001c00 <setFreq+0x88>)
 8001b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b94:	f7fe fe52 	bl	800083c <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <setFreq+0x80>)
 8001ba6:	f7fe fe49 	bl	800083c <__aeabi_ddiv>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <setFreq+0x84>)
 8001bb8:	f7fe fb5e 	bl	8000278 <__aeabi_dsub>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7fe ff22 	bl	8000a0c <__aeabi_d2uiz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]

    // Set the new auto-reload value
    TIM2->ARR = reload;
 8001bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Set compare register to maintain 50% duty cycle
    TIM2->CCR3 = reload / 2;
 8001bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	63d3      	str	r3, [r2, #60]	; 0x3c

    // Generate an update event to apply the new settings
    TIM2->EGR |= TIM_EGR_UG;
 8001bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6153      	str	r3, [r2, #20]
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40590000 	.word	0x40590000
 8001bfc:	3ff00000 	.word	0x3ff00000
 8001c00:	00000000 	.word	0x00000000
 8001c04:	418e8480 	.word	0x418e8480

08001c08 <main>:
#include "timer.h"
#include "LCD.h"
#include "joystick.h"
#include "asteroid.h"

int main(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	// Setup communication with the PC
	uart_init(112500);
 8001c0e:	4815      	ldr	r0, [pc, #84]	; (8001c64 <main+0x5c>)
 8001c10:	f7ff fae2 	bl	80011d8 <uart_init>

	clrscr();
 8001c14:	f7ff fe7a 	bl	800190c <clrscr>

	// Setup LEDs
	initLed();
 8001c18:	f7ff fcea 	bl	80015f0 <initLed>

	// Setup Joystick
	intiJoystick();
 8001c1c:	f7ff fbf6 	bl	800140c <intiJoystick>

	// Setup Timers with Buzzer
	initTimer();
 8001c20:	f000 fd30 	bl	8002684 <initTimer>
	initTimer2();
 8001c24:	f7ff fefa 	bl	8001a1c <initTimer2>
	initBuzz();
 8001c28:	f7ff ff76 	bl	8001b18 <initBuzz>
	setFreq(0);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff ffa3 	bl	8001b78 <setFreq>

	refreshRate = 8;
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <main+0x60>)
 8001c34:	2208      	movs	r2, #8
 8001c36:	601a      	str	r2, [r3, #0]
//	char bustin[] = "2d  4d  4C  4d  2A  4d  4C  4d  2a  4d  4C  4d  2G  4d  4C  4d  2g  4d  4C  4d  3f  4d  4C  4d  3C  4d  4C  4d  4C  4d  4C  4d  2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    3f   3d   3f   3d   3f   3d  3f  3d  3c 3C 3d  3f   3d   3f   3d   3f   3d  3f  3d  3c 3C 2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b       ";
//	char ballin[] = "2b 2b 2b 2b  3c   2b 2a   2g 2b   3d 3d 3d 3d 2b  3d 3d 3d 3d 3d 3d 3d 3e   3d 3d 3d 3d 3d 3e   2b 2a   2g 2g   3d 3d 3d 3d 3d 3e   2b 2a   2g 2g 2b 2b 2b 3c 2b 2a 2g 2a  2a 2g 2a  2b   2b 2b 2b 3c 2b 2a 2g 2a  2a 2g 3d  2b   2b 2b 2b 2b 2b 2a 2g 2a  2a 2g 3d  2b   3d 3d 3e  2b 2b 2a  2a 2a 2g 3d  2b   2b 2b 2b 3c 2b 2a 2g 2a 2g 2a 2g 2a  2e      3e 3d 3c 2b 2b 2b 2a 2g 2a  2g    2g 2g 3d 3d 3c 2b 2b  2a 2g 2a  2g   2b 2b 2b 2b 2b 2a 2g 2a  2a 2a 2a 2g 2b   3d 3d 3d 3d 3d 3d 2b 2a 2a 2a 2a 2a 2g 2b  2g  3d 3d 3d 3d 3d 3d 3e 2b 2a 2a 2a 2g 2b  2g  3d 3d 3d 3d 3d 3d 3e 2b 2b 2a 2a 2g 2b  2g   2b 2b 2b 3d 3d 2a   2a 2a 2g 2b  2e    3d 3d 3e 2b 2b   3d 3d 3d 3e  2b  3d  3d 2b 3d 3d 3d 2b 2a 2a 2a 2g 2b  2g        3e  2b 2b 2b 2b 2b  2g  3d 3d 3d 3d 3d 3d 3e 2b 2a 2a 2a 2g 2b  2g    3d  3c 2b 2b 2a 2a 2g 2a  2b   3d 3d 3d 3d 2b 3d  3d  3c 2b 2a  2b   3d 3d 3d 3d 2b 3d 3d 3d 3c 2b 2a 2a  2b   3d 3d 3d 3e          3c          3c   2b 2a   2g 2b   3d 3d 3d 3d 2b  3d 3d 3d 3d 3d 3d 3d 3e   3d 3d 3d 3d 3d 3e   2b 2a   2g 2g   3d 3d 3d 3d 3d 3e   2b 2a   2g 2g 2b 2b 2b 3c 2b 2a 2g 2a  2a 2g 2a  2b   2b 2b 2b 3c 2b 2a 2g 2a  2a 2g   2b   2b 2b 2b 2b 2b 2a 2g 2a  2a 2g   2b   3d 3d 3e  2b 2b 2a  2a 2a 2g 3d  2b         ";
//
//	char virus[] ="2e  2a  2b  3c      3d  2b      3c  2a          2a 2G 2a 2b 3c 3d 3e    3e    3e    3e    3e            3d  3e  3f        2b    3c  3d  3e        2a    2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c      3d  2b      3c  2a          2a 2G 2a 2b 3c 3d 3e    3e    3e    3e    3e            3d  3e  3f        2b    3c  3d  3e        2a    2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c      3d  2b      3c  2a          2a  2G  2a  2b  2e  2D  2e  2b  2e  3e  3d  3d  3c  2b  2a  2a  2b  3c  2a  2b  2g  2F  2g  2b  2g  3g  3f  3f  3e  3d  3c  3c  3d  3e  3c  3C  2a  3C  3e  3a    3g    3f  3e  3d  3C  3d  2a  2G  2a                            3a  3b  3e  3e      3d 3c 2b  3c  3d  2e  3c  2b  2a  2G  2a  2b  3c  2a  2b     2g  2b  3g                 2b              3A  3g  3A  3e  3a  3g  3a  3f  3a  3e  3a  3D      2b  3D  4c    3D    3b    2d  2e  2f  2g  2f  2e  2d          2e  2a  2b  3c      3d  2b      3c  2a          2a 2G 2a 2b 3c 3d 3e    3e    3e    3e    3e            3d  3e  3f        2b    3c  3d  3e        2a    2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c      3d  2b      3c  2a          2a 2G 2a 2b 3c 3d 3e    3e    3e    3e    3e            3d  3e  3f        2b    3c  3d  3e        2a    2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c    3d  2b    3c  2a      2a  2G  2a  2b  3c  3d  3e    3e  3e    3e  3a      3d  3e  3f      2b  3c  3d  3e      2a    3c    2b                                                       ";

	t.mn = 0;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <main+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	705a      	strb	r2, [r3, #1]
	t.sk = 10;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <main+0x64>)
 8001c40:	220a      	movs	r2, #10
 8001c42:	709a      	strb	r2, [r3, #2]
	t.state = 0;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <main+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	711a      	strb	r2, [r3, #4]

//	windowSmp(1,2,43,4);

	// initilize keyboard input:
	int i=0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
	uart_clear();
 8001c4e:	f7ff faad 	bl	80011ac <uart_clear>
	char random;
	int buffer_lenght;

	helpScreen();
 8001c52:	f000 f80f 	bl	8001c74 <helpScreen>

	while (1) {

		if (lcdUpdate == 0){
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <main+0x68>)
 8001c58:	681b      	ldr	r3, [r3, #0]
		}


//		readJoystick();

		timeControll();
 8001c5a:	f000 fdeb 	bl	8002834 <timeControll>

		writeLed();
 8001c5e:	f7ff fd61 	bl	8001724 <writeLed>
		if (lcdUpdate == 0){
 8001c62:	e7f8      	b.n	8001c56 <main+0x4e>
 8001c64:	0001b774 	.word	0x0001b774
 8001c68:	200001dc 	.word	0x200001dc
 8001c6c:	200001e8 	.word	0x200001e8
 8001c70:	200001d0 	.word	0x200001d0

08001c74 <helpScreen>:

void helpScreen(){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af02      	add	r7, sp, #8
	windowSmp(1,1,184,58);
 8001c7a:	233a      	movs	r3, #58	; 0x3a
 8001c7c:	22b8      	movs	r2, #184	; 0xb8
 8001c7e:	2101      	movs	r1, #1
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff fd9f 	bl	80017c4 <windowSmp>
	spaceship(2,27,91,31);
 8001c86:	231f      	movs	r3, #31
 8001c88:	225b      	movs	r2, #91	; 0x5b
 8001c8a:	211b      	movs	r1, #27
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f000 f937 	bl	8001f00 <spaceship>

	playerInSpaceR(1,23,24);
 8001c92:	2218      	movs	r2, #24
 8001c94:	2117      	movs	r1, #23
 8001c96:	2001      	movs	r0, #1
 8001c98:	f000 fa62 	bl	8002160 <playerInSpaceR>

	playerInShipL(2,37,28);
 8001c9c:	221c      	movs	r2, #28
 8001c9e:	2125      	movs	r1, #37	; 0x25
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f000 fb09 	bl	80022b8 <playerInShipL>

	gotoxy(100,29);
 8001ca6:	211d      	movs	r1, #29
 8001ca8:	2064      	movs	r0, #100	; 0x64
 8001caa:	f7ff fe49 	bl	8001940 <gotoxy>
	for(int i=0; i<3;i++){
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e010      	b.n	8001cd6 <helpScreen+0x62>
		for (int j=0;j<3;j++){
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	e007      	b.n	8001cca <helpScreen+0x56>
			printf("%c",176+i);
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	33b0      	adds	r3, #176	; 0xb0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fe50 	bl	8002964 <putchar>
		for (int j=0;j<3;j++){
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	ddf4      	ble.n	8001cba <helpScreen+0x46>
	for(int i=0; i<3;i++){
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	ddeb      	ble.n	8001cb4 <helpScreen+0x40>
		}
	}

	//Guide PLayer 1
	windowSmp(7,18,42,21);
 8001cdc:	2315      	movs	r3, #21
 8001cde:	222a      	movs	r2, #42	; 0x2a
 8001ce0:	2112      	movs	r1, #18
 8001ce2:	2007      	movs	r0, #7
 8001ce4:	f7ff fd6e 	bl	80017c4 <windowSmp>
	gotoxy(9,19);
 8001ce8:	2113      	movs	r1, #19
 8001cea:	2009      	movs	r0, #9
 8001cec:	f7ff fe28 	bl	8001940 <gotoxy>
	printf("Player 1 Action: Center.");
 8001cf0:	4878      	ldr	r0, [pc, #480]	; (8001ed4 <helpScreen+0x260>)
 8001cf2:	f000 fe1f 	bl	8002934 <iprintf>
	gotoxy(9,20);
 8001cf6:	2114      	movs	r1, #20
 8001cf8:	2009      	movs	r0, #9
 8001cfa:	f7ff fe21 	bl	8001940 <gotoxy>
	printf("Joystick: Up, Down, Left, Right.");
 8001cfe:	4876      	ldr	r0, [pc, #472]	; (8001ed8 <helpScreen+0x264>)
 8001d00:	f000 fe18 	bl	8002934 <iprintf>

	for (int i = 0; i<2;i++){
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e00b      	b.n	8001d22 <helpScreen+0xae>
		gotoxy(24,21+i);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3315      	adds	r3, #21
 8001d0e:	4619      	mov	r1, r3
 8001d10:	2018      	movs	r0, #24
 8001d12:	f7ff fe15 	bl	8001940 <gotoxy>
		printf("%c",179);
 8001d16:	20b3      	movs	r0, #179	; 0xb3
 8001d18:	f000 fe24 	bl	8002964 <putchar>
	for (int i = 0; i<2;i++){
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	ddf0      	ble.n	8001d0a <helpScreen+0x96>
	}
	gotoxy(24,21);
 8001d28:	2115      	movs	r1, #21
 8001d2a:	2018      	movs	r0, #24
 8001d2c:	f7ff fe08 	bl	8001940 <gotoxy>
	printf("%c",194);
 8001d30:	20c2      	movs	r0, #194	; 0xc2
 8001d32:	f000 fe17 	bl	8002964 <putchar>


	// Guide Player 2
	windowSmp(34,33,58,36);
 8001d36:	2324      	movs	r3, #36	; 0x24
 8001d38:	223a      	movs	r2, #58	; 0x3a
 8001d3a:	2121      	movs	r1, #33	; 0x21
 8001d3c:	2022      	movs	r0, #34	; 0x22
 8001d3e:	f7ff fd41 	bl	80017c4 <windowSmp>
	gotoxy(36,34);
 8001d42:	2122      	movs	r1, #34	; 0x22
 8001d44:	2024      	movs	r0, #36	; 0x24
 8001d46:	f7ff fdfb 	bl	8001940 <gotoxy>
	printf("Player 2 Action: E.");
 8001d4a:	4864      	ldr	r0, [pc, #400]	; (8001edc <helpScreen+0x268>)
 8001d4c:	f000 fdf2 	bl	8002934 <iprintf>
	gotoxy(36,35);
 8001d50:	2123      	movs	r1, #35	; 0x23
 8001d52:	2024      	movs	r0, #36	; 0x24
 8001d54:	f7ff fdf4 	bl	8001940 <gotoxy>
	printf("Keyboard: W, A, S, D.");
 8001d58:	4861      	ldr	r0, [pc, #388]	; (8001ee0 <helpScreen+0x26c>)
 8001d5a:	f000 fdeb 	bl	8002934 <iprintf>

	for (int i = 0; i<2;i++){
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e00b      	b.n	8001d7c <helpScreen+0x108>
		gotoxy(38,31+i);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	331f      	adds	r3, #31
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2026      	movs	r0, #38	; 0x26
 8001d6c:	f7ff fde8 	bl	8001940 <gotoxy>
		printf("%c",179);
 8001d70:	20b3      	movs	r0, #179	; 0xb3
 8001d72:	f000 fdf7 	bl	8002964 <putchar>
	for (int i = 0; i<2;i++){
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	ddf0      	ble.n	8001d64 <helpScreen+0xf0>
	}
	gotoxy(38,33);
 8001d82:	2121      	movs	r1, #33	; 0x21
 8001d84:	2026      	movs	r0, #38	; 0x26
 8001d86:	f7ff fddb 	bl	8001940 <gotoxy>
	printf("%c",193);
 8001d8a:	20c1      	movs	r0, #193	; 0xc1
 8001d8c:	f000 fdea 	bl	8002964 <putchar>


	//Up & down controll
	for (int i = 0; i<3;i++){
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e00b      	b.n	8001dae <helpScreen+0x13a>
		gotoxy(28,28+i);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	331c      	adds	r3, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	201c      	movs	r0, #28
 8001d9e:	f7ff fdcf 	bl	8001940 <gotoxy>
		printf("%c",179);
 8001da2:	20b3      	movs	r0, #179	; 0xb3
 8001da4:	f000 fdde 	bl	8002964 <putchar>
	for (int i = 0; i<3;i++){
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	ddf0      	ble.n	8001d96 <helpScreen+0x122>
	}

	gotoxy(25,29);
 8001db4:	211d      	movs	r1, #29
 8001db6:	2019      	movs	r0, #25
 8001db8:	f7ff fdc2 	bl	8001940 <gotoxy>
	printf("%c%c%c%c",218,196,196,180);
 8001dbc:	23b4      	movs	r3, #180	; 0xb4
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	23c4      	movs	r3, #196	; 0xc4
 8001dc2:	22c4      	movs	r2, #196	; 0xc4
 8001dc4:	21da      	movs	r1, #218	; 0xda
 8001dc6:	4847      	ldr	r0, [pc, #284]	; (8001ee4 <helpScreen+0x270>)
 8001dc8:	f000 fdb4 	bl	8002934 <iprintf>

	for (int i = 0; i<7;i++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	e00b      	b.n	8001dea <helpScreen+0x176>
		gotoxy(25,30+i);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	331e      	adds	r3, #30
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	2019      	movs	r0, #25
 8001dda:	f7ff fdb1 	bl	8001940 <gotoxy>
		printf("%c",179);
 8001dde:	20b3      	movs	r0, #179	; 0xb3
 8001de0:	f000 fdc0 	bl	8002964 <putchar>
	for (int i = 0; i<7;i++){
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b06      	cmp	r3, #6
 8001dee:	ddf0      	ble.n	8001dd2 <helpScreen+0x15e>
	}

	windowSmp(3,37,41,40);
 8001df0:	2328      	movs	r3, #40	; 0x28
 8001df2:	2229      	movs	r2, #41	; 0x29
 8001df4:	2125      	movs	r1, #37	; 0x25
 8001df6:	2003      	movs	r0, #3
 8001df8:	f7ff fce4 	bl	80017c4 <windowSmp>
	gotoxy(5,38);
 8001dfc:	2126      	movs	r1, #38	; 0x26
 8001dfe:	2005      	movs	r0, #5
 8001e00:	f7ff fd9e 	bl	8001940 <gotoxy>
	printf("UP: Move ontop and press Up or W.");
 8001e04:	4838      	ldr	r0, [pc, #224]	; (8001ee8 <helpScreen+0x274>)
 8001e06:	f000 fd95 	bl	8002934 <iprintf>
	gotoxy(5,39);
 8001e0a:	2127      	movs	r1, #39	; 0x27
 8001e0c:	2005      	movs	r0, #5
 8001e0e:	f7ff fd97 	bl	8001940 <gotoxy>
	printf("Down: Move under and press Up or W.");
 8001e12:	4836      	ldr	r0, [pc, #216]	; (8001eec <helpScreen+0x278>)
 8001e14:	f000 fd8e 	bl	8002934 <iprintf>

	gotoxy(25,37);
 8001e18:	2125      	movs	r1, #37	; 0x25
 8001e1a:	2019      	movs	r0, #25
 8001e1c:	f7ff fd90 	bl	8001940 <gotoxy>
	printf("%c",193);
 8001e20:	20c1      	movs	r0, #193	; 0xc1
 8001e22:	f000 fd9f 	bl	8002964 <putchar>


	// Hatches
	for (int i = 0; i<3;i++){
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	e00b      	b.n	8001e44 <helpScreen+0x1d0>
		gotoxy(54,28+i);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	331c      	adds	r3, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	2036      	movs	r0, #54	; 0x36
 8001e34:	f7ff fd84 	bl	8001940 <gotoxy>
		printf("%c",179);
 8001e38:	20b3      	movs	r0, #179	; 0xb3
 8001e3a:	f000 fd93 	bl	8002964 <putchar>
	for (int i = 0; i<3;i++){
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3301      	adds	r3, #1
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	ddf0      	ble.n	8001e2c <helpScreen+0x1b8>
	}
	gotoxy(54,29);
 8001e4a:	211d      	movs	r1, #29
 8001e4c:	2036      	movs	r0, #54	; 0x36
 8001e4e:	f7ff fd77 	bl	8001940 <gotoxy>
	printf("%c%c%c%c",195,196,196,217);
 8001e52:	23d9      	movs	r3, #217	; 0xd9
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	23c4      	movs	r3, #196	; 0xc4
 8001e58:	22c4      	movs	r2, #196	; 0xc4
 8001e5a:	21c3      	movs	r1, #195	; 0xc3
 8001e5c:	4821      	ldr	r0, [pc, #132]	; (8001ee4 <helpScreen+0x270>)
 8001e5e:	f000 fd69 	bl	8002934 <iprintf>
	for (int i = 0; i<3;i++){
 8001e62:	2300      	movs	r3, #0
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	e00b      	b.n	8001e80 <helpScreen+0x20c>
		gotoxy(57,26+i);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	331a      	adds	r3, #26
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	2039      	movs	r0, #57	; 0x39
 8001e70:	f7ff fd66 	bl	8001940 <gotoxy>
		printf("%c",179);
 8001e74:	20b3      	movs	r0, #179	; 0xb3
 8001e76:	f000 fd75 	bl	8002964 <putchar>
	for (int i = 0; i<3;i++){
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	ddf0      	ble.n	8001e68 <helpScreen+0x1f4>
	}

	windowSmp(43,20,74,25);
 8001e86:	2319      	movs	r3, #25
 8001e88:	224a      	movs	r2, #74	; 0x4a
 8001e8a:	2114      	movs	r1, #20
 8001e8c:	202b      	movs	r0, #43	; 0x2b
 8001e8e:	f7ff fc99 	bl	80017c4 <windowSmp>
	gotoxy(45,21);
 8001e92:	2115      	movs	r1, #21
 8001e94:	202d      	movs	r0, #45	; 0x2d
 8001e96:	f7ff fd53 	bl	8001940 <gotoxy>
	printf("Up or W: Move to top deck.");
 8001e9a:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <helpScreen+0x27c>)
 8001e9c:	f000 fd4a 	bl	8002934 <iprintf>
	gotoxy(45,22);
 8001ea0:	2116      	movs	r1, #22
 8001ea2:	202d      	movs	r0, #45	; 0x2d
 8001ea4:	f7ff fd4c 	bl	8001940 <gotoxy>
	printf("Down or S: Move to sub deck.");
 8001ea8:	4812      	ldr	r0, [pc, #72]	; (8001ef4 <helpScreen+0x280>)
 8001eaa:	f000 fd43 	bl	8002934 <iprintf>
	gotoxy(45,23);
 8001eae:	2117      	movs	r1, #23
 8001eb0:	202d      	movs	r0, #45	; 0x2d
 8001eb2:	f7ff fd45 	bl	8001940 <gotoxy>
	printf("To go backinto middle deck,");
 8001eb6:	4810      	ldr	r0, [pc, #64]	; (8001ef8 <helpScreen+0x284>)
 8001eb8:	f000 fd3c 	bl	8002934 <iprintf>
	gotoxy(45,24);
 8001ebc:	2118      	movs	r1, #24
 8001ebe:	202d      	movs	r0, #45	; 0x2d
 8001ec0:	f7ff fd3e 	bl	8001940 <gotoxy>
	printf("Use down or S.");
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <helpScreen+0x288>)
 8001ec6:	f000 fd35 	bl	8002934 <iprintf>



}
 8001eca:	bf00      	nop
 8001ecc:	3720      	adds	r7, #32
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	08003aa4 	.word	0x08003aa4
 8001ed8:	08003ac0 	.word	0x08003ac0
 8001edc:	08003ae4 	.word	0x08003ae4
 8001ee0:	08003af8 	.word	0x08003af8
 8001ee4:	08003b10 	.word	0x08003b10
 8001ee8:	08003b1c 	.word	0x08003b1c
 8001eec:	08003b40 	.word	0x08003b40
 8001ef0:	08003b64 	.word	0x08003b64
 8001ef4:	08003b80 	.word	0x08003b80
 8001ef8:	08003ba0 	.word	0x08003ba0
 8001efc:	08003bbc 	.word	0x08003bbc

08001f00 <spaceship>:


void spaceship(int x1, int y1, int x2, int y2) { // Ship
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b090      	sub	sp, #64	; 0x40
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
	fgcolor(1);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f7ff fcc4 	bl	800189c <fgcolor>
	int ex = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	63fb      	str	r3, [r7, #60]	; 0x3c
	gotoxy(x1+15, y1);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	330f      	adds	r3, #15
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fd0e 	bl	8001940 <gotoxy>
	for(int i = 0; i <9; i++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f28:	e005      	b.n	8001f36 <spaceship+0x36>
	printf("%c",219);
 8001f2a:	20db      	movs	r0, #219	; 0xdb
 8001f2c:	f000 fd1a 	bl	8002964 <putchar>
	for(int i = 0; i <9; i++) {
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	3301      	adds	r3, #1
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	ddf6      	ble.n	8001f2a <spaceship+0x2a>
	}
	bgcolor(5);
 8001f3c:	2005      	movs	r0, #5
 8001f3e:	f7ff fcc9 	bl	80018d4 <bgcolor>
	fgcolor(0);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff fcaa 	bl	800189c <fgcolor>
	printf("  UP  ");
 8001f48:	4881      	ldr	r0, [pc, #516]	; (8002150 <spaceship+0x250>)
 8001f4a:	f000 fcf3 	bl	8002934 <iprintf>
	bgcolor(0);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff fcc0 	bl	80018d4 <bgcolor>
	fgcolor(1);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7ff fca1 	bl	800189c <fgcolor>
	for(int i = 0; i <20; i++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5e:	e005      	b.n	8001f6c <spaceship+0x6c>
	printf("%c",219);
 8001f60:	20db      	movs	r0, #219	; 0xdb
 8001f62:	f000 fcff 	bl	8002964 <putchar>
	for(int i = 0; i <20; i++) {
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	3301      	adds	r3, #1
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6e:	2b13      	cmp	r3, #19
 8001f70:	ddf6      	ble.n	8001f60 <spaceship+0x60>
	}
	bgcolor(6);
 8001f72:	2006      	movs	r0, #6
 8001f74:	f7ff fcae 	bl	80018d4 <bgcolor>
	fgcolor(0);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fc8f 	bl	800189c <fgcolor>
	printf("HATCH");
 8001f7e:	4875      	ldr	r0, [pc, #468]	; (8002154 <spaceship+0x254>)
 8001f80:	f000 fcd8 	bl	8002934 <iprintf>
	fgcolor(1);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff fc89 	bl	800189c <fgcolor>
	for(int i = 0; i <29; i++) {
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8e:	e005      	b.n	8001f9c <spaceship+0x9c>
	printf("%c",219);
 8001f90:	20db      	movs	r0, #219	; 0xdb
 8001f92:	f000 fce7 	bl	8002964 <putchar>
	for(int i = 0; i <29; i++) {
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	3301      	adds	r3, #1
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	2b1c      	cmp	r3, #28
 8001fa0:	ddf6      	ble.n	8001f90 <spaceship+0x90>
	}
	gotoxy(x1+15, y1+4);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f103 020f 	add.w	r2, r3, #15
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3304      	adds	r3, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f7ff fcc6 	bl	8001940 <gotoxy>
	for(int i = 0; i <9; i++) {
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb8:	e005      	b.n	8001fc6 <spaceship+0xc6>
	printf("%c",219);
 8001fba:	20db      	movs	r0, #219	; 0xdb
 8001fbc:	f000 fcd2 	bl	8002964 <putchar>
	for(int i = 0; i <9; i++) {
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	ddf6      	ble.n	8001fba <spaceship+0xba>
	}
	bgcolor(5);
 8001fcc:	2005      	movs	r0, #5
 8001fce:	f7ff fc81 	bl	80018d4 <bgcolor>
	fgcolor(0);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7ff fc62 	bl	800189c <fgcolor>
	printf(" DOWN ");
 8001fd8:	485f      	ldr	r0, [pc, #380]	; (8002158 <spaceship+0x258>)
 8001fda:	f000 fcab 	bl	8002934 <iprintf>
	bgcolor(0);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7ff fc78 	bl	80018d4 <bgcolor>
	fgcolor(1);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7ff fc59 	bl	800189c <fgcolor>
	for(int i = 0; i <20; i++) {
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fee:	e005      	b.n	8001ffc <spaceship+0xfc>
	printf("%c",219);
 8001ff0:	20db      	movs	r0, #219	; 0xdb
 8001ff2:	f000 fcb7 	bl	8002964 <putchar>
	for(int i = 0; i <20; i++) {
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	2b13      	cmp	r3, #19
 8002000:	ddf6      	ble.n	8001ff0 <spaceship+0xf0>
	}
	bgcolor(6);
 8002002:	2006      	movs	r0, #6
 8002004:	f7ff fc66 	bl	80018d4 <bgcolor>
	fgcolor(0);
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff fc47 	bl	800189c <fgcolor>
	printf("HATCH");
 800200e:	4851      	ldr	r0, [pc, #324]	; (8002154 <spaceship+0x254>)
 8002010:	f000 fc90 	bl	8002934 <iprintf>
	fgcolor(1);
 8002014:	2001      	movs	r0, #1
 8002016:	f7ff fc41 	bl	800189c <fgcolor>
	for(int i = 0; i <29; i++) {
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
 800201e:	e005      	b.n	800202c <spaceship+0x12c>
	printf("%c",219);
 8002020:	20db      	movs	r0, #219	; 0xdb
 8002022:	f000 fc9f 	bl	8002964 <putchar>
	for(int i = 0; i <29; i++) {
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	2b1c      	cmp	r3, #28
 8002030:	ddf6      	ble.n	8002020 <spaceship+0x120>
	}
	int a = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e030      	b.n	800209e <spaceship+0x19e>
	for(int i = 0; i < 7; i++){
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	e024      	b.n	800208c <spaceship+0x18c>
	gotoxy(x1+9+i+a, y1-3+j);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f103 0209 	add.w	r2, r3, #9
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	441a      	add	r2, r3
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	18d0      	adds	r0, r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	1eda      	subs	r2, r3, #3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	4413      	add	r3, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f7ff fc71 	bl	8001940 <gotoxy>
	printf("%c",219);
 800205e:	20db      	movs	r0, #219	; 0xdb
 8002060:	f000 fc80 	bl	8002964 <putchar>
	gotoxy(x1+9+i+a, y1+7-j);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f103 0209 	add.w	r2, r3, #9
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	441a      	add	r2, r3
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	18d0      	adds	r0, r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1dda      	adds	r2, r3, #7
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	4619      	mov	r1, r3
 800207c:	f7ff fc60 	bl	8001940 <gotoxy>
	printf("%c",219);
 8002080:	20db      	movs	r0, #219	; 0xdb
 8002082:	f000 fc6f 	bl	8002964 <putchar>
	for(int i = 0; i < 7; i++){
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3301      	adds	r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b06      	cmp	r3, #6
 8002090:	ddd7      	ble.n	8002042 <spaceship+0x142>
	} a+=2;
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	3302      	adds	r3, #2
 8002096:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < 3; j++){
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3301      	adds	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	ddcb      	ble.n	800203c <spaceship+0x13c>
	}
	for(int i = 1; i < 4; i++) {
 80020a4:	2301      	movs	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e039      	b.n	800211e <spaceship+0x21e>
	gotoxy(x1+15, y1+i);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f103 000f 	add.w	r0, r3, #15
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	4413      	add	r3, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7ff fc42 	bl	8001940 <gotoxy>
	printf("%c",219);
 80020bc:	20db      	movs	r0, #219	; 0xdb
 80020be:	f000 fc51 	bl	8002964 <putchar>
	for(int j = 0; j < 6; j++){
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e024      	b.n	8002112 <spaceship+0x212>
	gotoxy(x2-8+j, y1+i);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f1a3 0208 	sub.w	r2, r3, #8
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	18d0      	adds	r0, r2, r3
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	4413      	add	r3, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7ff fc31 	bl	8001940 <gotoxy>
	printf("%c",219);
 80020de:	20db      	movs	r0, #219	; 0xdb
 80020e0:	f000 fc40 	bl	8002964 <putchar>
	ex++;
 80020e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e6:	3301      	adds	r3, #1
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (ex < 5){
 80020ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	dc0d      	bgt.n	800210c <spaceship+0x20c>
	gotoxy(x2-3+j, y1+i+1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	1eda      	subs	r2, r3, #3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	18d0      	adds	r0, r2, r3
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4413      	add	r3, r2
 80020fe:	3301      	adds	r3, #1
 8002100:	4619      	mov	r1, r3
 8002102:	f7ff fc1d 	bl	8001940 <gotoxy>
	printf("%c",219);
 8002106:	20db      	movs	r0, #219	; 0xdb
 8002108:	f000 fc2c 	bl	8002964 <putchar>
	for(int j = 0; j < 6; j++){
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	3301      	adds	r3, #1
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b05      	cmp	r3, #5
 8002116:	ddd7      	ble.n	80020c8 <spaceship+0x1c8>
	for(int i = 1; i < 4; i++) {
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b03      	cmp	r3, #3
 8002122:	ddc2      	ble.n	80020aa <spaceship+0x1aa>
	}
	}
	}
	gotoxy(83,y1+2);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	3302      	adds	r3, #2
 8002128:	4619      	mov	r1, r3
 800212a:	2053      	movs	r0, #83	; 0x53
 800212c:	f7ff fc08 	bl	8001940 <gotoxy>
	fgcolor(0);
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff fbb3 	bl	800189c <fgcolor>
	bgcolor(7);
 8002136:	2007      	movs	r0, #7
 8002138:	f7ff fbcc 	bl	80018d4 <bgcolor>
	printf(" CANON   ");
 800213c:	4807      	ldr	r0, [pc, #28]	; (800215c <spaceship+0x25c>)
 800213e:	f000 fbf9 	bl	8002934 <iprintf>
	resetbgcolor();
 8002142:	f7ff fbd9 	bl	80018f8 <resetbgcolor>
}
 8002146:	bf00      	nop
 8002148:	3740      	adds	r7, #64	; 0x40
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	08003bcc 	.word	0x08003bcc
 8002154:	08003bd4 	.word	0x08003bd4
 8002158:	08003bdc 	.word	0x08003bdc
 800215c:	08003be4 	.word	0x08003be4

08002160 <playerInSpaceR>:


void playerInSpaceR(int p, int x, int y){   //duck
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
	if (p == 1) {
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d14c      	bne.n	800220c <playerInSpaceR+0xac>
	fgcolor(15);
 8002172:	200f      	movs	r0, #15
 8002174:	f7ff fb92 	bl	800189c <fgcolor>
	bgcolor(7);
 8002178:	2007      	movs	r0, #7
 800217a:	f7ff fbab 	bl	80018d4 <bgcolor>
	gotoxy(x+2,y);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3302      	adds	r3, #2
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fbdb 	bl	8001940 <gotoxy>
	printf("%c",254	);
 800218a:	20fe      	movs	r0, #254	; 0xfe
 800218c:	f000 fbea 	bl	8002964 <putchar>
	bgcolor(0);
 8002190:	2000      	movs	r0, #0
 8002192:	f7ff fb9f 	bl	80018d4 <bgcolor>

	gotoxy(x,y+1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3301      	adds	r3, #1
 800219a:	4619      	mov	r1, r3
 800219c:	68b8      	ldr	r0, [r7, #8]
 800219e:	f7ff fbcf 	bl	8001940 <gotoxy>
	printf("%c",223);
 80021a2:	20df      	movs	r0, #223	; 0xdf
 80021a4:	f000 fbde 	bl	8002964 <putchar>
	printf("%c",219);
 80021a8:	20db      	movs	r0, #219	; 0xdb
 80021aa:	f000 fbdb 	bl	8002964 <putchar>
	printf("%c",219);
 80021ae:	20db      	movs	r0, #219	; 0xdb
 80021b0:	f000 fbd8 	bl	8002964 <putchar>

	fgcolor(9);
 80021b4:	2009      	movs	r0, #9
 80021b6:	f7ff fb71 	bl	800189c <fgcolor>
	gotoxy(x+1,y+2);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3302      	adds	r3, #2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f7ff fbbb 	bl	8001940 <gotoxy>
	printf("%c",192);
 80021ca:	20c0      	movs	r0, #192	; 0xc0
 80021cc:	f000 fbca 	bl	8002964 <putchar>
	printf("%c",192);
 80021d0:	20c0      	movs	r0, #192	; 0xc0
 80021d2:	f000 fbc7 	bl	8002964 <putchar>

	bold(1);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f7ff fbc4 	bl	8001964 <bold>
	fgcolor(9);
 80021dc:	2009      	movs	r0, #9
 80021de:	f7ff fb5d 	bl	800189c <fgcolor>
	bgcolor(7);
 80021e2:	2007      	movs	r0, #7
 80021e4:	f7ff fb76 	bl	80018d4 <bgcolor>
	gotoxy(x+3,y);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3303      	adds	r3, #3
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fba6 	bl	8001940 <gotoxy>
	printf("%c",60);
 80021f4:	203c      	movs	r0, #60	; 0x3c
 80021f6:	f000 fbb5 	bl	8002964 <putchar>
	bgcolor(0);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff fb6a 	bl	80018d4 <bgcolor>
	fgcolor(2);
 8002200:	2002      	movs	r0, #2
 8002202:	f7ff fb4b 	bl	800189c <fgcolor>
	bold(0);
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff fbac 	bl	8001964 <bold>
	}

	if (p == 2) {
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d14c      	bne.n	80022ac <playerInSpaceR+0x14c>
	fgcolor(11);
 8002212:	200b      	movs	r0, #11
 8002214:	f7ff fb42 	bl	800189c <fgcolor>
	bgcolor(7);
 8002218:	2007      	movs	r0, #7
 800221a:	f7ff fb5b 	bl	80018d4 <bgcolor>
	gotoxy(x+2,y);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3302      	adds	r3, #2
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fb8b 	bl	8001940 <gotoxy>
	printf("%c",254	);
 800222a:	20fe      	movs	r0, #254	; 0xfe
 800222c:	f000 fb9a 	bl	8002964 <putchar>
	bgcolor(0);
 8002230:	2000      	movs	r0, #0
 8002232:	f7ff fb4f 	bl	80018d4 <bgcolor>

	gotoxy(x,y+1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3301      	adds	r3, #1
 800223a:	4619      	mov	r1, r3
 800223c:	68b8      	ldr	r0, [r7, #8]
 800223e:	f7ff fb7f 	bl	8001940 <gotoxy>
	printf("%c",223);
 8002242:	20df      	movs	r0, #223	; 0xdf
 8002244:	f000 fb8e 	bl	8002964 <putchar>
	printf("%c",219);
 8002248:	20db      	movs	r0, #219	; 0xdb
 800224a:	f000 fb8b 	bl	8002964 <putchar>
	printf("%c",219);
 800224e:	20db      	movs	r0, #219	; 0xdb
 8002250:	f000 fb88 	bl	8002964 <putchar>

	fgcolor(9);
 8002254:	2009      	movs	r0, #9
 8002256:	f7ff fb21 	bl	800189c <fgcolor>
	gotoxy(x+1,y+2);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3302      	adds	r3, #2
 8002262:	4619      	mov	r1, r3
 8002264:	4610      	mov	r0, r2
 8002266:	f7ff fb6b 	bl	8001940 <gotoxy>
	printf("%c",192);
 800226a:	20c0      	movs	r0, #192	; 0xc0
 800226c:	f000 fb7a 	bl	8002964 <putchar>
	printf("%c",192);
 8002270:	20c0      	movs	r0, #192	; 0xc0
 8002272:	f000 fb77 	bl	8002964 <putchar>

	bold(1);
 8002276:	2001      	movs	r0, #1
 8002278:	f7ff fb74 	bl	8001964 <bold>
	fgcolor(9);
 800227c:	2009      	movs	r0, #9
 800227e:	f7ff fb0d 	bl	800189c <fgcolor>
	bgcolor(7);
 8002282:	2007      	movs	r0, #7
 8002284:	f7ff fb26 	bl	80018d4 <bgcolor>
	gotoxy(x+3,y);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3303      	adds	r3, #3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fb56 	bl	8001940 <gotoxy>
	printf("%c",60);
 8002294:	203c      	movs	r0, #60	; 0x3c
 8002296:	f000 fb65 	bl	8002964 <putchar>
	bgcolor(0);
 800229a:	2000      	movs	r0, #0
 800229c:	f7ff fb1a 	bl	80018d4 <bgcolor>
	fgcolor(2);
 80022a0:	2002      	movs	r0, #2
 80022a2:	f7ff fafb 	bl	800189c <fgcolor>
	bold(0);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7ff fb5c 	bl	8001964 <bold>
	}
	resetbgcolor();
 80022ac:	f7ff fb24 	bl	80018f8 <resetbgcolor>
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <playerInShipL>:

void playerInShipL(int p,int x, int y){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]

	if (p == 1) {
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d140      	bne.n	800234c <playerInShipL+0x94>
	fgcolor(15);
 80022ca:	200f      	movs	r0, #15
 80022cc:	f7ff fae6 	bl	800189c <fgcolor>
	gotoxy(x+1,y);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	3301      	adds	r3, #1
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fb32 	bl	8001940 <gotoxy>
	printf("%c",254	);
 80022dc:	20fe      	movs	r0, #254	; 0xfe
 80022de:	f000 fb41 	bl	8002964 <putchar>

	gotoxy(x+1,y+1);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3301      	adds	r3, #1
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f7ff fb27 	bl	8001940 <gotoxy>
	printf("%c",219);
 80022f2:	20db      	movs	r0, #219	; 0xdb
 80022f4:	f000 fb36 	bl	8002964 <putchar>
	printf("%c",219);
 80022f8:	20db      	movs	r0, #219	; 0xdb
 80022fa:	f000 fb33 	bl	8002964 <putchar>
	printf("%c",223);
 80022fe:	20df      	movs	r0, #223	; 0xdf
 8002300:	f000 fb30 	bl	8002964 <putchar>

	fgcolor(9);
 8002304:	2009      	movs	r0, #9
 8002306:	f7ff fac9 	bl	800189c <fgcolor>
	gotoxy(x+1,y+2);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3302      	adds	r3, #2
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f7ff fb13 	bl	8001940 <gotoxy>
	printf("%c",217);
 800231a:	20d9      	movs	r0, #217	; 0xd9
 800231c:	f000 fb22 	bl	8002964 <putchar>
	printf("%c",217);
 8002320:	20d9      	movs	r0, #217	; 0xd9
 8002322:	f000 fb1f 	bl	8002964 <putchar>

	bold(1);
 8002326:	2001      	movs	r0, #1
 8002328:	f7ff fb1c 	bl	8001964 <bold>
	fgcolor(9);
 800232c:	2009      	movs	r0, #9
 800232e:	f7ff fab5 	bl	800189c <fgcolor>
	gotoxy(x,y);
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	68b8      	ldr	r0, [r7, #8]
 8002336:	f7ff fb03 	bl	8001940 <gotoxy>
	printf("%c",62);
 800233a:	203e      	movs	r0, #62	; 0x3e
 800233c:	f000 fb12 	bl	8002964 <putchar>
	fgcolor(2);
 8002340:	2002      	movs	r0, #2
 8002342:	f7ff faab 	bl	800189c <fgcolor>
	bold(0);
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff fb0c 	bl	8001964 <bold>
	}

	if (p == 2) {
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d13f      	bne.n	80023d2 <playerInShipL+0x11a>
	fgcolor(11);
 8002352:	200b      	movs	r0, #11
 8002354:	f7ff faa2 	bl	800189c <fgcolor>
	gotoxy(x+1,y);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	3301      	adds	r3, #1
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff faee 	bl	8001940 <gotoxy>
	printf("%c",254	);
 8002364:	20fe      	movs	r0, #254	; 0xfe
 8002366:	f000 fafd 	bl	8002964 <putchar>

	gotoxy(x+1,y+1);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3301      	adds	r3, #1
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f7ff fae3 	bl	8001940 <gotoxy>
	printf("%c",219);
 800237a:	20db      	movs	r0, #219	; 0xdb
 800237c:	f000 faf2 	bl	8002964 <putchar>
	printf("%c",219);
 8002380:	20db      	movs	r0, #219	; 0xdb
 8002382:	f000 faef 	bl	8002964 <putchar>
	printf("%c",223);
 8002386:	20df      	movs	r0, #223	; 0xdf
 8002388:	f000 faec 	bl	8002964 <putchar>

	fgcolor(9);
 800238c:	2009      	movs	r0, #9
 800238e:	f7ff fa85 	bl	800189c <fgcolor>
	gotoxy(x+1,y+2);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3302      	adds	r3, #2
 800239a:	4619      	mov	r1, r3
 800239c:	4610      	mov	r0, r2
 800239e:	f7ff facf 	bl	8001940 <gotoxy>
	printf("%c",217);
 80023a2:	20d9      	movs	r0, #217	; 0xd9
 80023a4:	f000 fade 	bl	8002964 <putchar>
	printf("%c",217);
 80023a8:	20d9      	movs	r0, #217	; 0xd9
 80023aa:	f000 fadb 	bl	8002964 <putchar>

	bold(1);
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7ff fad8 	bl	8001964 <bold>
	fgcolor(9);
 80023b4:	2009      	movs	r0, #9
 80023b6:	f7ff fa71 	bl	800189c <fgcolor>
	gotoxy(x,y);
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	68b8      	ldr	r0, [r7, #8]
 80023be:	f7ff fabf 	bl	8001940 <gotoxy>
	printf("%c",62);
 80023c2:	203e      	movs	r0, #62	; 0x3e
 80023c4:	f000 face 	bl	8002964 <putchar>
	resetbgcolor();
 80023c8:	f7ff fa96 	bl	80018f8 <resetbgcolor>
	bold(0);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff fac9 	bl	8001964 <bold>
	}
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e00a      	b.n	8002402 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ec:	f3af 8000 	nop.w
 80023f0:	4601      	mov	r1, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	60ba      	str	r2, [r7, #8]
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	dbf0      	blt.n	80023ec <_read+0x12>
	}

return len;
 800240a:	687b      	ldr	r3, [r7, #4]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	return -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800243c:	605a      	str	r2, [r3, #4]
	return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_isatty>:

int _isatty(int file)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
	return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <_sbrk+0x50>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <_sbrk+0x16>
		heap_end = &end;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <_sbrk+0x50>)
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <_sbrk+0x54>)
 8002490:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <_sbrk+0x50>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <_sbrk+0x50>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	466a      	mov	r2, sp
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d907      	bls.n	80024b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80024a6:	f000 fa13 	bl	80028d0 <__errno>
 80024aa:	4603      	mov	r3, r0
 80024ac:	220c      	movs	r2, #12
 80024ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	e006      	b.n	80024c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <_sbrk+0x50>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	4a03      	ldr	r2, [pc, #12]	; (80024cc <_sbrk+0x50>)
 80024c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200001b0 	.word	0x200001b0
 80024d0:	20000230 	.word	0x20000230

080024d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <SystemInit+0x84>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <SystemInit+0x84>)
 80024e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <SystemInit+0x88>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1b      	ldr	r2, [pc, #108]	; (800255c <SystemInit+0x88>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <SystemInit+0x88>)
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4918      	ldr	r1, [pc, #96]	; (800255c <SystemInit+0x88>)
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <SystemInit+0x8c>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <SystemInit+0x88>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <SystemInit+0x88>)
 8002506:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800250a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <SystemInit+0x88>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a11      	ldr	r2, [pc, #68]	; (800255c <SystemInit+0x88>)
 8002516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <SystemInit+0x88>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <SystemInit+0x88>)
 8002522:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002526:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <SystemInit+0x88>)
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <SystemInit+0x88>)
 800252e:	f023 030f 	bic.w	r3, r3, #15
 8002532:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <SystemInit+0x88>)
 8002536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002538:	4908      	ldr	r1, [pc, #32]	; (800255c <SystemInit+0x88>)
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <SystemInit+0x90>)
 800253c:	4013      	ands	r3, r2
 800253e:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <SystemInit+0x88>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002546:	f000 f80f 	bl	8002568 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800254a:	4b03      	ldr	r3, [pc, #12]	; (8002558 <SystemInit+0x84>)
 800254c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002550:	609a      	str	r2, [r3, #8]
#endif  
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00
 800255c:	40021000 	.word	0x40021000
 8002560:	f87fc00c 	.word	0xf87fc00c
 8002564:	ff00fccc 	.word	0xff00fccc

08002568 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <SetSysClock+0x8c>)
 800256e:	2212      	movs	r2, #18
 8002570:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002572:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <SetSysClock+0x90>)
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <SetSysClock+0x90>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <SetSysClock+0x90>)
 800257c:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <SetSysClock+0x90>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <SetSysClock+0x90>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <SetSysClock+0x90>)
 8002588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <SetSysClock+0x90>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <SetSysClock+0x90>)
 8002594:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002598:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <SetSysClock+0x90>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <SetSysClock+0x90>)
 80025a0:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80025a4:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <SetSysClock+0x90>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <SetSysClock+0x90>)
 80025ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b0:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80025b2:	bf00      	nop
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <SetSysClock+0x90>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f9      	beq.n	80025b4 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <SetSysClock+0x90>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <SetSysClock+0x90>)
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <SetSysClock+0x90>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <SetSysClock+0x90>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80025d8:	bf00      	nop
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <SetSysClock+0x90>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d1f9      	bne.n	80025da <SetSysClock+0x72>
  {
  }
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40022000 	.word	0x40022000
 80025f8:	40021000 	.word	0x40021000

080025fc <NVIC_EnableIRQ>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	2201      	movs	r2, #1
 800260e:	fa02 f103 	lsl.w	r1, r2, r3
 8002612:	4a06      	ldr	r2, [pc, #24]	; (800262c <NVIC_EnableIRQ+0x30>)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000e100 	.word	0xe000e100

08002630 <NVIC_SetPriority>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da0b      	bge.n	800265c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <NVIC_SetPriority+0x4c>)
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	3b04      	subs	r3, #4
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	761a      	strb	r2, [r3, #24]
}
 800265a:	e009      	b.n	8002670 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4907      	ldr	r1, [pc, #28]	; (8002680 <NVIC_SetPriority+0x50>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00
 8002680:	e000e100 	.word	0xe000e100

08002684 <initTimer>:
#include "stm32f30x_conf.h"
#include "timer.h"
#include "joystick.h"
#include "LED.h"

void initTimer(){
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8002688:	4b10      	ldr	r3, [pc, #64]	; (80026cc <initTimer+0x48>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <initTimer+0x48>)
 800268e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002692:	6193      	str	r3, [r2, #24]
	TIM15->CR1 	= 0x0001; // Configure timer 15
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <initTimer+0x4c>)
 8002696:	2201      	movs	r2, #1
 8002698:	801a      	strh	r2, [r3, #0]
	TIM15->ARR 	= 0xF9FF; // Set reload value
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <initTimer+0x4c>)
 800269c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->PSC 	= 0x0009; // Set prescale value
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <initTimer+0x4c>)
 80026a4:	2209      	movs	r2, #9
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER	|= 0x0001;
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <initTimer+0x4c>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <initTimer+0x4c>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	60d3      	str	r3, [r2, #12]
	TIM15->SR	= 0x0000;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <initTimer+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 80026ba:	2100      	movs	r1, #0
 80026bc:	2018      	movs	r0, #24
 80026be:	f7ff ffb7 	bl	8002630 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 80026c2:	2018      	movs	r0, #24
 80026c4:	f7ff ff9a 	bl	80025fc <NVIC_EnableIRQ>
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40014000 	.word	0x40014000

080026d4 <TIM1_BRK_TIM15_IRQHandler>:


void TIM1_BRK_TIM15_IRQHandler(void) {
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0

	lcdUpdate++;
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 80026e0:	6013      	str	r3, [r2, #0]
	if (lcdUpdate >= refreshRate){
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <TIM1_BRK_TIM15_IRQHandler+0xf8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	db18      	blt.n	8002720 <TIM1_BRK_TIM15_IRQHandler+0x4c>

		if (timeState == 0){
 80026ee:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <TIM1_BRK_TIM15_IRQHandler+0xfc>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	b25b      	sxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <TIM1_BRK_TIM15_IRQHandler+0x2c>
			timeState = 1;
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <TIM1_BRK_TIM15_IRQHandler+0xfc>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e007      	b.n	8002710 <TIM1_BRK_TIM15_IRQHandler+0x3c>
		}
		else if (timeState == 1){
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <TIM1_BRK_TIM15_IRQHandler+0xfc>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b25b      	sxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d102      	bne.n	8002710 <TIM1_BRK_TIM15_IRQHandler+0x3c>
			timeState = 0;
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <TIM1_BRK_TIM15_IRQHandler+0xfc>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
		}

		placeLCD--;
 8002710:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3b01      	subs	r3, #1
 8002716:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 8002718:	6013      	str	r3, [r2, #0]
		lcdUpdate = 0;
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
	}


	if (placeLCD == 0){
 8002720:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <TIM1_BRK_TIM15_IRQHandler+0x5a>
		placeLCD = 128;
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	601a      	str	r2, [r3, #0]
	}

	if(t.state){
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 8002730:	791b      	ldrb	r3, [r3, #4]
 8002732:	b25b      	sxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d03b      	beq.n	80027b0 <TIM1_BRK_TIM15_IRQHandler+0xdc>
		if (t.ml <= 0){
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 800273a:	78db      	ldrb	r3, [r3, #3]
 800273c:	b25b      	sxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	dc0b      	bgt.n	800275a <TIM1_BRK_TIM15_IRQHandler+0x86>
			t.ml = 99;
 8002742:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 8002744:	2263      	movs	r2, #99	; 0x63
 8002746:	70da      	strb	r2, [r3, #3]
			t.sk--;
 8002748:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 800274a:	789b      	ldrb	r3, [r3, #2]
 800274c:	b25b      	sxtb	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	b25a      	sxtb	r2, r3
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 8002758:	709a      	strb	r2, [r3, #2]
		}
		if (t.sk < 0){
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 800275c:	789b      	ldrb	r3, [r3, #2]
 800275e:	b25b      	sxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	da0b      	bge.n	800277c <TIM1_BRK_TIM15_IRQHandler+0xa8>
			t.sk = 59;
 8002764:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 8002766:	223b      	movs	r2, #59	; 0x3b
 8002768:	709a      	strb	r2, [r3, #2]
			t.mn--;
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 800276c:	785b      	ldrb	r3, [r3, #1]
 800276e:	b25b      	sxtb	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	b25a      	sxtb	r2, r3
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 800277a:	705a      	strb	r2, [r3, #1]
		}
		t.ml--;
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 800277e:	78db      	ldrb	r3, [r3, #3]
 8002780:	b25b      	sxtb	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	b25a      	sxtb	r2, r3
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 800278c:	70da      	strb	r2, [r3, #3]
		if (t.mn < 0){
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	b25b      	sxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	da0b      	bge.n	80027b0 <TIM1_BRK_TIM15_IRQHandler+0xdc>
			t.state = 0;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 800279a:	2200      	movs	r2, #0
 800279c:	711a      	strb	r2, [r3, #4]
			t.mn = 0;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	705a      	strb	r2, [r3, #1]
			t.sk = 0;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	709a      	strb	r2, [r3, #2]
			t.ml = 0;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	70da      	strb	r2, [r3, #3]
		}

	}


TIM15->SR &= ~0x0001; // Clear interrupt bit
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <TIM1_BRK_TIM15_IRQHandler+0x108>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <TIM1_BRK_TIM15_IRQHandler+0x108>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6113      	str	r3, [r2, #16]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	200001d0 	.word	0x200001d0
 80027cc:	200001dc 	.word	0x200001dc
 80027d0:	20000209 	.word	0x20000209
 80027d4:	200001c0 	.word	0x200001c0
 80027d8:	200001e8 	.word	0x200001e8
 80027dc:	40014000 	.word	0x40014000

080027e0 <resetTime>:

}



void resetTime(){
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
	t.ml = 0;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <resetTime+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	70da      	strb	r2, [r3, #3]
	t.sk = 0;
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <resetTime+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	709a      	strb	r2, [r3, #2]
	t.mn = 2;
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <resetTime+0x4c>)
 80027f2:	2202      	movs	r2, #2
 80027f4:	705a      	strb	r2, [r3, #1]

	t.byThree = (t.sk + (60 * t.mn))/3;
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <resetTime+0x4c>)
 80027f8:	789b      	ldrb	r3, [r3, #2]
 80027fa:	b25b      	sxtb	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <resetTime+0x4c>)
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	b25b      	sxtb	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <resetTime+0x50>)
 8002812:	fb82 1203 	smull	r1, r2, r2, r3
 8002816:	17db      	asrs	r3, r3, #31
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	b25a      	sxtb	r2, r3
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <resetTime+0x4c>)
 800281e:	715a      	strb	r2, [r3, #5]

}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	200001e8 	.word	0x200001e8
 8002830:	55555556 	.word	0x55555556

08002834 <timeControll>:


void timeControll(){
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	readJoystick();
 8002838:	f7fe fe7e 	bl	8001538 <readJoystick>

	if(joy.up){
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <timeControll+0x40>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b25b      	sxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <timeControll+0x1a>
		t.state = 0;
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <timeControll+0x44>)
 8002848:	2200      	movs	r2, #0
 800284a:	711a      	strb	r2, [r3, #4]
	}
	else if (joy.right){
		resetTime();
	}

}
 800284c:	e00f      	b.n	800286e <timeControll+0x3a>
	else if (joy.down){
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <timeControll+0x40>)
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	b25b      	sxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <timeControll+0x2c>
		t.state = 1;
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <timeControll+0x44>)
 800285a:	2201      	movs	r2, #1
 800285c:	711a      	strb	r2, [r3, #4]
}
 800285e:	e006      	b.n	800286e <timeControll+0x3a>
	else if (joy.right){
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <timeControll+0x40>)
 8002862:	78db      	ldrb	r3, [r3, #3]
 8002864:	b25b      	sxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <timeControll+0x3a>
		resetTime();
 800286a:	f7ff ffb9 	bl	80027e0 <resetTime>
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200001e0 	.word	0x200001e0
 8002878:	200001e8 	.word	0x200001e8

0800287c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800287c:	480d      	ldr	r0, [pc, #52]	; (80028b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800287e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002880:	480d      	ldr	r0, [pc, #52]	; (80028b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002882:	490e      	ldr	r1, [pc, #56]	; (80028bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002884:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <LoopForever+0xe>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002888:	e002      	b.n	8002890 <LoopCopyDataInit>

0800288a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800288c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288e:	3304      	adds	r3, #4

08002890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002894:	d3f9      	bcc.n	800288a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002896:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002898:	4c0b      	ldr	r4, [pc, #44]	; (80028c8 <LoopForever+0x16>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800289c:	e001      	b.n	80028a2 <LoopFillZerobss>

0800289e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a0:	3204      	adds	r2, #4

080028a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a4:	d3fb      	bcc.n	800289e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80028a6:	f7ff fe15 	bl	80024d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80028aa:	f000 f817 	bl	80028dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ae:	f7ff f9ab 	bl	8001c08 <main>

080028b2 <LoopForever>:

LoopForever:
    b LoopForever
 80028b2:	e7fe      	b.n	80028b2 <LoopForever>
  ldr   r0, =_estack
 80028b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028bc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80028c0:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 80028c4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80028c8:	2000022c 	.word	0x2000022c

080028cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC1_2_IRQHandler>
	...

080028d0 <__errno>:
 80028d0:	4b01      	ldr	r3, [pc, #4]	; (80028d8 <__errno+0x8>)
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	2000002c 	.word	0x2000002c

080028dc <__libc_init_array>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4d0d      	ldr	r5, [pc, #52]	; (8002914 <__libc_init_array+0x38>)
 80028e0:	4c0d      	ldr	r4, [pc, #52]	; (8002918 <__libc_init_array+0x3c>)
 80028e2:	1b64      	subs	r4, r4, r5
 80028e4:	10a4      	asrs	r4, r4, #2
 80028e6:	2600      	movs	r6, #0
 80028e8:	42a6      	cmp	r6, r4
 80028ea:	d109      	bne.n	8002900 <__libc_init_array+0x24>
 80028ec:	4d0b      	ldr	r5, [pc, #44]	; (800291c <__libc_init_array+0x40>)
 80028ee:	4c0c      	ldr	r4, [pc, #48]	; (8002920 <__libc_init_array+0x44>)
 80028f0:	f001 f898 	bl	8003a24 <_init>
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	2600      	movs	r6, #0
 80028fa:	42a6      	cmp	r6, r4
 80028fc:	d105      	bne.n	800290a <__libc_init_array+0x2e>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	f855 3b04 	ldr.w	r3, [r5], #4
 8002904:	4798      	blx	r3
 8002906:	3601      	adds	r6, #1
 8002908:	e7ee      	b.n	80028e8 <__libc_init_array+0xc>
 800290a:	f855 3b04 	ldr.w	r3, [r5], #4
 800290e:	4798      	blx	r3
 8002910:	3601      	adds	r6, #1
 8002912:	e7f2      	b.n	80028fa <__libc_init_array+0x1e>
 8002914:	08003c88 	.word	0x08003c88
 8002918:	08003c88 	.word	0x08003c88
 800291c:	08003c88 	.word	0x08003c88
 8002920:	08003c8c 	.word	0x08003c8c

08002924 <memset>:
 8002924:	4402      	add	r2, r0
 8002926:	4603      	mov	r3, r0
 8002928:	4293      	cmp	r3, r2
 800292a:	d100      	bne.n	800292e <memset+0xa>
 800292c:	4770      	bx	lr
 800292e:	f803 1b01 	strb.w	r1, [r3], #1
 8002932:	e7f9      	b.n	8002928 <memset+0x4>

08002934 <iprintf>:
 8002934:	b40f      	push	{r0, r1, r2, r3}
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <iprintf+0x2c>)
 8002938:	b513      	push	{r0, r1, r4, lr}
 800293a:	681c      	ldr	r4, [r3, #0]
 800293c:	b124      	cbz	r4, 8002948 <iprintf+0x14>
 800293e:	69a3      	ldr	r3, [r4, #24]
 8002940:	b913      	cbnz	r3, 8002948 <iprintf+0x14>
 8002942:	4620      	mov	r0, r4
 8002944:	f000 fa0c 	bl	8002d60 <__sinit>
 8002948:	ab05      	add	r3, sp, #20
 800294a:	9a04      	ldr	r2, [sp, #16]
 800294c:	68a1      	ldr	r1, [r4, #8]
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	4620      	mov	r0, r4
 8002952:	f000 fbe5 	bl	8003120 <_vfiprintf_r>
 8002956:	b002      	add	sp, #8
 8002958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800295c:	b004      	add	sp, #16
 800295e:	4770      	bx	lr
 8002960:	2000002c 	.word	0x2000002c

08002964 <putchar>:
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <putchar+0x28>)
 8002966:	b513      	push	{r0, r1, r4, lr}
 8002968:	681c      	ldr	r4, [r3, #0]
 800296a:	4601      	mov	r1, r0
 800296c:	b134      	cbz	r4, 800297c <putchar+0x18>
 800296e:	69a3      	ldr	r3, [r4, #24]
 8002970:	b923      	cbnz	r3, 800297c <putchar+0x18>
 8002972:	9001      	str	r0, [sp, #4]
 8002974:	4620      	mov	r0, r4
 8002976:	f000 f9f3 	bl	8002d60 <__sinit>
 800297a:	9901      	ldr	r1, [sp, #4]
 800297c:	68a2      	ldr	r2, [r4, #8]
 800297e:	4620      	mov	r0, r4
 8002980:	b002      	add	sp, #8
 8002982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002986:	f000 be8f 	b.w	80036a8 <_putc_r>
 800298a:	bf00      	nop
 800298c:	2000002c 	.word	0x2000002c

08002990 <setbuf>:
 8002990:	2900      	cmp	r1, #0
 8002992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002996:	bf0c      	ite	eq
 8002998:	2202      	moveq	r2, #2
 800299a:	2200      	movne	r2, #0
 800299c:	f000 b800 	b.w	80029a0 <setvbuf>

080029a0 <setvbuf>:
 80029a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80029a4:	461d      	mov	r5, r3
 80029a6:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <setvbuf+0x17c>)
 80029a8:	681f      	ldr	r7, [r3, #0]
 80029aa:	4604      	mov	r4, r0
 80029ac:	460e      	mov	r6, r1
 80029ae:	4690      	mov	r8, r2
 80029b0:	b127      	cbz	r7, 80029bc <setvbuf+0x1c>
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	b913      	cbnz	r3, 80029bc <setvbuf+0x1c>
 80029b6:	4638      	mov	r0, r7
 80029b8:	f000 f9d2 	bl	8002d60 <__sinit>
 80029bc:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <setvbuf+0x180>)
 80029be:	429c      	cmp	r4, r3
 80029c0:	d167      	bne.n	8002a92 <setvbuf+0xf2>
 80029c2:	687c      	ldr	r4, [r7, #4]
 80029c4:	f1b8 0f02 	cmp.w	r8, #2
 80029c8:	d006      	beq.n	80029d8 <setvbuf+0x38>
 80029ca:	f1b8 0f01 	cmp.w	r8, #1
 80029ce:	f200 809f 	bhi.w	8002b10 <setvbuf+0x170>
 80029d2:	2d00      	cmp	r5, #0
 80029d4:	f2c0 809c 	blt.w	8002b10 <setvbuf+0x170>
 80029d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029da:	07db      	lsls	r3, r3, #31
 80029dc:	d405      	bmi.n	80029ea <setvbuf+0x4a>
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	0598      	lsls	r0, r3, #22
 80029e2:	d402      	bmi.n	80029ea <setvbuf+0x4a>
 80029e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029e6:	f000 fa59 	bl	8002e9c <__retarget_lock_acquire_recursive>
 80029ea:	4621      	mov	r1, r4
 80029ec:	4638      	mov	r0, r7
 80029ee:	f000 f923 	bl	8002c38 <_fflush_r>
 80029f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029f4:	b141      	cbz	r1, 8002a08 <setvbuf+0x68>
 80029f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029fa:	4299      	cmp	r1, r3
 80029fc:	d002      	beq.n	8002a04 <setvbuf+0x64>
 80029fe:	4638      	mov	r0, r7
 8002a00:	f000 faba 	bl	8002f78 <_free_r>
 8002a04:	2300      	movs	r3, #0
 8002a06:	6363      	str	r3, [r4, #52]	; 0x34
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61a3      	str	r3, [r4, #24]
 8002a0c:	6063      	str	r3, [r4, #4]
 8002a0e:	89a3      	ldrh	r3, [r4, #12]
 8002a10:	0619      	lsls	r1, r3, #24
 8002a12:	d503      	bpl.n	8002a1c <setvbuf+0x7c>
 8002a14:	6921      	ldr	r1, [r4, #16]
 8002a16:	4638      	mov	r0, r7
 8002a18:	f000 faae 	bl	8002f78 <_free_r>
 8002a1c:	89a3      	ldrh	r3, [r4, #12]
 8002a1e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002a22:	f023 0303 	bic.w	r3, r3, #3
 8002a26:	f1b8 0f02 	cmp.w	r8, #2
 8002a2a:	81a3      	strh	r3, [r4, #12]
 8002a2c:	d06c      	beq.n	8002b08 <setvbuf+0x168>
 8002a2e:	ab01      	add	r3, sp, #4
 8002a30:	466a      	mov	r2, sp
 8002a32:	4621      	mov	r1, r4
 8002a34:	4638      	mov	r0, r7
 8002a36:	f000 fa33 	bl	8002ea0 <__swhatbuf_r>
 8002a3a:	89a3      	ldrh	r3, [r4, #12]
 8002a3c:	4318      	orrs	r0, r3
 8002a3e:	81a0      	strh	r0, [r4, #12]
 8002a40:	2d00      	cmp	r5, #0
 8002a42:	d130      	bne.n	8002aa6 <setvbuf+0x106>
 8002a44:	9d00      	ldr	r5, [sp, #0]
 8002a46:	4628      	mov	r0, r5
 8002a48:	f000 fa8e 	bl	8002f68 <malloc>
 8002a4c:	4606      	mov	r6, r0
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d155      	bne.n	8002afe <setvbuf+0x15e>
 8002a52:	f8dd 9000 	ldr.w	r9, [sp]
 8002a56:	45a9      	cmp	r9, r5
 8002a58:	d14a      	bne.n	8002af0 <setvbuf+0x150>
 8002a5a:	f04f 35ff 	mov.w	r5, #4294967295
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60a2      	str	r2, [r4, #8]
 8002a62:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002a66:	6022      	str	r2, [r4, #0]
 8002a68:	6122      	str	r2, [r4, #16]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a70:	6162      	str	r2, [r4, #20]
 8002a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	07d2      	lsls	r2, r2, #31
 8002a7a:	81a3      	strh	r3, [r4, #12]
 8002a7c:	d405      	bmi.n	8002a8a <setvbuf+0xea>
 8002a7e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002a82:	d102      	bne.n	8002a8a <setvbuf+0xea>
 8002a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a86:	f000 fa0a 	bl	8002e9e <__retarget_lock_release_recursive>
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	b003      	add	sp, #12
 8002a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <setvbuf+0x184>)
 8002a94:	429c      	cmp	r4, r3
 8002a96:	d101      	bne.n	8002a9c <setvbuf+0xfc>
 8002a98:	68bc      	ldr	r4, [r7, #8]
 8002a9a:	e793      	b.n	80029c4 <setvbuf+0x24>
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <setvbuf+0x188>)
 8002a9e:	429c      	cmp	r4, r3
 8002aa0:	bf08      	it	eq
 8002aa2:	68fc      	ldreq	r4, [r7, #12]
 8002aa4:	e78e      	b.n	80029c4 <setvbuf+0x24>
 8002aa6:	2e00      	cmp	r6, #0
 8002aa8:	d0cd      	beq.n	8002a46 <setvbuf+0xa6>
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	b913      	cbnz	r3, 8002ab4 <setvbuf+0x114>
 8002aae:	4638      	mov	r0, r7
 8002ab0:	f000 f956 	bl	8002d60 <__sinit>
 8002ab4:	f1b8 0f01 	cmp.w	r8, #1
 8002ab8:	bf08      	it	eq
 8002aba:	89a3      	ldrheq	r3, [r4, #12]
 8002abc:	6026      	str	r6, [r4, #0]
 8002abe:	bf04      	itt	eq
 8002ac0:	f043 0301 	orreq.w	r3, r3, #1
 8002ac4:	81a3      	strheq	r3, [r4, #12]
 8002ac6:	89a2      	ldrh	r2, [r4, #12]
 8002ac8:	f012 0308 	ands.w	r3, r2, #8
 8002acc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002ad0:	d01c      	beq.n	8002b0c <setvbuf+0x16c>
 8002ad2:	07d3      	lsls	r3, r2, #31
 8002ad4:	bf41      	itttt	mi
 8002ad6:	2300      	movmi	r3, #0
 8002ad8:	426d      	negmi	r5, r5
 8002ada:	60a3      	strmi	r3, [r4, #8]
 8002adc:	61a5      	strmi	r5, [r4, #24]
 8002ade:	bf58      	it	pl
 8002ae0:	60a5      	strpl	r5, [r4, #8]
 8002ae2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002ae4:	f015 0501 	ands.w	r5, r5, #1
 8002ae8:	d115      	bne.n	8002b16 <setvbuf+0x176>
 8002aea:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002aee:	e7c8      	b.n	8002a82 <setvbuf+0xe2>
 8002af0:	4648      	mov	r0, r9
 8002af2:	f000 fa39 	bl	8002f68 <malloc>
 8002af6:	4606      	mov	r6, r0
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d0ae      	beq.n	8002a5a <setvbuf+0xba>
 8002afc:	464d      	mov	r5, r9
 8002afe:	89a3      	ldrh	r3, [r4, #12]
 8002b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b04:	81a3      	strh	r3, [r4, #12]
 8002b06:	e7d0      	b.n	8002aaa <setvbuf+0x10a>
 8002b08:	2500      	movs	r5, #0
 8002b0a:	e7a8      	b.n	8002a5e <setvbuf+0xbe>
 8002b0c:	60a3      	str	r3, [r4, #8]
 8002b0e:	e7e8      	b.n	8002ae2 <setvbuf+0x142>
 8002b10:	f04f 35ff 	mov.w	r5, #4294967295
 8002b14:	e7b9      	b.n	8002a8a <setvbuf+0xea>
 8002b16:	2500      	movs	r5, #0
 8002b18:	e7b7      	b.n	8002a8a <setvbuf+0xea>
 8002b1a:	bf00      	nop
 8002b1c:	2000002c 	.word	0x2000002c
 8002b20:	08003c14 	.word	0x08003c14
 8002b24:	08003c34 	.word	0x08003c34
 8002b28:	08003bf4 	.word	0x08003bf4

08002b2c <__sflush_r>:
 8002b2c:	898a      	ldrh	r2, [r1, #12]
 8002b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b32:	4605      	mov	r5, r0
 8002b34:	0710      	lsls	r0, r2, #28
 8002b36:	460c      	mov	r4, r1
 8002b38:	d458      	bmi.n	8002bec <__sflush_r+0xc0>
 8002b3a:	684b      	ldr	r3, [r1, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	dc05      	bgt.n	8002b4c <__sflush_r+0x20>
 8002b40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	dc02      	bgt.n	8002b4c <__sflush_r+0x20>
 8002b46:	2000      	movs	r0, #0
 8002b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b4e:	2e00      	cmp	r6, #0
 8002b50:	d0f9      	beq.n	8002b46 <__sflush_r+0x1a>
 8002b52:	2300      	movs	r3, #0
 8002b54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b58:	682f      	ldr	r7, [r5, #0]
 8002b5a:	602b      	str	r3, [r5, #0]
 8002b5c:	d032      	beq.n	8002bc4 <__sflush_r+0x98>
 8002b5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b60:	89a3      	ldrh	r3, [r4, #12]
 8002b62:	075a      	lsls	r2, r3, #29
 8002b64:	d505      	bpl.n	8002b72 <__sflush_r+0x46>
 8002b66:	6863      	ldr	r3, [r4, #4]
 8002b68:	1ac0      	subs	r0, r0, r3
 8002b6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b6c:	b10b      	cbz	r3, 8002b72 <__sflush_r+0x46>
 8002b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b70:	1ac0      	subs	r0, r0, r3
 8002b72:	2300      	movs	r3, #0
 8002b74:	4602      	mov	r2, r0
 8002b76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b78:	6a21      	ldr	r1, [r4, #32]
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	47b0      	blx	r6
 8002b7e:	1c43      	adds	r3, r0, #1
 8002b80:	89a3      	ldrh	r3, [r4, #12]
 8002b82:	d106      	bne.n	8002b92 <__sflush_r+0x66>
 8002b84:	6829      	ldr	r1, [r5, #0]
 8002b86:	291d      	cmp	r1, #29
 8002b88:	d82c      	bhi.n	8002be4 <__sflush_r+0xb8>
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <__sflush_r+0x108>)
 8002b8c:	40ca      	lsrs	r2, r1
 8002b8e:	07d6      	lsls	r6, r2, #31
 8002b90:	d528      	bpl.n	8002be4 <__sflush_r+0xb8>
 8002b92:	2200      	movs	r2, #0
 8002b94:	6062      	str	r2, [r4, #4]
 8002b96:	04d9      	lsls	r1, r3, #19
 8002b98:	6922      	ldr	r2, [r4, #16]
 8002b9a:	6022      	str	r2, [r4, #0]
 8002b9c:	d504      	bpl.n	8002ba8 <__sflush_r+0x7c>
 8002b9e:	1c42      	adds	r2, r0, #1
 8002ba0:	d101      	bne.n	8002ba6 <__sflush_r+0x7a>
 8002ba2:	682b      	ldr	r3, [r5, #0]
 8002ba4:	b903      	cbnz	r3, 8002ba8 <__sflush_r+0x7c>
 8002ba6:	6560      	str	r0, [r4, #84]	; 0x54
 8002ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002baa:	602f      	str	r7, [r5, #0]
 8002bac:	2900      	cmp	r1, #0
 8002bae:	d0ca      	beq.n	8002b46 <__sflush_r+0x1a>
 8002bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bb4:	4299      	cmp	r1, r3
 8002bb6:	d002      	beq.n	8002bbe <__sflush_r+0x92>
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f000 f9dd 	bl	8002f78 <_free_r>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	6360      	str	r0, [r4, #52]	; 0x34
 8002bc2:	e7c1      	b.n	8002b48 <__sflush_r+0x1c>
 8002bc4:	6a21      	ldr	r1, [r4, #32]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4628      	mov	r0, r5
 8002bca:	47b0      	blx	r6
 8002bcc:	1c41      	adds	r1, r0, #1
 8002bce:	d1c7      	bne.n	8002b60 <__sflush_r+0x34>
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0c4      	beq.n	8002b60 <__sflush_r+0x34>
 8002bd6:	2b1d      	cmp	r3, #29
 8002bd8:	d001      	beq.n	8002bde <__sflush_r+0xb2>
 8002bda:	2b16      	cmp	r3, #22
 8002bdc:	d101      	bne.n	8002be2 <__sflush_r+0xb6>
 8002bde:	602f      	str	r7, [r5, #0]
 8002be0:	e7b1      	b.n	8002b46 <__sflush_r+0x1a>
 8002be2:	89a3      	ldrh	r3, [r4, #12]
 8002be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be8:	81a3      	strh	r3, [r4, #12]
 8002bea:	e7ad      	b.n	8002b48 <__sflush_r+0x1c>
 8002bec:	690f      	ldr	r7, [r1, #16]
 8002bee:	2f00      	cmp	r7, #0
 8002bf0:	d0a9      	beq.n	8002b46 <__sflush_r+0x1a>
 8002bf2:	0793      	lsls	r3, r2, #30
 8002bf4:	680e      	ldr	r6, [r1, #0]
 8002bf6:	bf08      	it	eq
 8002bf8:	694b      	ldreq	r3, [r1, #20]
 8002bfa:	600f      	str	r7, [r1, #0]
 8002bfc:	bf18      	it	ne
 8002bfe:	2300      	movne	r3, #0
 8002c00:	eba6 0807 	sub.w	r8, r6, r7
 8002c04:	608b      	str	r3, [r1, #8]
 8002c06:	f1b8 0f00 	cmp.w	r8, #0
 8002c0a:	dd9c      	ble.n	8002b46 <__sflush_r+0x1a>
 8002c0c:	6a21      	ldr	r1, [r4, #32]
 8002c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c10:	4643      	mov	r3, r8
 8002c12:	463a      	mov	r2, r7
 8002c14:	4628      	mov	r0, r5
 8002c16:	47b0      	blx	r6
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	dc06      	bgt.n	8002c2a <__sflush_r+0xfe>
 8002c1c:	89a3      	ldrh	r3, [r4, #12]
 8002c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c22:	81a3      	strh	r3, [r4, #12]
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	e78e      	b.n	8002b48 <__sflush_r+0x1c>
 8002c2a:	4407      	add	r7, r0
 8002c2c:	eba8 0800 	sub.w	r8, r8, r0
 8002c30:	e7e9      	b.n	8002c06 <__sflush_r+0xda>
 8002c32:	bf00      	nop
 8002c34:	20400001 	.word	0x20400001

08002c38 <_fflush_r>:
 8002c38:	b538      	push	{r3, r4, r5, lr}
 8002c3a:	690b      	ldr	r3, [r1, #16]
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	b913      	cbnz	r3, 8002c48 <_fflush_r+0x10>
 8002c42:	2500      	movs	r5, #0
 8002c44:	4628      	mov	r0, r5
 8002c46:	bd38      	pop	{r3, r4, r5, pc}
 8002c48:	b118      	cbz	r0, 8002c52 <_fflush_r+0x1a>
 8002c4a:	6983      	ldr	r3, [r0, #24]
 8002c4c:	b90b      	cbnz	r3, 8002c52 <_fflush_r+0x1a>
 8002c4e:	f000 f887 	bl	8002d60 <__sinit>
 8002c52:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <_fflush_r+0x6c>)
 8002c54:	429c      	cmp	r4, r3
 8002c56:	d11b      	bne.n	8002c90 <_fflush_r+0x58>
 8002c58:	686c      	ldr	r4, [r5, #4]
 8002c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0ef      	beq.n	8002c42 <_fflush_r+0xa>
 8002c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c64:	07d0      	lsls	r0, r2, #31
 8002c66:	d404      	bmi.n	8002c72 <_fflush_r+0x3a>
 8002c68:	0599      	lsls	r1, r3, #22
 8002c6a:	d402      	bmi.n	8002c72 <_fflush_r+0x3a>
 8002c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c6e:	f000 f915 	bl	8002e9c <__retarget_lock_acquire_recursive>
 8002c72:	4628      	mov	r0, r5
 8002c74:	4621      	mov	r1, r4
 8002c76:	f7ff ff59 	bl	8002b2c <__sflush_r>
 8002c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c7c:	07da      	lsls	r2, r3, #31
 8002c7e:	4605      	mov	r5, r0
 8002c80:	d4e0      	bmi.n	8002c44 <_fflush_r+0xc>
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	059b      	lsls	r3, r3, #22
 8002c86:	d4dd      	bmi.n	8002c44 <_fflush_r+0xc>
 8002c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c8a:	f000 f908 	bl	8002e9e <__retarget_lock_release_recursive>
 8002c8e:	e7d9      	b.n	8002c44 <_fflush_r+0xc>
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <_fflush_r+0x70>)
 8002c92:	429c      	cmp	r4, r3
 8002c94:	d101      	bne.n	8002c9a <_fflush_r+0x62>
 8002c96:	68ac      	ldr	r4, [r5, #8]
 8002c98:	e7df      	b.n	8002c5a <_fflush_r+0x22>
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <_fflush_r+0x74>)
 8002c9c:	429c      	cmp	r4, r3
 8002c9e:	bf08      	it	eq
 8002ca0:	68ec      	ldreq	r4, [r5, #12]
 8002ca2:	e7da      	b.n	8002c5a <_fflush_r+0x22>
 8002ca4:	08003c14 	.word	0x08003c14
 8002ca8:	08003c34 	.word	0x08003c34
 8002cac:	08003bf4 	.word	0x08003bf4

08002cb0 <std>:
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8002cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cbe:	6083      	str	r3, [r0, #8]
 8002cc0:	8181      	strh	r1, [r0, #12]
 8002cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8002cc4:	81c2      	strh	r2, [r0, #14]
 8002cc6:	6183      	str	r3, [r0, #24]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	2208      	movs	r2, #8
 8002ccc:	305c      	adds	r0, #92	; 0x5c
 8002cce:	f7ff fe29 	bl	8002924 <memset>
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <std+0x38>)
 8002cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <std+0x3c>)
 8002cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <std+0x40>)
 8002cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <std+0x44>)
 8002ce0:	6224      	str	r4, [r4, #32]
 8002ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8002ce4:	bd10      	pop	{r4, pc}
 8002ce6:	bf00      	nop
 8002ce8:	08003759 	.word	0x08003759
 8002cec:	0800377b 	.word	0x0800377b
 8002cf0:	080037b3 	.word	0x080037b3
 8002cf4:	080037d7 	.word	0x080037d7

08002cf8 <_cleanup_r>:
 8002cf8:	4901      	ldr	r1, [pc, #4]	; (8002d00 <_cleanup_r+0x8>)
 8002cfa:	f000 b8af 	b.w	8002e5c <_fwalk_reent>
 8002cfe:	bf00      	nop
 8002d00:	08002c39 	.word	0x08002c39

08002d04 <__sfmoreglue>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	1e4a      	subs	r2, r1, #1
 8002d08:	2568      	movs	r5, #104	; 0x68
 8002d0a:	4355      	muls	r5, r2
 8002d0c:	460e      	mov	r6, r1
 8002d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d12:	f000 f981 	bl	8003018 <_malloc_r>
 8002d16:	4604      	mov	r4, r0
 8002d18:	b140      	cbz	r0, 8002d2c <__sfmoreglue+0x28>
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8002d20:	300c      	adds	r0, #12
 8002d22:	60a0      	str	r0, [r4, #8]
 8002d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d28:	f7ff fdfc 	bl	8002924 <memset>
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}

08002d30 <__sfp_lock_acquire>:
 8002d30:	4801      	ldr	r0, [pc, #4]	; (8002d38 <__sfp_lock_acquire+0x8>)
 8002d32:	f000 b8b3 	b.w	8002e9c <__retarget_lock_acquire_recursive>
 8002d36:	bf00      	nop
 8002d38:	20000224 	.word	0x20000224

08002d3c <__sfp_lock_release>:
 8002d3c:	4801      	ldr	r0, [pc, #4]	; (8002d44 <__sfp_lock_release+0x8>)
 8002d3e:	f000 b8ae 	b.w	8002e9e <__retarget_lock_release_recursive>
 8002d42:	bf00      	nop
 8002d44:	20000224 	.word	0x20000224

08002d48 <__sinit_lock_acquire>:
 8002d48:	4801      	ldr	r0, [pc, #4]	; (8002d50 <__sinit_lock_acquire+0x8>)
 8002d4a:	f000 b8a7 	b.w	8002e9c <__retarget_lock_acquire_recursive>
 8002d4e:	bf00      	nop
 8002d50:	2000021f 	.word	0x2000021f

08002d54 <__sinit_lock_release>:
 8002d54:	4801      	ldr	r0, [pc, #4]	; (8002d5c <__sinit_lock_release+0x8>)
 8002d56:	f000 b8a2 	b.w	8002e9e <__retarget_lock_release_recursive>
 8002d5a:	bf00      	nop
 8002d5c:	2000021f 	.word	0x2000021f

08002d60 <__sinit>:
 8002d60:	b510      	push	{r4, lr}
 8002d62:	4604      	mov	r4, r0
 8002d64:	f7ff fff0 	bl	8002d48 <__sinit_lock_acquire>
 8002d68:	69a3      	ldr	r3, [r4, #24]
 8002d6a:	b11b      	cbz	r3, 8002d74 <__sinit+0x14>
 8002d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d70:	f7ff bff0 	b.w	8002d54 <__sinit_lock_release>
 8002d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002d78:	6523      	str	r3, [r4, #80]	; 0x50
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <__sinit+0x68>)
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <__sinit+0x6c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8002d82:	42a3      	cmp	r3, r4
 8002d84:	bf04      	itt	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	61a3      	streq	r3, [r4, #24]
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f000 f820 	bl	8002dd0 <__sfp>
 8002d90:	6060      	str	r0, [r4, #4]
 8002d92:	4620      	mov	r0, r4
 8002d94:	f000 f81c 	bl	8002dd0 <__sfp>
 8002d98:	60a0      	str	r0, [r4, #8]
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f000 f818 	bl	8002dd0 <__sfp>
 8002da0:	2200      	movs	r2, #0
 8002da2:	60e0      	str	r0, [r4, #12]
 8002da4:	2104      	movs	r1, #4
 8002da6:	6860      	ldr	r0, [r4, #4]
 8002da8:	f7ff ff82 	bl	8002cb0 <std>
 8002dac:	68a0      	ldr	r0, [r4, #8]
 8002dae:	2201      	movs	r2, #1
 8002db0:	2109      	movs	r1, #9
 8002db2:	f7ff ff7d 	bl	8002cb0 <std>
 8002db6:	68e0      	ldr	r0, [r4, #12]
 8002db8:	2202      	movs	r2, #2
 8002dba:	2112      	movs	r1, #18
 8002dbc:	f7ff ff78 	bl	8002cb0 <std>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	61a3      	str	r3, [r4, #24]
 8002dc4:	e7d2      	b.n	8002d6c <__sinit+0xc>
 8002dc6:	bf00      	nop
 8002dc8:	08003bf0 	.word	0x08003bf0
 8002dcc:	08002cf9 	.word	0x08002cf9

08002dd0 <__sfp>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	4607      	mov	r7, r0
 8002dd4:	f7ff ffac 	bl	8002d30 <__sfp_lock_acquire>
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <__sfp+0x84>)
 8002dda:	681e      	ldr	r6, [r3, #0]
 8002ddc:	69b3      	ldr	r3, [r6, #24]
 8002dde:	b913      	cbnz	r3, 8002de6 <__sfp+0x16>
 8002de0:	4630      	mov	r0, r6
 8002de2:	f7ff ffbd 	bl	8002d60 <__sinit>
 8002de6:	3648      	adds	r6, #72	; 0x48
 8002de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	d503      	bpl.n	8002df8 <__sfp+0x28>
 8002df0:	6833      	ldr	r3, [r6, #0]
 8002df2:	b30b      	cbz	r3, 8002e38 <__sfp+0x68>
 8002df4:	6836      	ldr	r6, [r6, #0]
 8002df6:	e7f7      	b.n	8002de8 <__sfp+0x18>
 8002df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002dfc:	b9d5      	cbnz	r5, 8002e34 <__sfp+0x64>
 8002dfe:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <__sfp+0x88>)
 8002e00:	60e3      	str	r3, [r4, #12]
 8002e02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e06:	6665      	str	r5, [r4, #100]	; 0x64
 8002e08:	f000 f847 	bl	8002e9a <__retarget_lock_init_recursive>
 8002e0c:	f7ff ff96 	bl	8002d3c <__sfp_lock_release>
 8002e10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002e14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002e18:	6025      	str	r5, [r4, #0]
 8002e1a:	61a5      	str	r5, [r4, #24]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4629      	mov	r1, r5
 8002e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e24:	f7ff fd7e 	bl	8002924 <memset>
 8002e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e30:	4620      	mov	r0, r4
 8002e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e34:	3468      	adds	r4, #104	; 0x68
 8002e36:	e7d9      	b.n	8002dec <__sfp+0x1c>
 8002e38:	2104      	movs	r1, #4
 8002e3a:	4638      	mov	r0, r7
 8002e3c:	f7ff ff62 	bl	8002d04 <__sfmoreglue>
 8002e40:	4604      	mov	r4, r0
 8002e42:	6030      	str	r0, [r6, #0]
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d1d5      	bne.n	8002df4 <__sfp+0x24>
 8002e48:	f7ff ff78 	bl	8002d3c <__sfp_lock_release>
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	e7ee      	b.n	8002e30 <__sfp+0x60>
 8002e52:	bf00      	nop
 8002e54:	08003bf0 	.word	0x08003bf0
 8002e58:	ffff0001 	.word	0xffff0001

08002e5c <_fwalk_reent>:
 8002e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e60:	4606      	mov	r6, r0
 8002e62:	4688      	mov	r8, r1
 8002e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e68:	2700      	movs	r7, #0
 8002e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8002e72:	d505      	bpl.n	8002e80 <_fwalk_reent+0x24>
 8002e74:	6824      	ldr	r4, [r4, #0]
 8002e76:	2c00      	cmp	r4, #0
 8002e78:	d1f7      	bne.n	8002e6a <_fwalk_reent+0xe>
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e80:	89ab      	ldrh	r3, [r5, #12]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d907      	bls.n	8002e96 <_fwalk_reent+0x3a>
 8002e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	d003      	beq.n	8002e96 <_fwalk_reent+0x3a>
 8002e8e:	4629      	mov	r1, r5
 8002e90:	4630      	mov	r0, r6
 8002e92:	47c0      	blx	r8
 8002e94:	4307      	orrs	r7, r0
 8002e96:	3568      	adds	r5, #104	; 0x68
 8002e98:	e7e9      	b.n	8002e6e <_fwalk_reent+0x12>

08002e9a <__retarget_lock_init_recursive>:
 8002e9a:	4770      	bx	lr

08002e9c <__retarget_lock_acquire_recursive>:
 8002e9c:	4770      	bx	lr

08002e9e <__retarget_lock_release_recursive>:
 8002e9e:	4770      	bx	lr

08002ea0 <__swhatbuf_r>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	460e      	mov	r6, r1
 8002ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea8:	2900      	cmp	r1, #0
 8002eaa:	b096      	sub	sp, #88	; 0x58
 8002eac:	4614      	mov	r4, r2
 8002eae:	461d      	mov	r5, r3
 8002eb0:	da07      	bge.n	8002ec2 <__swhatbuf_r+0x22>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	602b      	str	r3, [r5, #0]
 8002eb6:	89b3      	ldrh	r3, [r6, #12]
 8002eb8:	061a      	lsls	r2, r3, #24
 8002eba:	d410      	bmi.n	8002ede <__swhatbuf_r+0x3e>
 8002ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec0:	e00e      	b.n	8002ee0 <__swhatbuf_r+0x40>
 8002ec2:	466a      	mov	r2, sp
 8002ec4:	f000 fd5c 	bl	8003980 <_fstat_r>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	dbf2      	blt.n	8002eb2 <__swhatbuf_r+0x12>
 8002ecc:	9a01      	ldr	r2, [sp, #4]
 8002ece:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ed2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ed6:	425a      	negs	r2, r3
 8002ed8:	415a      	adcs	r2, r3
 8002eda:	602a      	str	r2, [r5, #0]
 8002edc:	e7ee      	b.n	8002ebc <__swhatbuf_r+0x1c>
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	6023      	str	r3, [r4, #0]
 8002ee4:	b016      	add	sp, #88	; 0x58
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}

08002ee8 <__smakebuf_r>:
 8002ee8:	898b      	ldrh	r3, [r1, #12]
 8002eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002eec:	079d      	lsls	r5, r3, #30
 8002eee:	4606      	mov	r6, r0
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	d507      	bpl.n	8002f04 <__smakebuf_r+0x1c>
 8002ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	6123      	str	r3, [r4, #16]
 8002efc:	2301      	movs	r3, #1
 8002efe:	6163      	str	r3, [r4, #20]
 8002f00:	b002      	add	sp, #8
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	ab01      	add	r3, sp, #4
 8002f06:	466a      	mov	r2, sp
 8002f08:	f7ff ffca 	bl	8002ea0 <__swhatbuf_r>
 8002f0c:	9900      	ldr	r1, [sp, #0]
 8002f0e:	4605      	mov	r5, r0
 8002f10:	4630      	mov	r0, r6
 8002f12:	f000 f881 	bl	8003018 <_malloc_r>
 8002f16:	b948      	cbnz	r0, 8002f2c <__smakebuf_r+0x44>
 8002f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f1c:	059a      	lsls	r2, r3, #22
 8002f1e:	d4ef      	bmi.n	8002f00 <__smakebuf_r+0x18>
 8002f20:	f023 0303 	bic.w	r3, r3, #3
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	e7e3      	b.n	8002ef4 <__smakebuf_r+0xc>
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <__smakebuf_r+0x7c>)
 8002f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	6020      	str	r0, [r4, #0]
 8002f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f38:	81a3      	strh	r3, [r4, #12]
 8002f3a:	9b00      	ldr	r3, [sp, #0]
 8002f3c:	6163      	str	r3, [r4, #20]
 8002f3e:	9b01      	ldr	r3, [sp, #4]
 8002f40:	6120      	str	r0, [r4, #16]
 8002f42:	b15b      	cbz	r3, 8002f5c <__smakebuf_r+0x74>
 8002f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f48:	4630      	mov	r0, r6
 8002f4a:	f000 fd2b 	bl	80039a4 <_isatty_r>
 8002f4e:	b128      	cbz	r0, 8002f5c <__smakebuf_r+0x74>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	f023 0303 	bic.w	r3, r3, #3
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	81a3      	strh	r3, [r4, #12]
 8002f5c:	89a0      	ldrh	r0, [r4, #12]
 8002f5e:	4305      	orrs	r5, r0
 8002f60:	81a5      	strh	r5, [r4, #12]
 8002f62:	e7cd      	b.n	8002f00 <__smakebuf_r+0x18>
 8002f64:	08002cf9 	.word	0x08002cf9

08002f68 <malloc>:
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <malloc+0xc>)
 8002f6a:	4601      	mov	r1, r0
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	f000 b853 	b.w	8003018 <_malloc_r>
 8002f72:	bf00      	nop
 8002f74:	2000002c 	.word	0x2000002c

08002f78 <_free_r>:
 8002f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d048      	beq.n	8003010 <_free_r+0x98>
 8002f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f82:	9001      	str	r0, [sp, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f1a1 0404 	sub.w	r4, r1, #4
 8002f8a:	bfb8      	it	lt
 8002f8c:	18e4      	addlt	r4, r4, r3
 8002f8e:	f000 fd2b 	bl	80039e8 <__malloc_lock>
 8002f92:	4a20      	ldr	r2, [pc, #128]	; (8003014 <_free_r+0x9c>)
 8002f94:	9801      	ldr	r0, [sp, #4]
 8002f96:	6813      	ldr	r3, [r2, #0]
 8002f98:	4615      	mov	r5, r2
 8002f9a:	b933      	cbnz	r3, 8002faa <_free_r+0x32>
 8002f9c:	6063      	str	r3, [r4, #4]
 8002f9e:	6014      	str	r4, [r2, #0]
 8002fa0:	b003      	add	sp, #12
 8002fa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fa6:	f000 bd25 	b.w	80039f4 <__malloc_unlock>
 8002faa:	42a3      	cmp	r3, r4
 8002fac:	d90b      	bls.n	8002fc6 <_free_r+0x4e>
 8002fae:	6821      	ldr	r1, [r4, #0]
 8002fb0:	1862      	adds	r2, r4, r1
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	bf04      	itt	eq
 8002fb6:	681a      	ldreq	r2, [r3, #0]
 8002fb8:	685b      	ldreq	r3, [r3, #4]
 8002fba:	6063      	str	r3, [r4, #4]
 8002fbc:	bf04      	itt	eq
 8002fbe:	1852      	addeq	r2, r2, r1
 8002fc0:	6022      	streq	r2, [r4, #0]
 8002fc2:	602c      	str	r4, [r5, #0]
 8002fc4:	e7ec      	b.n	8002fa0 <_free_r+0x28>
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	b10b      	cbz	r3, 8002fd0 <_free_r+0x58>
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	d9fa      	bls.n	8002fc6 <_free_r+0x4e>
 8002fd0:	6811      	ldr	r1, [r2, #0]
 8002fd2:	1855      	adds	r5, r2, r1
 8002fd4:	42a5      	cmp	r5, r4
 8002fd6:	d10b      	bne.n	8002ff0 <_free_r+0x78>
 8002fd8:	6824      	ldr	r4, [r4, #0]
 8002fda:	4421      	add	r1, r4
 8002fdc:	1854      	adds	r4, r2, r1
 8002fde:	42a3      	cmp	r3, r4
 8002fe0:	6011      	str	r1, [r2, #0]
 8002fe2:	d1dd      	bne.n	8002fa0 <_free_r+0x28>
 8002fe4:	681c      	ldr	r4, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	6053      	str	r3, [r2, #4]
 8002fea:	4421      	add	r1, r4
 8002fec:	6011      	str	r1, [r2, #0]
 8002fee:	e7d7      	b.n	8002fa0 <_free_r+0x28>
 8002ff0:	d902      	bls.n	8002ff8 <_free_r+0x80>
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	6003      	str	r3, [r0, #0]
 8002ff6:	e7d3      	b.n	8002fa0 <_free_r+0x28>
 8002ff8:	6825      	ldr	r5, [r4, #0]
 8002ffa:	1961      	adds	r1, r4, r5
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	bf04      	itt	eq
 8003000:	6819      	ldreq	r1, [r3, #0]
 8003002:	685b      	ldreq	r3, [r3, #4]
 8003004:	6063      	str	r3, [r4, #4]
 8003006:	bf04      	itt	eq
 8003008:	1949      	addeq	r1, r1, r5
 800300a:	6021      	streq	r1, [r4, #0]
 800300c:	6054      	str	r4, [r2, #4]
 800300e:	e7c7      	b.n	8002fa0 <_free_r+0x28>
 8003010:	b003      	add	sp, #12
 8003012:	bd30      	pop	{r4, r5, pc}
 8003014:	200001b4 	.word	0x200001b4

08003018 <_malloc_r>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	1ccd      	adds	r5, r1, #3
 800301c:	f025 0503 	bic.w	r5, r5, #3
 8003020:	3508      	adds	r5, #8
 8003022:	2d0c      	cmp	r5, #12
 8003024:	bf38      	it	cc
 8003026:	250c      	movcc	r5, #12
 8003028:	2d00      	cmp	r5, #0
 800302a:	4606      	mov	r6, r0
 800302c:	db01      	blt.n	8003032 <_malloc_r+0x1a>
 800302e:	42a9      	cmp	r1, r5
 8003030:	d903      	bls.n	800303a <_malloc_r+0x22>
 8003032:	230c      	movs	r3, #12
 8003034:	6033      	str	r3, [r6, #0]
 8003036:	2000      	movs	r0, #0
 8003038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800303a:	f000 fcd5 	bl	80039e8 <__malloc_lock>
 800303e:	4921      	ldr	r1, [pc, #132]	; (80030c4 <_malloc_r+0xac>)
 8003040:	680a      	ldr	r2, [r1, #0]
 8003042:	4614      	mov	r4, r2
 8003044:	b99c      	cbnz	r4, 800306e <_malloc_r+0x56>
 8003046:	4f20      	ldr	r7, [pc, #128]	; (80030c8 <_malloc_r+0xb0>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	b923      	cbnz	r3, 8003056 <_malloc_r+0x3e>
 800304c:	4621      	mov	r1, r4
 800304e:	4630      	mov	r0, r6
 8003050:	f000 fb72 	bl	8003738 <_sbrk_r>
 8003054:	6038      	str	r0, [r7, #0]
 8003056:	4629      	mov	r1, r5
 8003058:	4630      	mov	r0, r6
 800305a:	f000 fb6d 	bl	8003738 <_sbrk_r>
 800305e:	1c43      	adds	r3, r0, #1
 8003060:	d123      	bne.n	80030aa <_malloc_r+0x92>
 8003062:	230c      	movs	r3, #12
 8003064:	6033      	str	r3, [r6, #0]
 8003066:	4630      	mov	r0, r6
 8003068:	f000 fcc4 	bl	80039f4 <__malloc_unlock>
 800306c:	e7e3      	b.n	8003036 <_malloc_r+0x1e>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	1b5b      	subs	r3, r3, r5
 8003072:	d417      	bmi.n	80030a4 <_malloc_r+0x8c>
 8003074:	2b0b      	cmp	r3, #11
 8003076:	d903      	bls.n	8003080 <_malloc_r+0x68>
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	441c      	add	r4, r3
 800307c:	6025      	str	r5, [r4, #0]
 800307e:	e004      	b.n	800308a <_malloc_r+0x72>
 8003080:	6863      	ldr	r3, [r4, #4]
 8003082:	42a2      	cmp	r2, r4
 8003084:	bf0c      	ite	eq
 8003086:	600b      	streq	r3, [r1, #0]
 8003088:	6053      	strne	r3, [r2, #4]
 800308a:	4630      	mov	r0, r6
 800308c:	f000 fcb2 	bl	80039f4 <__malloc_unlock>
 8003090:	f104 000b 	add.w	r0, r4, #11
 8003094:	1d23      	adds	r3, r4, #4
 8003096:	f020 0007 	bic.w	r0, r0, #7
 800309a:	1ac2      	subs	r2, r0, r3
 800309c:	d0cc      	beq.n	8003038 <_malloc_r+0x20>
 800309e:	1a1b      	subs	r3, r3, r0
 80030a0:	50a3      	str	r3, [r4, r2]
 80030a2:	e7c9      	b.n	8003038 <_malloc_r+0x20>
 80030a4:	4622      	mov	r2, r4
 80030a6:	6864      	ldr	r4, [r4, #4]
 80030a8:	e7cc      	b.n	8003044 <_malloc_r+0x2c>
 80030aa:	1cc4      	adds	r4, r0, #3
 80030ac:	f024 0403 	bic.w	r4, r4, #3
 80030b0:	42a0      	cmp	r0, r4
 80030b2:	d0e3      	beq.n	800307c <_malloc_r+0x64>
 80030b4:	1a21      	subs	r1, r4, r0
 80030b6:	4630      	mov	r0, r6
 80030b8:	f000 fb3e 	bl	8003738 <_sbrk_r>
 80030bc:	3001      	adds	r0, #1
 80030be:	d1dd      	bne.n	800307c <_malloc_r+0x64>
 80030c0:	e7cf      	b.n	8003062 <_malloc_r+0x4a>
 80030c2:	bf00      	nop
 80030c4:	200001b4 	.word	0x200001b4
 80030c8:	200001b8 	.word	0x200001b8

080030cc <__sfputc_r>:
 80030cc:	6893      	ldr	r3, [r2, #8]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	b410      	push	{r4}
 80030d4:	6093      	str	r3, [r2, #8]
 80030d6:	da08      	bge.n	80030ea <__sfputc_r+0x1e>
 80030d8:	6994      	ldr	r4, [r2, #24]
 80030da:	42a3      	cmp	r3, r4
 80030dc:	db01      	blt.n	80030e2 <__sfputc_r+0x16>
 80030de:	290a      	cmp	r1, #10
 80030e0:	d103      	bne.n	80030ea <__sfputc_r+0x1e>
 80030e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030e6:	f000 bb7b 	b.w	80037e0 <__swbuf_r>
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	1c58      	adds	r0, r3, #1
 80030ee:	6010      	str	r0, [r2, #0]
 80030f0:	7019      	strb	r1, [r3, #0]
 80030f2:	4608      	mov	r0, r1
 80030f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <__sfputs_r>:
 80030fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fc:	4606      	mov	r6, r0
 80030fe:	460f      	mov	r7, r1
 8003100:	4614      	mov	r4, r2
 8003102:	18d5      	adds	r5, r2, r3
 8003104:	42ac      	cmp	r4, r5
 8003106:	d101      	bne.n	800310c <__sfputs_r+0x12>
 8003108:	2000      	movs	r0, #0
 800310a:	e007      	b.n	800311c <__sfputs_r+0x22>
 800310c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003110:	463a      	mov	r2, r7
 8003112:	4630      	mov	r0, r6
 8003114:	f7ff ffda 	bl	80030cc <__sfputc_r>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d1f3      	bne.n	8003104 <__sfputs_r+0xa>
 800311c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003120 <_vfiprintf_r>:
 8003120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003124:	460d      	mov	r5, r1
 8003126:	b09d      	sub	sp, #116	; 0x74
 8003128:	4614      	mov	r4, r2
 800312a:	4698      	mov	r8, r3
 800312c:	4606      	mov	r6, r0
 800312e:	b118      	cbz	r0, 8003138 <_vfiprintf_r+0x18>
 8003130:	6983      	ldr	r3, [r0, #24]
 8003132:	b90b      	cbnz	r3, 8003138 <_vfiprintf_r+0x18>
 8003134:	f7ff fe14 	bl	8002d60 <__sinit>
 8003138:	4b89      	ldr	r3, [pc, #548]	; (8003360 <_vfiprintf_r+0x240>)
 800313a:	429d      	cmp	r5, r3
 800313c:	d11b      	bne.n	8003176 <_vfiprintf_r+0x56>
 800313e:	6875      	ldr	r5, [r6, #4]
 8003140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003142:	07d9      	lsls	r1, r3, #31
 8003144:	d405      	bmi.n	8003152 <_vfiprintf_r+0x32>
 8003146:	89ab      	ldrh	r3, [r5, #12]
 8003148:	059a      	lsls	r2, r3, #22
 800314a:	d402      	bmi.n	8003152 <_vfiprintf_r+0x32>
 800314c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800314e:	f7ff fea5 	bl	8002e9c <__retarget_lock_acquire_recursive>
 8003152:	89ab      	ldrh	r3, [r5, #12]
 8003154:	071b      	lsls	r3, r3, #28
 8003156:	d501      	bpl.n	800315c <_vfiprintf_r+0x3c>
 8003158:	692b      	ldr	r3, [r5, #16]
 800315a:	b9eb      	cbnz	r3, 8003198 <_vfiprintf_r+0x78>
 800315c:	4629      	mov	r1, r5
 800315e:	4630      	mov	r0, r6
 8003160:	f000 fb90 	bl	8003884 <__swsetup_r>
 8003164:	b1c0      	cbz	r0, 8003198 <_vfiprintf_r+0x78>
 8003166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003168:	07dc      	lsls	r4, r3, #31
 800316a:	d50e      	bpl.n	800318a <_vfiprintf_r+0x6a>
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	b01d      	add	sp, #116	; 0x74
 8003172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003176:	4b7b      	ldr	r3, [pc, #492]	; (8003364 <_vfiprintf_r+0x244>)
 8003178:	429d      	cmp	r5, r3
 800317a:	d101      	bne.n	8003180 <_vfiprintf_r+0x60>
 800317c:	68b5      	ldr	r5, [r6, #8]
 800317e:	e7df      	b.n	8003140 <_vfiprintf_r+0x20>
 8003180:	4b79      	ldr	r3, [pc, #484]	; (8003368 <_vfiprintf_r+0x248>)
 8003182:	429d      	cmp	r5, r3
 8003184:	bf08      	it	eq
 8003186:	68f5      	ldreq	r5, [r6, #12]
 8003188:	e7da      	b.n	8003140 <_vfiprintf_r+0x20>
 800318a:	89ab      	ldrh	r3, [r5, #12]
 800318c:	0598      	lsls	r0, r3, #22
 800318e:	d4ed      	bmi.n	800316c <_vfiprintf_r+0x4c>
 8003190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003192:	f7ff fe84 	bl	8002e9e <__retarget_lock_release_recursive>
 8003196:	e7e9      	b.n	800316c <_vfiprintf_r+0x4c>
 8003198:	2300      	movs	r3, #0
 800319a:	9309      	str	r3, [sp, #36]	; 0x24
 800319c:	2320      	movs	r3, #32
 800319e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80031a6:	2330      	movs	r3, #48	; 0x30
 80031a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800336c <_vfiprintf_r+0x24c>
 80031ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031b0:	f04f 0901 	mov.w	r9, #1
 80031b4:	4623      	mov	r3, r4
 80031b6:	469a      	mov	sl, r3
 80031b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031bc:	b10a      	cbz	r2, 80031c2 <_vfiprintf_r+0xa2>
 80031be:	2a25      	cmp	r2, #37	; 0x25
 80031c0:	d1f9      	bne.n	80031b6 <_vfiprintf_r+0x96>
 80031c2:	ebba 0b04 	subs.w	fp, sl, r4
 80031c6:	d00b      	beq.n	80031e0 <_vfiprintf_r+0xc0>
 80031c8:	465b      	mov	r3, fp
 80031ca:	4622      	mov	r2, r4
 80031cc:	4629      	mov	r1, r5
 80031ce:	4630      	mov	r0, r6
 80031d0:	f7ff ff93 	bl	80030fa <__sfputs_r>
 80031d4:	3001      	adds	r0, #1
 80031d6:	f000 80aa 	beq.w	800332e <_vfiprintf_r+0x20e>
 80031da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031dc:	445a      	add	r2, fp
 80031de:	9209      	str	r2, [sp, #36]	; 0x24
 80031e0:	f89a 3000 	ldrb.w	r3, [sl]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a2 	beq.w	800332e <_vfiprintf_r+0x20e>
 80031ea:	2300      	movs	r3, #0
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031f4:	f10a 0a01 	add.w	sl, sl, #1
 80031f8:	9304      	str	r3, [sp, #16]
 80031fa:	9307      	str	r3, [sp, #28]
 80031fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003200:	931a      	str	r3, [sp, #104]	; 0x68
 8003202:	4654      	mov	r4, sl
 8003204:	2205      	movs	r2, #5
 8003206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800320a:	4858      	ldr	r0, [pc, #352]	; (800336c <_vfiprintf_r+0x24c>)
 800320c:	f7fc ffe0 	bl	80001d0 <memchr>
 8003210:	9a04      	ldr	r2, [sp, #16]
 8003212:	b9d8      	cbnz	r0, 800324c <_vfiprintf_r+0x12c>
 8003214:	06d1      	lsls	r1, r2, #27
 8003216:	bf44      	itt	mi
 8003218:	2320      	movmi	r3, #32
 800321a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800321e:	0713      	lsls	r3, r2, #28
 8003220:	bf44      	itt	mi
 8003222:	232b      	movmi	r3, #43	; 0x2b
 8003224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003228:	f89a 3000 	ldrb.w	r3, [sl]
 800322c:	2b2a      	cmp	r3, #42	; 0x2a
 800322e:	d015      	beq.n	800325c <_vfiprintf_r+0x13c>
 8003230:	9a07      	ldr	r2, [sp, #28]
 8003232:	4654      	mov	r4, sl
 8003234:	2000      	movs	r0, #0
 8003236:	f04f 0c0a 	mov.w	ip, #10
 800323a:	4621      	mov	r1, r4
 800323c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003240:	3b30      	subs	r3, #48	; 0x30
 8003242:	2b09      	cmp	r3, #9
 8003244:	d94e      	bls.n	80032e4 <_vfiprintf_r+0x1c4>
 8003246:	b1b0      	cbz	r0, 8003276 <_vfiprintf_r+0x156>
 8003248:	9207      	str	r2, [sp, #28]
 800324a:	e014      	b.n	8003276 <_vfiprintf_r+0x156>
 800324c:	eba0 0308 	sub.w	r3, r0, r8
 8003250:	fa09 f303 	lsl.w	r3, r9, r3
 8003254:	4313      	orrs	r3, r2
 8003256:	9304      	str	r3, [sp, #16]
 8003258:	46a2      	mov	sl, r4
 800325a:	e7d2      	b.n	8003202 <_vfiprintf_r+0xe2>
 800325c:	9b03      	ldr	r3, [sp, #12]
 800325e:	1d19      	adds	r1, r3, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	9103      	str	r1, [sp, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	bfbb      	ittet	lt
 8003268:	425b      	neglt	r3, r3
 800326a:	f042 0202 	orrlt.w	r2, r2, #2
 800326e:	9307      	strge	r3, [sp, #28]
 8003270:	9307      	strlt	r3, [sp, #28]
 8003272:	bfb8      	it	lt
 8003274:	9204      	strlt	r2, [sp, #16]
 8003276:	7823      	ldrb	r3, [r4, #0]
 8003278:	2b2e      	cmp	r3, #46	; 0x2e
 800327a:	d10c      	bne.n	8003296 <_vfiprintf_r+0x176>
 800327c:	7863      	ldrb	r3, [r4, #1]
 800327e:	2b2a      	cmp	r3, #42	; 0x2a
 8003280:	d135      	bne.n	80032ee <_vfiprintf_r+0x1ce>
 8003282:	9b03      	ldr	r3, [sp, #12]
 8003284:	1d1a      	adds	r2, r3, #4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	9203      	str	r2, [sp, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	bfb8      	it	lt
 800328e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003292:	3402      	adds	r4, #2
 8003294:	9305      	str	r3, [sp, #20]
 8003296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800337c <_vfiprintf_r+0x25c>
 800329a:	7821      	ldrb	r1, [r4, #0]
 800329c:	2203      	movs	r2, #3
 800329e:	4650      	mov	r0, sl
 80032a0:	f7fc ff96 	bl	80001d0 <memchr>
 80032a4:	b140      	cbz	r0, 80032b8 <_vfiprintf_r+0x198>
 80032a6:	2340      	movs	r3, #64	; 0x40
 80032a8:	eba0 000a 	sub.w	r0, r0, sl
 80032ac:	fa03 f000 	lsl.w	r0, r3, r0
 80032b0:	9b04      	ldr	r3, [sp, #16]
 80032b2:	4303      	orrs	r3, r0
 80032b4:	3401      	adds	r4, #1
 80032b6:	9304      	str	r3, [sp, #16]
 80032b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032bc:	482c      	ldr	r0, [pc, #176]	; (8003370 <_vfiprintf_r+0x250>)
 80032be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032c2:	2206      	movs	r2, #6
 80032c4:	f7fc ff84 	bl	80001d0 <memchr>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d03f      	beq.n	800334c <_vfiprintf_r+0x22c>
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <_vfiprintf_r+0x254>)
 80032ce:	bb1b      	cbnz	r3, 8003318 <_vfiprintf_r+0x1f8>
 80032d0:	9b03      	ldr	r3, [sp, #12]
 80032d2:	3307      	adds	r3, #7
 80032d4:	f023 0307 	bic.w	r3, r3, #7
 80032d8:	3308      	adds	r3, #8
 80032da:	9303      	str	r3, [sp, #12]
 80032dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032de:	443b      	add	r3, r7
 80032e0:	9309      	str	r3, [sp, #36]	; 0x24
 80032e2:	e767      	b.n	80031b4 <_vfiprintf_r+0x94>
 80032e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80032e8:	460c      	mov	r4, r1
 80032ea:	2001      	movs	r0, #1
 80032ec:	e7a5      	b.n	800323a <_vfiprintf_r+0x11a>
 80032ee:	2300      	movs	r3, #0
 80032f0:	3401      	adds	r4, #1
 80032f2:	9305      	str	r3, [sp, #20]
 80032f4:	4619      	mov	r1, r3
 80032f6:	f04f 0c0a 	mov.w	ip, #10
 80032fa:	4620      	mov	r0, r4
 80032fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003300:	3a30      	subs	r2, #48	; 0x30
 8003302:	2a09      	cmp	r2, #9
 8003304:	d903      	bls.n	800330e <_vfiprintf_r+0x1ee>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0c5      	beq.n	8003296 <_vfiprintf_r+0x176>
 800330a:	9105      	str	r1, [sp, #20]
 800330c:	e7c3      	b.n	8003296 <_vfiprintf_r+0x176>
 800330e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003312:	4604      	mov	r4, r0
 8003314:	2301      	movs	r3, #1
 8003316:	e7f0      	b.n	80032fa <_vfiprintf_r+0x1da>
 8003318:	ab03      	add	r3, sp, #12
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	462a      	mov	r2, r5
 800331e:	4b16      	ldr	r3, [pc, #88]	; (8003378 <_vfiprintf_r+0x258>)
 8003320:	a904      	add	r1, sp, #16
 8003322:	4630      	mov	r0, r6
 8003324:	f3af 8000 	nop.w
 8003328:	4607      	mov	r7, r0
 800332a:	1c78      	adds	r0, r7, #1
 800332c:	d1d6      	bne.n	80032dc <_vfiprintf_r+0x1bc>
 800332e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003330:	07d9      	lsls	r1, r3, #31
 8003332:	d405      	bmi.n	8003340 <_vfiprintf_r+0x220>
 8003334:	89ab      	ldrh	r3, [r5, #12]
 8003336:	059a      	lsls	r2, r3, #22
 8003338:	d402      	bmi.n	8003340 <_vfiprintf_r+0x220>
 800333a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800333c:	f7ff fdaf 	bl	8002e9e <__retarget_lock_release_recursive>
 8003340:	89ab      	ldrh	r3, [r5, #12]
 8003342:	065b      	lsls	r3, r3, #25
 8003344:	f53f af12 	bmi.w	800316c <_vfiprintf_r+0x4c>
 8003348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800334a:	e711      	b.n	8003170 <_vfiprintf_r+0x50>
 800334c:	ab03      	add	r3, sp, #12
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	462a      	mov	r2, r5
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <_vfiprintf_r+0x258>)
 8003354:	a904      	add	r1, sp, #16
 8003356:	4630      	mov	r0, r6
 8003358:	f000 f880 	bl	800345c <_printf_i>
 800335c:	e7e4      	b.n	8003328 <_vfiprintf_r+0x208>
 800335e:	bf00      	nop
 8003360:	08003c14 	.word	0x08003c14
 8003364:	08003c34 	.word	0x08003c34
 8003368:	08003bf4 	.word	0x08003bf4
 800336c:	08003c54 	.word	0x08003c54
 8003370:	08003c5e 	.word	0x08003c5e
 8003374:	00000000 	.word	0x00000000
 8003378:	080030fb 	.word	0x080030fb
 800337c:	08003c5a 	.word	0x08003c5a

08003380 <_printf_common>:
 8003380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	4616      	mov	r6, r2
 8003386:	4699      	mov	r9, r3
 8003388:	688a      	ldr	r2, [r1, #8]
 800338a:	690b      	ldr	r3, [r1, #16]
 800338c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003390:	4293      	cmp	r3, r2
 8003392:	bfb8      	it	lt
 8003394:	4613      	movlt	r3, r2
 8003396:	6033      	str	r3, [r6, #0]
 8003398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800339c:	4607      	mov	r7, r0
 800339e:	460c      	mov	r4, r1
 80033a0:	b10a      	cbz	r2, 80033a6 <_printf_common+0x26>
 80033a2:	3301      	adds	r3, #1
 80033a4:	6033      	str	r3, [r6, #0]
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	0699      	lsls	r1, r3, #26
 80033aa:	bf42      	ittt	mi
 80033ac:	6833      	ldrmi	r3, [r6, #0]
 80033ae:	3302      	addmi	r3, #2
 80033b0:	6033      	strmi	r3, [r6, #0]
 80033b2:	6825      	ldr	r5, [r4, #0]
 80033b4:	f015 0506 	ands.w	r5, r5, #6
 80033b8:	d106      	bne.n	80033c8 <_printf_common+0x48>
 80033ba:	f104 0a19 	add.w	sl, r4, #25
 80033be:	68e3      	ldr	r3, [r4, #12]
 80033c0:	6832      	ldr	r2, [r6, #0]
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	42ab      	cmp	r3, r5
 80033c6:	dc26      	bgt.n	8003416 <_printf_common+0x96>
 80033c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033cc:	1e13      	subs	r3, r2, #0
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	bf18      	it	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	0692      	lsls	r2, r2, #26
 80033d6:	d42b      	bmi.n	8003430 <_printf_common+0xb0>
 80033d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033dc:	4649      	mov	r1, r9
 80033de:	4638      	mov	r0, r7
 80033e0:	47c0      	blx	r8
 80033e2:	3001      	adds	r0, #1
 80033e4:	d01e      	beq.n	8003424 <_printf_common+0xa4>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	68e5      	ldr	r5, [r4, #12]
 80033ea:	6832      	ldr	r2, [r6, #0]
 80033ec:	f003 0306 	and.w	r3, r3, #6
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	bf08      	it	eq
 80033f4:	1aad      	subeq	r5, r5, r2
 80033f6:	68a3      	ldr	r3, [r4, #8]
 80033f8:	6922      	ldr	r2, [r4, #16]
 80033fa:	bf0c      	ite	eq
 80033fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003400:	2500      	movne	r5, #0
 8003402:	4293      	cmp	r3, r2
 8003404:	bfc4      	itt	gt
 8003406:	1a9b      	subgt	r3, r3, r2
 8003408:	18ed      	addgt	r5, r5, r3
 800340a:	2600      	movs	r6, #0
 800340c:	341a      	adds	r4, #26
 800340e:	42b5      	cmp	r5, r6
 8003410:	d11a      	bne.n	8003448 <_printf_common+0xc8>
 8003412:	2000      	movs	r0, #0
 8003414:	e008      	b.n	8003428 <_printf_common+0xa8>
 8003416:	2301      	movs	r3, #1
 8003418:	4652      	mov	r2, sl
 800341a:	4649      	mov	r1, r9
 800341c:	4638      	mov	r0, r7
 800341e:	47c0      	blx	r8
 8003420:	3001      	adds	r0, #1
 8003422:	d103      	bne.n	800342c <_printf_common+0xac>
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800342c:	3501      	adds	r5, #1
 800342e:	e7c6      	b.n	80033be <_printf_common+0x3e>
 8003430:	18e1      	adds	r1, r4, r3
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	2030      	movs	r0, #48	; 0x30
 8003436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800343a:	4422      	add	r2, r4
 800343c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003444:	3302      	adds	r3, #2
 8003446:	e7c7      	b.n	80033d8 <_printf_common+0x58>
 8003448:	2301      	movs	r3, #1
 800344a:	4622      	mov	r2, r4
 800344c:	4649      	mov	r1, r9
 800344e:	4638      	mov	r0, r7
 8003450:	47c0      	blx	r8
 8003452:	3001      	adds	r0, #1
 8003454:	d0e6      	beq.n	8003424 <_printf_common+0xa4>
 8003456:	3601      	adds	r6, #1
 8003458:	e7d9      	b.n	800340e <_printf_common+0x8e>
	...

0800345c <_printf_i>:
 800345c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	460c      	mov	r4, r1
 8003462:	4691      	mov	r9, r2
 8003464:	7e27      	ldrb	r7, [r4, #24]
 8003466:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003468:	2f78      	cmp	r7, #120	; 0x78
 800346a:	4680      	mov	r8, r0
 800346c:	469a      	mov	sl, r3
 800346e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003472:	d807      	bhi.n	8003484 <_printf_i+0x28>
 8003474:	2f62      	cmp	r7, #98	; 0x62
 8003476:	d80a      	bhi.n	800348e <_printf_i+0x32>
 8003478:	2f00      	cmp	r7, #0
 800347a:	f000 80d8 	beq.w	800362e <_printf_i+0x1d2>
 800347e:	2f58      	cmp	r7, #88	; 0x58
 8003480:	f000 80a3 	beq.w	80035ca <_printf_i+0x16e>
 8003484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800348c:	e03a      	b.n	8003504 <_printf_i+0xa8>
 800348e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003492:	2b15      	cmp	r3, #21
 8003494:	d8f6      	bhi.n	8003484 <_printf_i+0x28>
 8003496:	a001      	add	r0, pc, #4	; (adr r0, 800349c <_printf_i+0x40>)
 8003498:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800349c:	080034f5 	.word	0x080034f5
 80034a0:	08003509 	.word	0x08003509
 80034a4:	08003485 	.word	0x08003485
 80034a8:	08003485 	.word	0x08003485
 80034ac:	08003485 	.word	0x08003485
 80034b0:	08003485 	.word	0x08003485
 80034b4:	08003509 	.word	0x08003509
 80034b8:	08003485 	.word	0x08003485
 80034bc:	08003485 	.word	0x08003485
 80034c0:	08003485 	.word	0x08003485
 80034c4:	08003485 	.word	0x08003485
 80034c8:	08003615 	.word	0x08003615
 80034cc:	08003539 	.word	0x08003539
 80034d0:	080035f7 	.word	0x080035f7
 80034d4:	08003485 	.word	0x08003485
 80034d8:	08003485 	.word	0x08003485
 80034dc:	08003637 	.word	0x08003637
 80034e0:	08003485 	.word	0x08003485
 80034e4:	08003539 	.word	0x08003539
 80034e8:	08003485 	.word	0x08003485
 80034ec:	08003485 	.word	0x08003485
 80034f0:	080035ff 	.word	0x080035ff
 80034f4:	680b      	ldr	r3, [r1, #0]
 80034f6:	1d1a      	adds	r2, r3, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	600a      	str	r2, [r1, #0]
 80034fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003504:	2301      	movs	r3, #1
 8003506:	e0a3      	b.n	8003650 <_printf_i+0x1f4>
 8003508:	6825      	ldr	r5, [r4, #0]
 800350a:	6808      	ldr	r0, [r1, #0]
 800350c:	062e      	lsls	r6, r5, #24
 800350e:	f100 0304 	add.w	r3, r0, #4
 8003512:	d50a      	bpl.n	800352a <_printf_i+0xce>
 8003514:	6805      	ldr	r5, [r0, #0]
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	2d00      	cmp	r5, #0
 800351a:	da03      	bge.n	8003524 <_printf_i+0xc8>
 800351c:	232d      	movs	r3, #45	; 0x2d
 800351e:	426d      	negs	r5, r5
 8003520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003524:	485e      	ldr	r0, [pc, #376]	; (80036a0 <_printf_i+0x244>)
 8003526:	230a      	movs	r3, #10
 8003528:	e019      	b.n	800355e <_printf_i+0x102>
 800352a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800352e:	6805      	ldr	r5, [r0, #0]
 8003530:	600b      	str	r3, [r1, #0]
 8003532:	bf18      	it	ne
 8003534:	b22d      	sxthne	r5, r5
 8003536:	e7ef      	b.n	8003518 <_printf_i+0xbc>
 8003538:	680b      	ldr	r3, [r1, #0]
 800353a:	6825      	ldr	r5, [r4, #0]
 800353c:	1d18      	adds	r0, r3, #4
 800353e:	6008      	str	r0, [r1, #0]
 8003540:	0628      	lsls	r0, r5, #24
 8003542:	d501      	bpl.n	8003548 <_printf_i+0xec>
 8003544:	681d      	ldr	r5, [r3, #0]
 8003546:	e002      	b.n	800354e <_printf_i+0xf2>
 8003548:	0669      	lsls	r1, r5, #25
 800354a:	d5fb      	bpl.n	8003544 <_printf_i+0xe8>
 800354c:	881d      	ldrh	r5, [r3, #0]
 800354e:	4854      	ldr	r0, [pc, #336]	; (80036a0 <_printf_i+0x244>)
 8003550:	2f6f      	cmp	r7, #111	; 0x6f
 8003552:	bf0c      	ite	eq
 8003554:	2308      	moveq	r3, #8
 8003556:	230a      	movne	r3, #10
 8003558:	2100      	movs	r1, #0
 800355a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800355e:	6866      	ldr	r6, [r4, #4]
 8003560:	60a6      	str	r6, [r4, #8]
 8003562:	2e00      	cmp	r6, #0
 8003564:	bfa2      	ittt	ge
 8003566:	6821      	ldrge	r1, [r4, #0]
 8003568:	f021 0104 	bicge.w	r1, r1, #4
 800356c:	6021      	strge	r1, [r4, #0]
 800356e:	b90d      	cbnz	r5, 8003574 <_printf_i+0x118>
 8003570:	2e00      	cmp	r6, #0
 8003572:	d04d      	beq.n	8003610 <_printf_i+0x1b4>
 8003574:	4616      	mov	r6, r2
 8003576:	fbb5 f1f3 	udiv	r1, r5, r3
 800357a:	fb03 5711 	mls	r7, r3, r1, r5
 800357e:	5dc7      	ldrb	r7, [r0, r7]
 8003580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003584:	462f      	mov	r7, r5
 8003586:	42bb      	cmp	r3, r7
 8003588:	460d      	mov	r5, r1
 800358a:	d9f4      	bls.n	8003576 <_printf_i+0x11a>
 800358c:	2b08      	cmp	r3, #8
 800358e:	d10b      	bne.n	80035a8 <_printf_i+0x14c>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	07df      	lsls	r7, r3, #31
 8003594:	d508      	bpl.n	80035a8 <_printf_i+0x14c>
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	6861      	ldr	r1, [r4, #4]
 800359a:	4299      	cmp	r1, r3
 800359c:	bfde      	ittt	le
 800359e:	2330      	movle	r3, #48	; 0x30
 80035a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035a8:	1b92      	subs	r2, r2, r6
 80035aa:	6122      	str	r2, [r4, #16]
 80035ac:	f8cd a000 	str.w	sl, [sp]
 80035b0:	464b      	mov	r3, r9
 80035b2:	aa03      	add	r2, sp, #12
 80035b4:	4621      	mov	r1, r4
 80035b6:	4640      	mov	r0, r8
 80035b8:	f7ff fee2 	bl	8003380 <_printf_common>
 80035bc:	3001      	adds	r0, #1
 80035be:	d14c      	bne.n	800365a <_printf_i+0x1fe>
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	b004      	add	sp, #16
 80035c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ca:	4835      	ldr	r0, [pc, #212]	; (80036a0 <_printf_i+0x244>)
 80035cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	680e      	ldr	r6, [r1, #0]
 80035d4:	061f      	lsls	r7, r3, #24
 80035d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80035da:	600e      	str	r6, [r1, #0]
 80035dc:	d514      	bpl.n	8003608 <_printf_i+0x1ac>
 80035de:	07d9      	lsls	r1, r3, #31
 80035e0:	bf44      	itt	mi
 80035e2:	f043 0320 	orrmi.w	r3, r3, #32
 80035e6:	6023      	strmi	r3, [r4, #0]
 80035e8:	b91d      	cbnz	r5, 80035f2 <_printf_i+0x196>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	f023 0320 	bic.w	r3, r3, #32
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	2310      	movs	r3, #16
 80035f4:	e7b0      	b.n	8003558 <_printf_i+0xfc>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	f043 0320 	orr.w	r3, r3, #32
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	2378      	movs	r3, #120	; 0x78
 8003600:	4828      	ldr	r0, [pc, #160]	; (80036a4 <_printf_i+0x248>)
 8003602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003606:	e7e3      	b.n	80035d0 <_printf_i+0x174>
 8003608:	065e      	lsls	r6, r3, #25
 800360a:	bf48      	it	mi
 800360c:	b2ad      	uxthmi	r5, r5
 800360e:	e7e6      	b.n	80035de <_printf_i+0x182>
 8003610:	4616      	mov	r6, r2
 8003612:	e7bb      	b.n	800358c <_printf_i+0x130>
 8003614:	680b      	ldr	r3, [r1, #0]
 8003616:	6826      	ldr	r6, [r4, #0]
 8003618:	6960      	ldr	r0, [r4, #20]
 800361a:	1d1d      	adds	r5, r3, #4
 800361c:	600d      	str	r5, [r1, #0]
 800361e:	0635      	lsls	r5, r6, #24
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	d501      	bpl.n	8003628 <_printf_i+0x1cc>
 8003624:	6018      	str	r0, [r3, #0]
 8003626:	e002      	b.n	800362e <_printf_i+0x1d2>
 8003628:	0671      	lsls	r1, r6, #25
 800362a:	d5fb      	bpl.n	8003624 <_printf_i+0x1c8>
 800362c:	8018      	strh	r0, [r3, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	6123      	str	r3, [r4, #16]
 8003632:	4616      	mov	r6, r2
 8003634:	e7ba      	b.n	80035ac <_printf_i+0x150>
 8003636:	680b      	ldr	r3, [r1, #0]
 8003638:	1d1a      	adds	r2, r3, #4
 800363a:	600a      	str	r2, [r1, #0]
 800363c:	681e      	ldr	r6, [r3, #0]
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	2100      	movs	r1, #0
 8003642:	4630      	mov	r0, r6
 8003644:	f7fc fdc4 	bl	80001d0 <memchr>
 8003648:	b108      	cbz	r0, 800364e <_printf_i+0x1f2>
 800364a:	1b80      	subs	r0, r0, r6
 800364c:	6060      	str	r0, [r4, #4]
 800364e:	6863      	ldr	r3, [r4, #4]
 8003650:	6123      	str	r3, [r4, #16]
 8003652:	2300      	movs	r3, #0
 8003654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003658:	e7a8      	b.n	80035ac <_printf_i+0x150>
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	4632      	mov	r2, r6
 800365e:	4649      	mov	r1, r9
 8003660:	4640      	mov	r0, r8
 8003662:	47d0      	blx	sl
 8003664:	3001      	adds	r0, #1
 8003666:	d0ab      	beq.n	80035c0 <_printf_i+0x164>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	079b      	lsls	r3, r3, #30
 800366c:	d413      	bmi.n	8003696 <_printf_i+0x23a>
 800366e:	68e0      	ldr	r0, [r4, #12]
 8003670:	9b03      	ldr	r3, [sp, #12]
 8003672:	4298      	cmp	r0, r3
 8003674:	bfb8      	it	lt
 8003676:	4618      	movlt	r0, r3
 8003678:	e7a4      	b.n	80035c4 <_printf_i+0x168>
 800367a:	2301      	movs	r3, #1
 800367c:	4632      	mov	r2, r6
 800367e:	4649      	mov	r1, r9
 8003680:	4640      	mov	r0, r8
 8003682:	47d0      	blx	sl
 8003684:	3001      	adds	r0, #1
 8003686:	d09b      	beq.n	80035c0 <_printf_i+0x164>
 8003688:	3501      	adds	r5, #1
 800368a:	68e3      	ldr	r3, [r4, #12]
 800368c:	9903      	ldr	r1, [sp, #12]
 800368e:	1a5b      	subs	r3, r3, r1
 8003690:	42ab      	cmp	r3, r5
 8003692:	dcf2      	bgt.n	800367a <_printf_i+0x21e>
 8003694:	e7eb      	b.n	800366e <_printf_i+0x212>
 8003696:	2500      	movs	r5, #0
 8003698:	f104 0619 	add.w	r6, r4, #25
 800369c:	e7f5      	b.n	800368a <_printf_i+0x22e>
 800369e:	bf00      	nop
 80036a0:	08003c65 	.word	0x08003c65
 80036a4:	08003c76 	.word	0x08003c76

080036a8 <_putc_r>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	460d      	mov	r5, r1
 80036ac:	4614      	mov	r4, r2
 80036ae:	4606      	mov	r6, r0
 80036b0:	b118      	cbz	r0, 80036ba <_putc_r+0x12>
 80036b2:	6983      	ldr	r3, [r0, #24]
 80036b4:	b90b      	cbnz	r3, 80036ba <_putc_r+0x12>
 80036b6:	f7ff fb53 	bl	8002d60 <__sinit>
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <_putc_r+0x84>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	d124      	bne.n	800370a <_putc_r+0x62>
 80036c0:	6874      	ldr	r4, [r6, #4]
 80036c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036c4:	07d8      	lsls	r0, r3, #31
 80036c6:	d405      	bmi.n	80036d4 <_putc_r+0x2c>
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	0599      	lsls	r1, r3, #22
 80036cc:	d402      	bmi.n	80036d4 <_putc_r+0x2c>
 80036ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036d0:	f7ff fbe4 	bl	8002e9c <__retarget_lock_acquire_recursive>
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	60a3      	str	r3, [r4, #8]
 80036dc:	da05      	bge.n	80036ea <_putc_r+0x42>
 80036de:	69a2      	ldr	r2, [r4, #24]
 80036e0:	4293      	cmp	r3, r2
 80036e2:	db1c      	blt.n	800371e <_putc_r+0x76>
 80036e4:	b2eb      	uxtb	r3, r5
 80036e6:	2b0a      	cmp	r3, #10
 80036e8:	d019      	beq.n	800371e <_putc_r+0x76>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	6022      	str	r2, [r4, #0]
 80036f0:	701d      	strb	r5, [r3, #0]
 80036f2:	b2ed      	uxtb	r5, r5
 80036f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036f6:	07da      	lsls	r2, r3, #31
 80036f8:	d405      	bmi.n	8003706 <_putc_r+0x5e>
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	059b      	lsls	r3, r3, #22
 80036fe:	d402      	bmi.n	8003706 <_putc_r+0x5e>
 8003700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003702:	f7ff fbcc 	bl	8002e9e <__retarget_lock_release_recursive>
 8003706:	4628      	mov	r0, r5
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <_putc_r+0x88>)
 800370c:	429c      	cmp	r4, r3
 800370e:	d101      	bne.n	8003714 <_putc_r+0x6c>
 8003710:	68b4      	ldr	r4, [r6, #8]
 8003712:	e7d6      	b.n	80036c2 <_putc_r+0x1a>
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <_putc_r+0x8c>)
 8003716:	429c      	cmp	r4, r3
 8003718:	bf08      	it	eq
 800371a:	68f4      	ldreq	r4, [r6, #12]
 800371c:	e7d1      	b.n	80036c2 <_putc_r+0x1a>
 800371e:	4629      	mov	r1, r5
 8003720:	4622      	mov	r2, r4
 8003722:	4630      	mov	r0, r6
 8003724:	f000 f85c 	bl	80037e0 <__swbuf_r>
 8003728:	4605      	mov	r5, r0
 800372a:	e7e3      	b.n	80036f4 <_putc_r+0x4c>
 800372c:	08003c14 	.word	0x08003c14
 8003730:	08003c34 	.word	0x08003c34
 8003734:	08003bf4 	.word	0x08003bf4

08003738 <_sbrk_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4d06      	ldr	r5, [pc, #24]	; (8003754 <_sbrk_r+0x1c>)
 800373c:	2300      	movs	r3, #0
 800373e:	4604      	mov	r4, r0
 8003740:	4608      	mov	r0, r1
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	f7fe fe9a 	bl	800247c <_sbrk>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d102      	bne.n	8003752 <_sbrk_r+0x1a>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	b103      	cbz	r3, 8003752 <_sbrk_r+0x1a>
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	20000228 	.word	0x20000228

08003758 <__sread>:
 8003758:	b510      	push	{r4, lr}
 800375a:	460c      	mov	r4, r1
 800375c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003760:	f000 f94e 	bl	8003a00 <_read_r>
 8003764:	2800      	cmp	r0, #0
 8003766:	bfab      	itete	ge
 8003768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800376a:	89a3      	ldrhlt	r3, [r4, #12]
 800376c:	181b      	addge	r3, r3, r0
 800376e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003772:	bfac      	ite	ge
 8003774:	6563      	strge	r3, [r4, #84]	; 0x54
 8003776:	81a3      	strhlt	r3, [r4, #12]
 8003778:	bd10      	pop	{r4, pc}

0800377a <__swrite>:
 800377a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377e:	461f      	mov	r7, r3
 8003780:	898b      	ldrh	r3, [r1, #12]
 8003782:	05db      	lsls	r3, r3, #23
 8003784:	4605      	mov	r5, r0
 8003786:	460c      	mov	r4, r1
 8003788:	4616      	mov	r6, r2
 800378a:	d505      	bpl.n	8003798 <__swrite+0x1e>
 800378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003790:	2302      	movs	r3, #2
 8003792:	2200      	movs	r2, #0
 8003794:	f000 f916 	bl	80039c4 <_lseek_r>
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800379e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	4632      	mov	r2, r6
 80037a6:	463b      	mov	r3, r7
 80037a8:	4628      	mov	r0, r5
 80037aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ae:	f7fd bc9d 	b.w	80010ec <_write_r>

080037b2 <__sseek>:
 80037b2:	b510      	push	{r4, lr}
 80037b4:	460c      	mov	r4, r1
 80037b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ba:	f000 f903 	bl	80039c4 <_lseek_r>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	bf15      	itete	ne
 80037c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80037c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037ce:	81a3      	strheq	r3, [r4, #12]
 80037d0:	bf18      	it	ne
 80037d2:	81a3      	strhne	r3, [r4, #12]
 80037d4:	bd10      	pop	{r4, pc}

080037d6 <__sclose>:
 80037d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037da:	f000 b8c1 	b.w	8003960 <_close_r>
	...

080037e0 <__swbuf_r>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	460e      	mov	r6, r1
 80037e4:	4614      	mov	r4, r2
 80037e6:	4605      	mov	r5, r0
 80037e8:	b118      	cbz	r0, 80037f2 <__swbuf_r+0x12>
 80037ea:	6983      	ldr	r3, [r0, #24]
 80037ec:	b90b      	cbnz	r3, 80037f2 <__swbuf_r+0x12>
 80037ee:	f7ff fab7 	bl	8002d60 <__sinit>
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <__swbuf_r+0x98>)
 80037f4:	429c      	cmp	r4, r3
 80037f6:	d12b      	bne.n	8003850 <__swbuf_r+0x70>
 80037f8:	686c      	ldr	r4, [r5, #4]
 80037fa:	69a3      	ldr	r3, [r4, #24]
 80037fc:	60a3      	str	r3, [r4, #8]
 80037fe:	89a3      	ldrh	r3, [r4, #12]
 8003800:	071a      	lsls	r2, r3, #28
 8003802:	d52f      	bpl.n	8003864 <__swbuf_r+0x84>
 8003804:	6923      	ldr	r3, [r4, #16]
 8003806:	b36b      	cbz	r3, 8003864 <__swbuf_r+0x84>
 8003808:	6923      	ldr	r3, [r4, #16]
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	1ac0      	subs	r0, r0, r3
 800380e:	6963      	ldr	r3, [r4, #20]
 8003810:	b2f6      	uxtb	r6, r6
 8003812:	4283      	cmp	r3, r0
 8003814:	4637      	mov	r7, r6
 8003816:	dc04      	bgt.n	8003822 <__swbuf_r+0x42>
 8003818:	4621      	mov	r1, r4
 800381a:	4628      	mov	r0, r5
 800381c:	f7ff fa0c 	bl	8002c38 <_fflush_r>
 8003820:	bb30      	cbnz	r0, 8003870 <__swbuf_r+0x90>
 8003822:	68a3      	ldr	r3, [r4, #8]
 8003824:	3b01      	subs	r3, #1
 8003826:	60a3      	str	r3, [r4, #8]
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	6022      	str	r2, [r4, #0]
 800382e:	701e      	strb	r6, [r3, #0]
 8003830:	6963      	ldr	r3, [r4, #20]
 8003832:	3001      	adds	r0, #1
 8003834:	4283      	cmp	r3, r0
 8003836:	d004      	beq.n	8003842 <__swbuf_r+0x62>
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	07db      	lsls	r3, r3, #31
 800383c:	d506      	bpl.n	800384c <__swbuf_r+0x6c>
 800383e:	2e0a      	cmp	r6, #10
 8003840:	d104      	bne.n	800384c <__swbuf_r+0x6c>
 8003842:	4621      	mov	r1, r4
 8003844:	4628      	mov	r0, r5
 8003846:	f7ff f9f7 	bl	8002c38 <_fflush_r>
 800384a:	b988      	cbnz	r0, 8003870 <__swbuf_r+0x90>
 800384c:	4638      	mov	r0, r7
 800384e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <__swbuf_r+0x9c>)
 8003852:	429c      	cmp	r4, r3
 8003854:	d101      	bne.n	800385a <__swbuf_r+0x7a>
 8003856:	68ac      	ldr	r4, [r5, #8]
 8003858:	e7cf      	b.n	80037fa <__swbuf_r+0x1a>
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <__swbuf_r+0xa0>)
 800385c:	429c      	cmp	r4, r3
 800385e:	bf08      	it	eq
 8003860:	68ec      	ldreq	r4, [r5, #12]
 8003862:	e7ca      	b.n	80037fa <__swbuf_r+0x1a>
 8003864:	4621      	mov	r1, r4
 8003866:	4628      	mov	r0, r5
 8003868:	f000 f80c 	bl	8003884 <__swsetup_r>
 800386c:	2800      	cmp	r0, #0
 800386e:	d0cb      	beq.n	8003808 <__swbuf_r+0x28>
 8003870:	f04f 37ff 	mov.w	r7, #4294967295
 8003874:	e7ea      	b.n	800384c <__swbuf_r+0x6c>
 8003876:	bf00      	nop
 8003878:	08003c14 	.word	0x08003c14
 800387c:	08003c34 	.word	0x08003c34
 8003880:	08003bf4 	.word	0x08003bf4

08003884 <__swsetup_r>:
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <__swsetup_r+0xcc>)
 8003886:	b570      	push	{r4, r5, r6, lr}
 8003888:	681d      	ldr	r5, [r3, #0]
 800388a:	4606      	mov	r6, r0
 800388c:	460c      	mov	r4, r1
 800388e:	b125      	cbz	r5, 800389a <__swsetup_r+0x16>
 8003890:	69ab      	ldr	r3, [r5, #24]
 8003892:	b913      	cbnz	r3, 800389a <__swsetup_r+0x16>
 8003894:	4628      	mov	r0, r5
 8003896:	f7ff fa63 	bl	8002d60 <__sinit>
 800389a:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <__swsetup_r+0xd0>)
 800389c:	429c      	cmp	r4, r3
 800389e:	d10f      	bne.n	80038c0 <__swsetup_r+0x3c>
 80038a0:	686c      	ldr	r4, [r5, #4]
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038a8:	0719      	lsls	r1, r3, #28
 80038aa:	d42c      	bmi.n	8003906 <__swsetup_r+0x82>
 80038ac:	06dd      	lsls	r5, r3, #27
 80038ae:	d411      	bmi.n	80038d4 <__swsetup_r+0x50>
 80038b0:	2309      	movs	r3, #9
 80038b2:	6033      	str	r3, [r6, #0]
 80038b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038b8:	81a3      	strh	r3, [r4, #12]
 80038ba:	f04f 30ff 	mov.w	r0, #4294967295
 80038be:	e03e      	b.n	800393e <__swsetup_r+0xba>
 80038c0:	4b25      	ldr	r3, [pc, #148]	; (8003958 <__swsetup_r+0xd4>)
 80038c2:	429c      	cmp	r4, r3
 80038c4:	d101      	bne.n	80038ca <__swsetup_r+0x46>
 80038c6:	68ac      	ldr	r4, [r5, #8]
 80038c8:	e7eb      	b.n	80038a2 <__swsetup_r+0x1e>
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <__swsetup_r+0xd8>)
 80038cc:	429c      	cmp	r4, r3
 80038ce:	bf08      	it	eq
 80038d0:	68ec      	ldreq	r4, [r5, #12]
 80038d2:	e7e6      	b.n	80038a2 <__swsetup_r+0x1e>
 80038d4:	0758      	lsls	r0, r3, #29
 80038d6:	d512      	bpl.n	80038fe <__swsetup_r+0x7a>
 80038d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038da:	b141      	cbz	r1, 80038ee <__swsetup_r+0x6a>
 80038dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038e0:	4299      	cmp	r1, r3
 80038e2:	d002      	beq.n	80038ea <__swsetup_r+0x66>
 80038e4:	4630      	mov	r0, r6
 80038e6:	f7ff fb47 	bl	8002f78 <_free_r>
 80038ea:	2300      	movs	r3, #0
 80038ec:	6363      	str	r3, [r4, #52]	; 0x34
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038f4:	81a3      	strh	r3, [r4, #12]
 80038f6:	2300      	movs	r3, #0
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	6923      	ldr	r3, [r4, #16]
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	f043 0308 	orr.w	r3, r3, #8
 8003904:	81a3      	strh	r3, [r4, #12]
 8003906:	6923      	ldr	r3, [r4, #16]
 8003908:	b94b      	cbnz	r3, 800391e <__swsetup_r+0x9a>
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003914:	d003      	beq.n	800391e <__swsetup_r+0x9a>
 8003916:	4621      	mov	r1, r4
 8003918:	4630      	mov	r0, r6
 800391a:	f7ff fae5 	bl	8002ee8 <__smakebuf_r>
 800391e:	89a0      	ldrh	r0, [r4, #12]
 8003920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003924:	f010 0301 	ands.w	r3, r0, #1
 8003928:	d00a      	beq.n	8003940 <__swsetup_r+0xbc>
 800392a:	2300      	movs	r3, #0
 800392c:	60a3      	str	r3, [r4, #8]
 800392e:	6963      	ldr	r3, [r4, #20]
 8003930:	425b      	negs	r3, r3
 8003932:	61a3      	str	r3, [r4, #24]
 8003934:	6923      	ldr	r3, [r4, #16]
 8003936:	b943      	cbnz	r3, 800394a <__swsetup_r+0xc6>
 8003938:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800393c:	d1ba      	bne.n	80038b4 <__swsetup_r+0x30>
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	0781      	lsls	r1, r0, #30
 8003942:	bf58      	it	pl
 8003944:	6963      	ldrpl	r3, [r4, #20]
 8003946:	60a3      	str	r3, [r4, #8]
 8003948:	e7f4      	b.n	8003934 <__swsetup_r+0xb0>
 800394a:	2000      	movs	r0, #0
 800394c:	e7f7      	b.n	800393e <__swsetup_r+0xba>
 800394e:	bf00      	nop
 8003950:	2000002c 	.word	0x2000002c
 8003954:	08003c14 	.word	0x08003c14
 8003958:	08003c34 	.word	0x08003c34
 800395c:	08003bf4 	.word	0x08003bf4

08003960 <_close_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4d06      	ldr	r5, [pc, #24]	; (800397c <_close_r+0x1c>)
 8003964:	2300      	movs	r3, #0
 8003966:	4604      	mov	r4, r0
 8003968:	4608      	mov	r0, r1
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	f7fe fd52 	bl	8002414 <_close>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_close_r+0x1a>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_close_r+0x1a>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	20000228 	.word	0x20000228

08003980 <_fstat_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4d07      	ldr	r5, [pc, #28]	; (80039a0 <_fstat_r+0x20>)
 8003984:	2300      	movs	r3, #0
 8003986:	4604      	mov	r4, r0
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	602b      	str	r3, [r5, #0]
 800398e:	f7fe fd4d 	bl	800242c <_fstat>
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	d102      	bne.n	800399c <_fstat_r+0x1c>
 8003996:	682b      	ldr	r3, [r5, #0]
 8003998:	b103      	cbz	r3, 800399c <_fstat_r+0x1c>
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	bd38      	pop	{r3, r4, r5, pc}
 800399e:	bf00      	nop
 80039a0:	20000228 	.word	0x20000228

080039a4 <_isatty_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4d06      	ldr	r5, [pc, #24]	; (80039c0 <_isatty_r+0x1c>)
 80039a8:	2300      	movs	r3, #0
 80039aa:	4604      	mov	r4, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	f7fe fd4c 	bl	800244c <_isatty>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_isatty_r+0x1a>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	b103      	cbz	r3, 80039be <_isatty_r+0x1a>
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	20000228 	.word	0x20000228

080039c4 <_lseek_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4d07      	ldr	r5, [pc, #28]	; (80039e4 <_lseek_r+0x20>)
 80039c8:	4604      	mov	r4, r0
 80039ca:	4608      	mov	r0, r1
 80039cc:	4611      	mov	r1, r2
 80039ce:	2200      	movs	r2, #0
 80039d0:	602a      	str	r2, [r5, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f7fe fd45 	bl	8002462 <_lseek>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d102      	bne.n	80039e2 <_lseek_r+0x1e>
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	b103      	cbz	r3, 80039e2 <_lseek_r+0x1e>
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	bd38      	pop	{r3, r4, r5, pc}
 80039e4:	20000228 	.word	0x20000228

080039e8 <__malloc_lock>:
 80039e8:	4801      	ldr	r0, [pc, #4]	; (80039f0 <__malloc_lock+0x8>)
 80039ea:	f7ff ba57 	b.w	8002e9c <__retarget_lock_acquire_recursive>
 80039ee:	bf00      	nop
 80039f0:	20000220 	.word	0x20000220

080039f4 <__malloc_unlock>:
 80039f4:	4801      	ldr	r0, [pc, #4]	; (80039fc <__malloc_unlock+0x8>)
 80039f6:	f7ff ba52 	b.w	8002e9e <__retarget_lock_release_recursive>
 80039fa:	bf00      	nop
 80039fc:	20000220 	.word	0x20000220

08003a00 <_read_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4d07      	ldr	r5, [pc, #28]	; (8003a20 <_read_r+0x20>)
 8003a04:	4604      	mov	r4, r0
 8003a06:	4608      	mov	r0, r1
 8003a08:	4611      	mov	r1, r2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	602a      	str	r2, [r5, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f7fe fce3 	bl	80023da <_read>
 8003a14:	1c43      	adds	r3, r0, #1
 8003a16:	d102      	bne.n	8003a1e <_read_r+0x1e>
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	b103      	cbz	r3, 8003a1e <_read_r+0x1e>
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}
 8003a20:	20000228 	.word	0x20000228

08003a24 <_init>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr

08003a30 <_fini>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr
