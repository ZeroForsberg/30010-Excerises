
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c8  080045c8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080045c8  080045c8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045c8  080045c8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080045d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000090  08004660  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08004660  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce94  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ad  00000000  00000000  0002cf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  0002fa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004801  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009645  00000000  00000000  000348c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a6c0  00000000  00000000  0003df06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000985c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002600  00000000  00000000  0009861c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003df0 	.word	0x08003df0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08003df0 	.word	0x08003df0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000a74:	787a      	ldrb	r2, [r7, #1]
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	8879      	ldrh	r1, [r7, #2]
 8000aa6:	08c9      	lsrs	r1, r1, #3
 8000aa8:	b289      	uxth	r1, r1
 8000aaa:	4608      	mov	r0, r1
 8000aac:	ea02 0103 	and.w	r1, r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f100 0208 	add.w	r2, r0, #8
 8000ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	08db      	lsrs	r3, r3, #3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3208      	adds	r2, #8
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b18:	4b91      	ldr	r3, [pc, #580]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 030c 	and.w	r3, r3, #12
 8000b20:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	d011      	beq.n	8000b4c <RCC_GetClocksFreq+0x5c>
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d837      	bhi.n	8000b9e <RCC_GetClocksFreq+0xae>
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <RCC_GetClocksFreq+0x4c>
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d004      	beq.n	8000b44 <RCC_GetClocksFreq+0x54>
 8000b3a:	e030      	b.n	8000b9e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a89      	ldr	r2, [pc, #548]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000b40:	601a      	str	r2, [r3, #0]
      break;
 8000b42:	e030      	b.n	8000ba6 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a87      	ldr	r2, [pc, #540]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000b48:	601a      	str	r2, [r3, #0]
      break;
 8000b4a:	e02c      	b.n	8000ba6 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000b4c:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b54:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b56:	4b82      	ldr	r3, [pc, #520]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3302      	adds	r3, #2
 8000b66:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	4a7d      	ldr	r2, [pc, #500]	; (8000d68 <RCC_GetClocksFreq+0x278>)
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	e00d      	b.n	8000b96 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000b7a:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000b86:	4a77      	ldr	r2, [pc, #476]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b9a:	601a      	str	r2, [r3, #0]
      break;
 8000b9c:	e003      	b.n	8000ba6 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a70      	ldr	r2, [pc, #448]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000ba2:	601a      	str	r2, [r3, #0]
      break;
 8000ba4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000ba6:	4b6e      	ldr	r3, [pc, #440]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bae:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000bb6:	4a6d      	ldr	r2, [pc, #436]	; (8000d6c <RCC_GetClocksFreq+0x27c>)
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	40da      	lsrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bd6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000bde:	4a63      	ldr	r2, [pc, #396]	; (8000d6c <RCC_GetClocksFreq+0x27c>)
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	4413      	add	r3, r2
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	40da      	lsrs	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000bfe:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	0adb      	lsrs	r3, r3, #11
 8000c04:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000c06:	4a59      	ldr	r2, [pc, #356]	; (8000d6c <RCC_GetClocksFreq+0x27c>)
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	40da      	lsrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000c1e:	4b50      	ldr	r3, [pc, #320]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000c26:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c2e:	4a50      	ldr	r2, [pc, #320]	; (8000d70 <RCC_GetClocksFreq+0x280>)
 8000c30:	6a3b      	ldr	r3, [r7, #32]
 8000c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	e003      	b.n	8000c5a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000c62:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	0a5b      	lsrs	r3, r3, #9
 8000c68:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c6a:	4a41      	ldr	r2, [pc, #260]	; (8000d70 <RCC_GetClocksFreq+0x280>)
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	e003      	b.n	8000c96 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000c96:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	2b10      	cmp	r3, #16
 8000ca0:	d003      	beq.n	8000caa <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	e003      	b.n	8000cb2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	2b20      	cmp	r3, #32
 8000cbc:	d003      	beq.n	8000cc6 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000cc2:	61da      	str	r2, [r3, #28]
 8000cc4:	e003      	b.n	8000cce <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cda:	d10d      	bne.n	8000cf8 <RCC_GetClocksFreq+0x208>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d108      	bne.n	8000cf8 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d104      	bne.n	8000cf8 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	005a      	lsls	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	621a      	str	r2, [r3, #32]
 8000cf6:	e003      	b.n	8000d00 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d0c:	d10d      	bne.n	8000d2a <RCC_GetClocksFreq+0x23a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d108      	bne.n	8000d2a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d104      	bne.n	8000d2a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	005a      	lsls	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24
 8000d28:	e003      	b.n	8000d32 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d104      	bne.n	8000d48 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
 8000d46:	e029      	b.n	8000d9c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10f      	bne.n	8000d74 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8000d5c:	e01e      	b.n	8000d9c <RCC_GetClocksFreq+0x2ac>
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	007a1200 	.word	0x007a1200
 8000d68:	003d0900 	.word	0x003d0900
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000d74:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d104      	bne.n	8000d8a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
 8000d88:	e008      	b.n	8000d9c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000d8a:	4b61      	ldr	r3, [pc, #388]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d102      	bne.n	8000d9c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a5e      	ldr	r2, [pc, #376]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000d9c:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d104      	bne.n	8000db2 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db0:	e021      	b.n	8000df6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000db2:	4b57      	ldr	r3, [pc, #348]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbe:	d104      	bne.n	8000dca <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc8:	e015      	b.n	8000df6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000dca:	4b51      	ldr	r3, [pc, #324]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000dd6:	d104      	bne.n	8000de2 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de0:	e009      	b.n	8000df6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000de2:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000dee:	d102      	bne.n	8000df6 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000df6:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d104      	bne.n	8000e0c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0a:	e021      	b.n	8000e50 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000e0c:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e18:	d104      	bne.n	8000e24 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
 8000e22:	e015      	b.n	8000e50 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e30:	d104      	bne.n	8000e3c <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e38:	631a      	str	r2, [r3, #48]	; 0x30
 8000e3a:	e009      	b.n	8000e50 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000e48:	d102      	bne.n	8000e50 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
 8000e64:	e021      	b.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e72:	d104      	bne.n	8000e7e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7c:	e015      	b.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000e8a:	d104      	bne.n	8000e96 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
 8000e94:	e009      	b.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000ea2:	d102      	bne.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d104      	bne.n	8000ec0 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000ebe:	e021      	b.n	8000f04 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ecc:	d104      	bne.n	8000ed8 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ed6:	e015      	b.n	8000f04 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000ee4:	d104      	bne.n	8000ef0 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eee:	e009      	b.n	8000f04 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ef8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000efc:	d102      	bne.n	8000f04 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f04:	bf00      	nop
 8000f06:	372c      	adds	r7, #44	; 0x2c
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000
 8000f14:	007a1200 	.word	0x007a1200

08000f18 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	4613      	mov	r3, r2
 8000f48:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d103      	bne.n	8000f86 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	61fb      	str	r3, [r7, #28]
 8000f84:	e005      	b.n	8000f92 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d102      	bne.n	8000f92 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	6819      	ldr	r1, [r3, #0]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000fa4:	e006      	b.n	8000fb4 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	6819      	ldr	r1, [r3, #0]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43da      	mvns	r2, r3
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	3724      	adds	r7, #36	; 0x24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69da      	ldr	r2, [r3, #28]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e001      	b.n	8000fe4 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b087      	sub	sp, #28
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800101c:	2201      	movs	r2, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d105      	bne.n	8001038 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	4013      	ands	r3, r2
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e00d      	b.n	8001054 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d105      	bne.n	800104a <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4013      	ands	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e004      	b.n	8001054 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800105a:	2201      	movs	r2, #1
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4013      	ands	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <USART_GetITStatus+0x8e>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800107a:	2301      	movs	r3, #1
 800107c:	74fb      	strb	r3, [r7, #19]
 800107e:	e001      	b.n	8001084 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001084:	7cfb      	ldrb	r3, [r7, #19]
}
 8001086:	4618      	mov	r0, r3
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	2201      	movs	r2, #1
 80010a6:	fa02 f103 	lsl.w	r1, r2, r3
 80010aa:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <NVIC_EnableIRQ+0x30>)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4619      	mov	r1, r3
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <uart_put_char+0x30>)
 80010da:	f7ff ff1d 	bl	8000f18 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80010de:	bf00      	nop
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <uart_put_char+0x30>)
 80010e4:	f7ff ff6c 	bl	8000fc0 <USART_GetFlagStatus>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f8      	beq.n	80010e0 <uart_put_char+0x18>
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40004400 	.word	0x40004400

080010fc <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e012      	b.n	8001136 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b0a      	cmp	r3, #10
 800111a:	d102      	bne.n	8001122 <_write_r+0x26>
            uart_put_char('\r');
 800111c:	200d      	movs	r0, #13
 800111e:	f7ff ffd3 	bl	80010c8 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ffcc 	bl	80010c8 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	dbe8      	blt.n	8001110 <_write_r+0x14>
    }

    return len;
 800113e:	683b      	ldr	r3, [r7, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 800114c:	4915      	ldr	r1, [pc, #84]	; (80011a4 <USART2_IRQHandler+0x5c>)
 800114e:	4816      	ldr	r0, [pc, #88]	; (80011a8 <USART2_IRQHandler+0x60>)
 8001150:	f7ff ff4f 	bl	8000ff2 <USART_GetITStatus>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d021      	beq.n	800119e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <USART2_IRQHandler+0x60>)
 800115c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800115e:	b299      	uxth	r1, r3
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <USART2_IRQHandler+0x64>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	b2d0      	uxtb	r0, r2
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <USART2_IRQHandler+0x64>)
 800116c:	7010      	strb	r0, [r2, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	b2c9      	uxtb	r1, r1
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <USART2_IRQHandler+0x68>)
 8001174:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <USART2_IRQHandler+0x6c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2bff      	cmp	r3, #255	; 0xff
 800117e:	d107      	bne.n	8001190 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <USART2_IRQHandler+0x70>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <USART2_IRQHandler+0x70>)
 800118c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800118e:	e006      	b.n	800119e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <USART2_IRQHandler+0x6c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <USART2_IRQHandler+0x6c>)
 800119c:	701a      	strb	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	00050105 	.word	0x00050105
 80011a8:	40004400 	.word	0x40004400
 80011ac:	200001ac 	.word	0x200001ac
 80011b0:	200000ac 	.word	0x200000ac
 80011b4:	200001ae 	.word	0x200001ae
 80011b8:	200001ad 	.word	0x200001ad

080011bc <uart_clear>:

void uart_clear(){
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
    UART_START_IDX = 0;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <uart_clear+0x20>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
    UART_END_IDX = 0;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <uart_clear+0x24>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
    UART_COUNT = 0;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <uart_clear+0x28>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	200001ad 	.word	0x200001ad
 80011e0:	200001ac 	.word	0x200001ac
 80011e4:	200001ae 	.word	0x200001ae

080011e8 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	; 0x50
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80011f0:	4b86      	ldr	r3, [pc, #536]	; (800140c <uart_init+0x224>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fdaf 	bl	8002d5c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80011fe:	4b83      	ldr	r3, [pc, #524]	; (800140c <uart_init+0x224>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fda8 	bl	8002d5c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 800120c:	4b80      	ldr	r3, [pc, #512]	; (8001410 <uart_init+0x228>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	4a7f      	ldr	r2, [pc, #508]	; (8001410 <uart_init+0x228>)
 8001212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001216:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001218:	4b7d      	ldr	r3, [pc, #500]	; (8001410 <uart_init+0x228>)
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	4a7c      	ldr	r2, [pc, #496]	; (8001410 <uart_init+0x228>)
 800121e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001222:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800122e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001232:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800123e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001242:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800124e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001252:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800125e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001262:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800126e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001272:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800127e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001282:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001288:	889b      	ldrh	r3, [r3, #4]
 800128a:	b29b      	uxth	r3, r3
 800128c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001290:	f023 030c 	bic.w	r3, r3, #12
 8001294:	b29b      	uxth	r3, r3
 8001296:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001298:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800129c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a0:	8892      	ldrh	r2, [r2, #4]
 80012a2:	b292      	uxth	r2, r2
 80012a4:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80012a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012b4:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80012b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012c0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80012c4:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80012c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012d4:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80012d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012e0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80012e4:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <uart_init+0x22c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <uart_init+0x22c>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80012f2:	4b48      	ldr	r3, [pc, #288]	; (8001414 <uart_init+0x22c>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a47      	ldr	r2, [pc, #284]	; (8001414 <uart_init+0x22c>)
 80012f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012fc:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80012fe:	4b45      	ldr	r3, [pc, #276]	; (8001414 <uart_init+0x22c>)
 8001300:	4a44      	ldr	r2, [pc, #272]	; (8001414 <uart_init+0x22c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <uart_init+0x22c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a42      	ldr	r2, [pc, #264]	; (8001414 <uart_init+0x22c>)
 800130c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001310:	f023 030c 	bic.w	r3, r3, #12
 8001314:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <uart_init+0x22c>)
 8001318:	4a3e      	ldr	r2, [pc, #248]	; (8001414 <uart_init+0x22c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <uart_init+0x22c>)
 8001320:	4a3c      	ldr	r2, [pc, #240]	; (8001414 <uart_init+0x22c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <uart_init+0x22c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a3a      	ldr	r2, [pc, #232]	; (8001414 <uart_init+0x22c>)
 800132c:	f043 030c 	orr.w	r3, r3, #12
 8001330:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <uart_init+0x22c>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4a37      	ldr	r2, [pc, #220]	; (8001414 <uart_init+0x22c>)
 8001338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800133c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <uart_init+0x22c>)
 8001340:	4a34      	ldr	r2, [pc, #208]	; (8001414 <uart_init+0x22c>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	64fb      	str	r3, [r7, #76]	; 0x4c
 800134a:	2300      	movs	r3, #0
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
 800134e:	2300      	movs	r3, #0
 8001350:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fbca 	bl	8000af0 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800135c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <uart_init+0x22c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d010      	beq.n	800138e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 800136c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800136e:	005a      	lsls	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	fb01 f202 	mul.w	r2, r1, r2
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
 800138c:	e00d      	b.n	80013aa <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800138e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	fbb3 f2f2 	udiv	r2, r3, r2
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	fb01 f202 	mul.w	r2, r1, r2
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d302      	bcc.n	80013ba <uart_init+0x1d2>
        divider++;
 80013b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b6:	3301      	adds	r3, #1
 80013b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <uart_init+0x22c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80013c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c8:	085b      	lsrs	r3, r3, #1
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80013d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013d2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80013d6:	4013      	ands	r3, r2
 80013d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013da:	4313      	orrs	r3, r2
 80013dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <uart_init+0x22c>)
 80013e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013e2:	b292      	uxth	r2, r2
 80013e4:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <uart_init+0x22c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <uart_init+0x22c>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80013f2:	2201      	movs	r2, #1
 80013f4:	4908      	ldr	r1, [pc, #32]	; (8001418 <uart_init+0x230>)
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <uart_init+0x22c>)
 80013f8:	f7ff fda0 	bl	8000f3c <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 80013fc:	2026      	movs	r0, #38	; 0x26
 80013fe:	f7ff fe49 	bl	8001094 <NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3750      	adds	r7, #80	; 0x50
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000002c 	.word	0x2000002c
 8001410:	40021000 	.word	0x40021000
 8001414:	40004400 	.word	0x40004400
 8001418:	00050105 	.word	0x00050105

0800141c <intiJoystick>:
#include <LED.h>
#include "stm32f30x_conf.h" // STM32 config
#include "ansi.h"
#include "joystick.h"

void intiJoystick(){
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8001420:	4b46      	ldr	r3, [pc, #280]	; (800153c <intiJoystick+0x120>)
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	4a45      	ldr	r2, [pc, #276]	; (800153c <intiJoystick+0x120>)
 8001426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 800142c:	4b43      	ldr	r3, [pc, #268]	; (800153c <intiJoystick+0x120>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	4a42      	ldr	r2, [pc, #264]	; (800153c <intiJoystick+0x120>)
 8001432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001436:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 8001438:	4b40      	ldr	r3, [pc, #256]	; (800153c <intiJoystick+0x120>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	4a3f      	ldr	r2, [pc, #252]	; (800153c <intiJoystick+0x120>)
 800143e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001442:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001444:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <intiJoystick+0x124>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a3d      	ldr	r2, [pc, #244]	; (8001540 <intiJoystick+0x124>)
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <intiJoystick+0x124>)
 8001452:	4a3b      	ldr	r2, [pc, #236]	; (8001540 <intiJoystick+0x124>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001458:	4b39      	ldr	r3, [pc, #228]	; (8001540 <intiJoystick+0x124>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a38      	ldr	r2, [pc, #224]	; (8001540 <intiJoystick+0x124>)
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <intiJoystick+0x124>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4a35      	ldr	r2, [pc, #212]	; (8001540 <intiJoystick+0x124>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8001470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800147a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800147e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 8001480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001484:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 800148c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800149a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 800149c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014aa:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <intiJoystick+0x128>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a24      	ldr	r2, [pc, #144]	; (8001544 <intiJoystick+0x128>)
 80014b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014b6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <intiJoystick+0x128>)
 80014ba:	4a22      	ldr	r2, [pc, #136]	; (8001544 <intiJoystick+0x128>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <intiJoystick+0x128>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <intiJoystick+0x128>)
 80014c6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014ca:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <intiJoystick+0x128>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <intiJoystick+0x128>)
 80014d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d6:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <intiJoystick+0x124>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a18      	ldr	r2, [pc, #96]	; (8001540 <intiJoystick+0x124>)
 80014de:	f023 030c 	bic.w	r3, r3, #12
 80014e2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <intiJoystick+0x124>)
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <intiJoystick+0x124>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <intiJoystick+0x124>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a13      	ldr	r2, [pc, #76]	; (8001540 <intiJoystick+0x124>)
 80014f2:	f023 030c 	bic.w	r3, r3, #12
 80014f6:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <intiJoystick+0x124>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4a10      	ldr	r2, [pc, #64]	; (8001540 <intiJoystick+0x124>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <intiJoystick+0x128>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <intiJoystick+0x128>)
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <intiJoystick+0x128>)
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <intiJoystick+0x128>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <intiJoystick+0x128>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4a09      	ldr	r2, [pc, #36]	; (8001544 <intiJoystick+0x128>)
 800151e:	f023 0303 	bic.w	r3, r3, #3
 8001522:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <intiJoystick+0x128>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <intiJoystick+0x128>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	48000800 	.word	0x48000800
 8001544:	48000400 	.word	0x48000400

08001548 <readJoystick>:


void readJoystick(){
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
	uint8_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - right
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <readJoystick+0xac>)
 8001550:	8a1b      	ldrh	r3, [r3, #16]
 8001552:	b29b      	uxth	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	70fb      	strb	r3, [r7, #3]
	uint8_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 800155c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001560:	8a1b      	ldrh	r3, [r3, #16]
 8001562:	b29b      	uxth	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	71fb      	strb	r3, [r7, #7]
	uint8_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - center
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <readJoystick+0xb0>)
 800156e:	8a1b      	ldrh	r3, [r3, #16]
 8001570:	b29b      	uxth	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	71bb      	strb	r3, [r7, #6]
	uint8_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - left
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <readJoystick+0xac>)
 800157c:	8a1b      	ldrh	r3, [r3, #16]
 800157e:	b29b      	uxth	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	717b      	strb	r3, [r7, #5]
	uint8_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - down
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <readJoystick+0xb0>)
 800158a:	8a1b      	ldrh	r3, [r3, #16]
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	713b      	strb	r3, [r7, #4]


	if(b){b = 1;}
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <readJoystick+0x58>
 800159c:	2301      	movs	r3, #1
 800159e:	71fb      	strb	r3, [r7, #7]
	if(c){c = 1;}
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <readJoystick+0x62>
 80015a6:	2301      	movs	r3, #1
 80015a8:	71bb      	strb	r3, [r7, #6]
	if(d){d = 1;}
 80015aa:	797b      	ldrb	r3, [r7, #5]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <readJoystick+0x6c>
 80015b0:	2301      	movs	r3, #1
 80015b2:	717b      	strb	r3, [r7, #5]
	if(e){e = 1;}
 80015b4:	793b      	ldrb	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <readJoystick+0x76>
 80015ba:	2301      	movs	r3, #1
 80015bc:	713b      	strb	r3, [r7, #4]

	joy.right 	= a;
 80015be:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <readJoystick+0xb4>)
 80015c4:	70da      	strb	r2, [r3, #3]
	joy.up 		= b;
 80015c6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <readJoystick+0xb4>)
 80015cc:	701a      	strb	r2, [r3, #0]
	joy.center	= c;
 80015ce:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <readJoystick+0xb4>)
 80015d4:	711a      	strb	r2, [r3, #4]
	joy.left	= d;
 80015d6:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <readJoystick+0xb4>)
 80015dc:	709a      	strb	r2, [r3, #2]
	joy.down 	= e;
 80015de:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <readJoystick+0xb4>)
 80015e4:	705a      	strb	r2, [r3, #1]
	if(0){
	gotoxy(1,8);
	printf("Joys: %d%d%d%d%d",a,b,c,d,e);
	}

}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	48000800 	.word	0x48000800
 80015f8:	48000400 	.word	0x48000400
 80015fc:	200001e8 	.word	0x200001e8

08001600 <initLed>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi.h"

void initLed(){
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8001604:	4b48      	ldr	r3, [pc, #288]	; (8001728 <initLed+0x128>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	4a47      	ldr	r2, [pc, #284]	; (8001728 <initLed+0x128>)
 800160a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160e:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8001610:	4b45      	ldr	r3, [pc, #276]	; (8001728 <initLed+0x128>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4a44      	ldr	r2, [pc, #272]	; (8001728 <initLed+0x128>)
 8001616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 800161c:	4b42      	ldr	r3, [pc, #264]	; (8001728 <initLed+0x128>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	4a41      	ldr	r2, [pc, #260]	; (8001728 <initLed+0x128>)
 8001622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001626:	6153      	str	r3, [r2, #20]

	// Set pin PA9 to output - BLUE LED
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2)); // Clear speed register
 8001628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001632:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001636:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2)); // set speed register
 8001638:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001642:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001646:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOA->OTYPER &= ~(0x0001 << (9 * 1)); // Clear output type register
 8001648:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800164c:	889b      	ldrh	r3, [r3, #4]
 800164e:	b29b      	uxth	r3, r3
 8001650:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001658:	b29b      	uxth	r3, r3
 800165a:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9)); // Set output type register
 800165c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001664:	8892      	ldrh	r2, [r2, #4]
 8001666:	b292      	uxth	r2, r2
 8001668:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOA->MODER &= ~(0x00000003 << (9 * 2)); // Clear mode register
 800166a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001674:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001678:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2)); // Set mode register
 800167a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PC7 to output - GREEN LED
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2)); // Clear speed register
 800168a:	4b28      	ldr	r3, [pc, #160]	; (800172c <initLed+0x12c>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4a27      	ldr	r2, [pc, #156]	; (800172c <initLed+0x12c>)
 8001690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001694:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2)); // set speed register
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <initLed+0x12c>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <initLed+0x12c>)
 800169c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a0:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOC->OTYPER &= ~(0x0001 << (7 * 1)); // Clear output type register
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <initLed+0x12c>)
 80016a4:	889b      	ldrh	r3, [r3, #4]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4a20      	ldr	r2, [pc, #128]	; (800172c <initLed+0x12c>)
 80016aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7)); // Set output type register
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <initLed+0x12c>)
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <initLed+0x12c>)
 80016b6:	8892      	ldrh	r2, [r2, #4]
 80016b8:	b292      	uxth	r2, r2
 80016ba:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOC->MODER &= ~(0x00000003 << (7 * 2)); // Clear mode register
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <initLed+0x12c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1a      	ldr	r2, [pc, #104]	; (800172c <initLed+0x12c>)
 80016c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016c6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2)); // Set mode register
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <initLed+0x12c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <initLed+0x12c>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d2:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PB4 to output - RED LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2)); // Clear speed register
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <initLed+0x130>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <initLed+0x130>)
 80016da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016de:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2)); // set speed register
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <initLed+0x130>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a12      	ldr	r2, [pc, #72]	; (8001730 <initLed+0x130>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (4 * 1)); // Clear output type register
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <initLed+0x130>)
 80016ee:	889b      	ldrh	r3, [r3, #4]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <initLed+0x130>)
 80016f4:	f023 0310 	bic.w	r3, r3, #16
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4)); // Set output type register
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <initLed+0x130>)
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <initLed+0x130>)
 8001700:	8892      	ldrh	r2, [r2, #4]
 8001702:	b292      	uxth	r2, r2
 8001704:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <initLed+0x130>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <initLed+0x130>)
 800170c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001710:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2)); // Set mode register
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <initLed+0x130>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a06      	ldr	r2, [pc, #24]	; (8001730 <initLed+0x130>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000
 800172c:	48000800 	.word	0x48000800
 8001730:	48000400 	.word	0x48000400

08001734 <writeLed>:


void writeLed(){
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

	// Right - Blue
	if(led.blu){
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <writeLed+0x94>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00a      	beq.n	8001756 <writeLed+0x22>
		GPIOA->ODR &= ~(0x0001 << 9); //Set pin PA9 to low - on
 8001740:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001744:	8a9b      	ldrh	r3, [r3, #20]
 8001746:	b29b      	uxth	r3, r3
 8001748:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800174c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001750:	b29b      	uxth	r3, r3
 8001752:	8293      	strh	r3, [r2, #20]
 8001754:	e009      	b.n	800176a <writeLed+0x36>
	}
	else{
		GPIOA->ODR |= (0x0001 << 9); //Set pin PA9 to high - off
 8001756:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800175a:	8a9b      	ldrh	r3, [r3, #20]
 800175c:	b29b      	uxth	r3, r3
 800175e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001766:	b29b      	uxth	r3, r3
 8001768:	8293      	strh	r3, [r2, #20]
	}


	// Up - Green
	if(led.gre){
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <writeLed+0x94>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <writeLed+0x50>
		GPIOC->ODR &= ~(0x0001 << 7); //Set pin PC7 to low - on
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <writeLed+0x98>)
 8001774:	8a9b      	ldrh	r3, [r3, #20]
 8001776:	b29b      	uxth	r3, r3
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <writeLed+0x98>)
 800177a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800177e:	b29b      	uxth	r3, r3
 8001780:	8293      	strh	r3, [r2, #20]
 8001782:	e007      	b.n	8001794 <writeLed+0x60>
	}
	else{
		GPIOC->ODR |= (0x0001 << 7); //Set pin PC7 to high - off
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <writeLed+0x98>)
 8001786:	8a9b      	ldrh	r3, [r3, #20]
 8001788:	b29b      	uxth	r3, r3
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <writeLed+0x98>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	b29b      	uxth	r3, r3
 8001792:	8293      	strh	r3, [r2, #20]
	}


	// Left - Red
	if(led.red){
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <writeLed+0x94>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <writeLed+0x7a>
		GPIOB->ODR &= ~(0x0001 << 4); //Set pin PB4 to low - on
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <writeLed+0x9c>)
 800179e:	8a9b      	ldrh	r3, [r3, #20]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <writeLed+0x9c>)
 80017a4:	f023 0310 	bic.w	r3, r3, #16
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	8293      	strh	r3, [r2, #20]
	}
	else{
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
	}

}
 80017ac:	e007      	b.n	80017be <writeLed+0x8a>
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <writeLed+0x9c>)
 80017b0:	8a9b      	ldrh	r3, [r3, #20]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <writeLed+0x9c>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	8293      	strh	r3, [r2, #20]
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	200001cc 	.word	0x200001cc
 80017cc:	48000800 	.word	0x48000800
 80017d0:	48000400 	.word	0x48000400

080017d4 <windowSmp>:
		printf("%c", btt);
	}
	printf("%c\n", br);
}

void windowSmp(int x1, int y1, int x2, int y2) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b090      	sub	sp, #64	; 0x40
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]

		int tl = 218; 	// ┌
 80017e2:	23da      	movs	r3, #218	; 0xda
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
		int lsd = 180; 	// ┤
 80017e6:	23b4      	movs	r3, #180	; 0xb4
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		int bl = 192;	// └
 80017ea:	23c0      	movs	r3, #192	; 0xc0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
		int wll = 179;	// │
 80017ee:	23b3      	movs	r3, #179	; 0xb3
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
		int btt = 196; 	// ─
 80017f2:	23c4      	movs	r3, #196	; 0xc4
 80017f4:	623b      	str	r3, [r7, #32]
		int tr = 191; 	// ┐
 80017f6:	23bf      	movs	r3, #191	; 0xbf
 80017f8:	61fb      	str	r3, [r7, #28]
		int rsd = 195;	// ├
 80017fa:	23c3      	movs	r3, #195	; 0xc3
 80017fc:	61bb      	str	r3, [r7, #24]
		int br = 217;	// ┘
 80017fe:	23d9      	movs	r3, #217	; 0xd9
 8001800:	617b      	str	r3, [r7, #20]

		//Top ┌──────┐
		gotoxy(x1, y1);
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f891 	bl	800192c <gotoxy>
		printf("%c", tl);
 800180a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800180c:	f001 fa90 	bl	8002d30 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001816:	e005      	b.n	8001824 <windowSmp+0x50>
			printf("%c",btt);
 8001818:	6a38      	ldr	r0, [r7, #32]
 800181a:	f001 fa89 	bl	8002d30 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 800181e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001820:	3301      	adds	r3, #1
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800182a:	429a      	cmp	r2, r3
 800182c:	dbf4      	blt.n	8001818 <windowSmp+0x44>
		}


		printf("%c\n", tr);
 800182e:	69f9      	ldr	r1, [r7, #28]
 8001830:	481d      	ldr	r0, [pc, #116]	; (80018a8 <windowSmp+0xd4>)
 8001832:	f001 fa65 	bl	8002d00 <iprintf>

		//Mid │        │
		for (int i = y1+1; i < y2; i++) {
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3301      	adds	r3, #1
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38
 800183c:	e012      	b.n	8001864 <windowSmp+0x90>
			gotoxy(x1, i);
 800183e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 f873 	bl	800192c <gotoxy>
			printf("%c", wll);
 8001846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001848:	f001 fa72 	bl	8002d30 <putchar>
			gotoxy(x2-1,i);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f86a 	bl	800192c <gotoxy>
			printf("%c", wll);
 8001858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800185a:	f001 fa69 	bl	8002d30 <putchar>
		for (int i = y1+1; i < y2; i++) {
 800185e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001860:	3301      	adds	r3, #1
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
 8001864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbe8      	blt.n	800183e <windowSmp+0x6a>
		}

		//Bottom  └─────────┘
		gotoxy(x1,y2);
 800186c:	6839      	ldr	r1, [r7, #0]
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f85c 	bl	800192c <gotoxy>
		printf("%c", bl);
 8001874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001876:	f001 fa5b 	bl	8002d30 <putchar>
		for (int i=x1; i < x2-2; i++){
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
 800187e:	e005      	b.n	800188c <windowSmp+0xb8>
			printf("%c", btt);
 8001880:	6a38      	ldr	r0, [r7, #32]
 8001882:	f001 fa55 	bl	8002d30 <putchar>
		for (int i=x1; i < x2-2; i++){
 8001886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001888:	3301      	adds	r3, #1
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b02      	subs	r3, #2
 8001890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001892:	429a      	cmp	r2, r3
 8001894:	dbf4      	blt.n	8001880 <windowSmp+0xac>
		}
		printf("%c\n", br);
 8001896:	6979      	ldr	r1, [r7, #20]
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <windowSmp+0xd4>)
 800189a:	f001 fa31 	bl	8002d00 <iprintf>
	}
 800189e:	bf00      	nop
 80018a0:	3740      	adds	r7, #64	; 0x40
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	08003e20 	.word	0x08003e20

080018ac <fgcolor>:
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
	 4        Blue            12       Light Blue
	 5        Purple          13       Light Purple
	 6        Cyan            14       Light Cyan
	 7        Light Gray      15       White
	 */
	uint8_t type = 22;             // normal text
 80018b6:	2316      	movs	r3, #22
 80018b8:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2b07      	cmp	r3, #7
 80018be:	d904      	bls.n	80018ca <fgcolor+0x1e>
		type = 1;                // bold text
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	3b08      	subs	r3, #8
 80018c8:	71fb      	strb	r3, [r7, #7]
	}
	printf("%c[%d;%dm", ESC, type, foreground + 30);
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	331e      	adds	r3, #30
 80018d0:	211b      	movs	r1, #27
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <fgcolor+0x34>)
 80018d4:	f001 fa14 	bl	8002d00 <iprintf>
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	08003e24 	.word	0x08003e24

080018e4 <resetbgcolor>:
		foreground -= 8;
	}
	printf("%c[%d;%d;%dm", ESC, type, foreground + 30, background + 40);
}

void resetbgcolor() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
 80018e8:	211b      	movs	r1, #27
 80018ea:	4802      	ldr	r0, [pc, #8]	; (80018f4 <resetbgcolor+0x10>)
 80018ec:	f001 fa08 	bl	8002d00 <iprintf>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	08003e48 	.word	0x08003e48

080018f8 <clrscr>:

void clrscr() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <clrscr+0x28>)
 80018fe:	211b      	movs	r1, #27
 8001900:	4808      	ldr	r0, [pc, #32]	; (8001924 <clrscr+0x2c>)
 8001902:	f001 f9fd 	bl	8002d00 <iprintf>
	printf("%c[%s", ESC, "3J");
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <clrscr+0x30>)
 8001908:	211b      	movs	r1, #27
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <clrscr+0x2c>)
 800190c:	f001 f9f8 	bl	8002d00 <iprintf>
	resetbgcolor();
 8001910:	f7ff ffe8 	bl	80018e4 <resetbgcolor>

	gotoxy(0, 0);
 8001914:	2100      	movs	r1, #0
 8001916:	2000      	movs	r0, #0
 8001918:	f000 f808 	bl	800192c <gotoxy>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08003e50 	.word	0x08003e50
 8001924:	08003e54 	.word	0x08003e54
 8001928:	08003e5c 	.word	0x08003e5c

0800192c <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	211b      	movs	r1, #27
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <gotoxy+0x20>)
 800193e:	f001 f9df 	bl	8002d00 <iprintf>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	08003e64 	.word	0x08003e64

08001950 <blink>:
		//printf("\x1b[24m");
		printf("%c[%dm", ESC, 22);
	}
}

void blink(int state) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	if (state) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00a      	beq.n	8001974 <blink+0x24>
		//printf("\x1b[5m");
		printf("%c[%dm", ESC, 5);
 800195e:	2205      	movs	r2, #5
 8001960:	211b      	movs	r1, #27
 8001962:	480b      	ldr	r0, [pc, #44]	; (8001990 <blink+0x40>)
 8001964:	f001 f9cc 	bl	8002d00 <iprintf>
		printf("%c[%dm", ESC, 7);
 8001968:	2207      	movs	r2, #7
 800196a:	211b      	movs	r1, #27
 800196c:	4808      	ldr	r0, [pc, #32]	; (8001990 <blink+0x40>)
 800196e:	f001 f9c7 	bl	8002d00 <iprintf>
	} else {
		//printf("\x1b[25m");
		printf("%c[%dm", ESC, 25);
		printf("%c[%dm", ESC, 27);
	}
}
 8001972:	e009      	b.n	8001988 <blink+0x38>
		printf("%c[%dm", ESC, 25);
 8001974:	2219      	movs	r2, #25
 8001976:	211b      	movs	r1, #27
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <blink+0x40>)
 800197a:	f001 f9c1 	bl	8002d00 <iprintf>
		printf("%c[%dm", ESC, 27);
 800197e:	221b      	movs	r2, #27
 8001980:	211b      	movs	r1, #27
 8001982:	4803      	ldr	r0, [pc, #12]	; (8001990 <blink+0x40>)
 8001984:	f001 f9bc 	bl	8002d00 <iprintf>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	08003e30 	.word	0x08003e30

08001994 <NVIC_EnableIRQ>:
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2201      	movs	r2, #1
 80019a6:	fa02 f103 	lsl.w	r1, r2, r3
 80019aa:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <NVIC_EnableIRQ+0x30>)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	095b      	lsrs	r3, r3, #5
 80019b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da0b      	bge.n	80019f4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <NVIC_SetPriority+0x4c>)
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	3b04      	subs	r3, #4
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80019f2:	e009      	b.n	8001a08 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <NVIC_SetPriority+0x50>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <initTimer2>:
#include "ansi.h"
#include "timer.h"
#include "joystick.h"


void initTimer2(){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2;
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <initTimer2+0xd8>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <initTimer2+0xd8>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 	= 0x0000; // Configure timer 2
 8001a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]

	TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 8001a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a42:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 8001a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6213      	str	r3, [r2, #32]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 8001a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a62:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6e:	f023 0303 	bic.w	r3, r3, #3
 8001a72:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 8001a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a82:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8001a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8e:	f023 0308 	bic.w	r3, r3, #8
 8001a92:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9e:	f043 0308 	orr.w	r3, r3, #8
 8001aa2:	61d3      	str	r3, [r2, #28]
	TIM2->CCR3 = RELOAD_VALUE / 2; // Set duty cycle to 50 %
 8001aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001aac:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CR1 	= 0x0001; // Configure timer 2
 8001aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	801a      	strh	r2, [r3, #0]

	TIM2->ARR 	= 0xF9FF; // Set reload value
 8001ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aba:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC 	= 0x0009; // Set prescale value
 8001ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac4:	2209      	movs	r2, #9
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->DIER	|= 0x0001;
 8001ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	60d3      	str	r3, [r2, #12]
	TIM2->SR	= 0x0000;
 8001ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]

	NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	201c      	movs	r0, #28
 8001ae4:	f7ff ff70 	bl	80019c8 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt
 8001ae8:	201c      	movs	r0, #28
 8001aea:	f7ff ff53 	bl	8001994 <NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0


//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM2->SR &= ~0x0001; // Clear interrupt bit
 8001afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	6113      	str	r3, [r2, #16]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <initBuzz>:


void initBuzz(){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	// Set pin PA9 to output - BLUE LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (10 * 2)); // Clear speed register
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <initBuzz+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <initBuzz+0x5c>)
 8001b22:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b26:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (10 * 2)); // set speed register
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <initBuzz+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <initBuzz+0x5c>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b32:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (10 * 1)); // Clear output type register
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <initBuzz+0x5c>)
 8001b36:	889b      	ldrh	r3, [r3, #4]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <initBuzz+0x5c>)
 8001b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (10)); // Set output type register
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <initBuzz+0x5c>)
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <initBuzz+0x5c>)
 8001b48:	8892      	ldrh	r2, [r2, #4]
 8001b4a:	b292      	uxth	r2, r2
 8001b4c:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (10 * 2)); // Clear mode register
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <initBuzz+0x5c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <initBuzz+0x5c>)
 8001b54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b58:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000002 << (10 * 2)); // Set mode register
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <initBuzz+0x5c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <initBuzz+0x5c>)
 8001b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b64:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 8001b66:	2201      	movs	r2, #1
 8001b68:	210a      	movs	r1, #10
 8001b6a:	4802      	ldr	r0, [pc, #8]	; (8001b74 <initBuzz+0x5c>)
 8001b6c:	f7fe ff76 	bl	8000a5c <GPIO_PinAFConfig>

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	48000400 	.word	0x48000400

08001b78 <playTone>:
	//else (buzzTone = 0);
}

char ballin[] = " 2b 2b 2b 2b  3c";

void playTone(char s[]){
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	6078      	str	r0, [r7, #4]
	static int i;

	int length = strlen(s);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe fb25 	bl	80001d0 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	60fb      	str	r3, [r7, #12]

	switch(s[i]){
 8001b8a:	4ba5      	ldr	r3, [pc, #660]	; (8001e20 <playTone+0x2a8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	3b31      	subs	r3, #49	; 0x31
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	f200 8322 	bhi.w	80021e2 <playTone+0x66a>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <playTone+0x2c>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bb9 	.word	0x08001bb9
 8001ba8:	08001ce3 	.word	0x08001ce3
 8001bac:	08001e29 	.word	0x08001e29
 8001bb0:	08001f53 	.word	0x08001f53
 8001bb4:	080020a1 	.word	0x080020a1
	case '1':
		i++;
 8001bb8:	4b99      	ldr	r3, [pc, #612]	; (8001e20 <playTone+0x2a8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a98      	ldr	r2, [pc, #608]	; (8001e20 <playTone+0x2a8>)
 8001bc0:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 8001bc2:	4b97      	ldr	r3, [pc, #604]	; (8001e20 <playTone+0x2a8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3b41      	subs	r3, #65	; 0x41
 8001bd0:	2b26      	cmp	r3, #38	; 0x26
 8001bd2:	f200 8081 	bhi.w	8001cd8 <playTone+0x160>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <playTone+0x64>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001cc9 	.word	0x08001cc9
 8001be0:	08001cd9 	.word	0x08001cd9
 8001be4:	08001c81 	.word	0x08001c81
 8001be8:	08001c91 	.word	0x08001c91
 8001bec:	08001cd9 	.word	0x08001cd9
 8001bf0:	08001ca9 	.word	0x08001ca9
 8001bf4:	08001cb9 	.word	0x08001cb9
 8001bf8:	08001cd9 	.word	0x08001cd9
 8001bfc:	08001cd9 	.word	0x08001cd9
 8001c00:	08001cd9 	.word	0x08001cd9
 8001c04:	08001cd9 	.word	0x08001cd9
 8001c08:	08001cd9 	.word	0x08001cd9
 8001c0c:	08001cd9 	.word	0x08001cd9
 8001c10:	08001cd9 	.word	0x08001cd9
 8001c14:	08001cd9 	.word	0x08001cd9
 8001c18:	08001cd9 	.word	0x08001cd9
 8001c1c:	08001cd9 	.word	0x08001cd9
 8001c20:	08001cd9 	.word	0x08001cd9
 8001c24:	08001cd9 	.word	0x08001cd9
 8001c28:	08001cd9 	.word	0x08001cd9
 8001c2c:	08001cd9 	.word	0x08001cd9
 8001c30:	08001cd9 	.word	0x08001cd9
 8001c34:	08001cd9 	.word	0x08001cd9
 8001c38:	08001cd9 	.word	0x08001cd9
 8001c3c:	08001cd9 	.word	0x08001cd9
 8001c40:	08001cd9 	.word	0x08001cd9
 8001c44:	08001cd9 	.word	0x08001cd9
 8001c48:	08001cd9 	.word	0x08001cd9
 8001c4c:	08001cd9 	.word	0x08001cd9
 8001c50:	08001cd9 	.word	0x08001cd9
 8001c54:	08001cd9 	.word	0x08001cd9
 8001c58:	08001cd9 	.word	0x08001cd9
 8001c5c:	08001cc1 	.word	0x08001cc1
 8001c60:	08001cd1 	.word	0x08001cd1
 8001c64:	08001c79 	.word	0x08001c79
 8001c68:	08001c89 	.word	0x08001c89
 8001c6c:	08001c99 	.word	0x08001c99
 8001c70:	08001ca1 	.word	0x08001ca1
 8001c74:	08001cb1 	.word	0x08001cb1
			case 'c':
				buzzTone = 33;
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <playTone+0x2ac>)
 8001c7a:	2221      	movs	r2, #33	; 0x21
 8001c7c:	601a      	str	r2, [r3, #0]
				break;
 8001c7e:	e02f      	b.n	8001ce0 <playTone+0x168>
			case 'C':
				buzzTone = 35;
 8001c80:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <playTone+0x2ac>)
 8001c82:	2223      	movs	r2, #35	; 0x23
 8001c84:	601a      	str	r2, [r3, #0]
				break;
 8001c86:	e02b      	b.n	8001ce0 <playTone+0x168>

			case 'd':
				buzzTone = 37;
 8001c88:	4b66      	ldr	r3, [pc, #408]	; (8001e24 <playTone+0x2ac>)
 8001c8a:	2225      	movs	r2, #37	; 0x25
 8001c8c:	601a      	str	r2, [r3, #0]
				break;
 8001c8e:	e027      	b.n	8001ce0 <playTone+0x168>
			case 'D':
				buzzTone = 39;
 8001c90:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <playTone+0x2ac>)
 8001c92:	2227      	movs	r2, #39	; 0x27
 8001c94:	601a      	str	r2, [r3, #0]
				break;
 8001c96:	e023      	b.n	8001ce0 <playTone+0x168>

			case 'e':
				buzzTone = 41;
 8001c98:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <playTone+0x2ac>)
 8001c9a:	2229      	movs	r2, #41	; 0x29
 8001c9c:	601a      	str	r2, [r3, #0]
				break;
 8001c9e:	e01f      	b.n	8001ce0 <playTone+0x168>

			case 'f':
				buzzTone = 44;
 8001ca0:	4b60      	ldr	r3, [pc, #384]	; (8001e24 <playTone+0x2ac>)
 8001ca2:	222c      	movs	r2, #44	; 0x2c
 8001ca4:	601a      	str	r2, [r3, #0]
				break;
 8001ca6:	e01b      	b.n	8001ce0 <playTone+0x168>
			case 'F':
				buzzTone = 46;
 8001ca8:	4b5e      	ldr	r3, [pc, #376]	; (8001e24 <playTone+0x2ac>)
 8001caa:	222e      	movs	r2, #46	; 0x2e
 8001cac:	601a      	str	r2, [r3, #0]
				break;
 8001cae:	e017      	b.n	8001ce0 <playTone+0x168>

			case 'g':
				buzzTone = 49;
 8001cb0:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <playTone+0x2ac>)
 8001cb2:	2231      	movs	r2, #49	; 0x31
 8001cb4:	601a      	str	r2, [r3, #0]
				break;
 8001cb6:	e013      	b.n	8001ce0 <playTone+0x168>
			case 'G':
				buzzTone = 52;
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <playTone+0x2ac>)
 8001cba:	2234      	movs	r2, #52	; 0x34
 8001cbc:	601a      	str	r2, [r3, #0]
				break;
 8001cbe:	e00f      	b.n	8001ce0 <playTone+0x168>

			case 'a':
				buzzTone = 55;
 8001cc0:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <playTone+0x2ac>)
 8001cc2:	2237      	movs	r2, #55	; 0x37
 8001cc4:	601a      	str	r2, [r3, #0]
				break;
 8001cc6:	e00b      	b.n	8001ce0 <playTone+0x168>
			case 'A':
				buzzTone = 58;
 8001cc8:	4b56      	ldr	r3, [pc, #344]	; (8001e24 <playTone+0x2ac>)
 8001cca:	223a      	movs	r2, #58	; 0x3a
 8001ccc:	601a      	str	r2, [r3, #0]
				break;
 8001cce:	e007      	b.n	8001ce0 <playTone+0x168>

			case 'b':
				buzzTone = 62;
 8001cd0:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <playTone+0x2ac>)
 8001cd2:	223e      	movs	r2, #62	; 0x3e
 8001cd4:	601a      	str	r2, [r3, #0]
				break;
 8001cd6:	e003      	b.n	8001ce0 <playTone+0x168>
			default:
				buzzTone = 0;
 8001cd8:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <playTone+0x2ac>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
				break;
 8001cde:	bf00      	nop
		}
		break;
 8001ce0:	e283      	b.n	80021ea <playTone+0x672>
	case '2':
		i++;
 8001ce2:	4b4f      	ldr	r3, [pc, #316]	; (8001e20 <playTone+0x2a8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <playTone+0x2a8>)
 8001cea:	6013      	str	r3, [r2, #0]
		printf("%c",s[i]);
 8001cec:	4b4c      	ldr	r3, [pc, #304]	; (8001e20 <playTone+0x2a8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 f819 	bl	8002d30 <putchar>
		switch(s[i]){
 8001cfe:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <playTone+0x2a8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	3b41      	subs	r3, #65	; 0x41
 8001d0c:	2b26      	cmp	r3, #38	; 0x26
 8001d0e:	f200 8081 	bhi.w	8001e14 <playTone+0x29c>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <playTone+0x1a0>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001e05 	.word	0x08001e05
 8001d1c:	08001e15 	.word	0x08001e15
 8001d20:	08001dbd 	.word	0x08001dbd
 8001d24:	08001dcd 	.word	0x08001dcd
 8001d28:	08001e15 	.word	0x08001e15
 8001d2c:	08001de5 	.word	0x08001de5
 8001d30:	08001df5 	.word	0x08001df5
 8001d34:	08001e15 	.word	0x08001e15
 8001d38:	08001e15 	.word	0x08001e15
 8001d3c:	08001e15 	.word	0x08001e15
 8001d40:	08001e15 	.word	0x08001e15
 8001d44:	08001e15 	.word	0x08001e15
 8001d48:	08001e15 	.word	0x08001e15
 8001d4c:	08001e15 	.word	0x08001e15
 8001d50:	08001e15 	.word	0x08001e15
 8001d54:	08001e15 	.word	0x08001e15
 8001d58:	08001e15 	.word	0x08001e15
 8001d5c:	08001e15 	.word	0x08001e15
 8001d60:	08001e15 	.word	0x08001e15
 8001d64:	08001e15 	.word	0x08001e15
 8001d68:	08001e15 	.word	0x08001e15
 8001d6c:	08001e15 	.word	0x08001e15
 8001d70:	08001e15 	.word	0x08001e15
 8001d74:	08001e15 	.word	0x08001e15
 8001d78:	08001e15 	.word	0x08001e15
 8001d7c:	08001e15 	.word	0x08001e15
 8001d80:	08001e15 	.word	0x08001e15
 8001d84:	08001e15 	.word	0x08001e15
 8001d88:	08001e15 	.word	0x08001e15
 8001d8c:	08001e15 	.word	0x08001e15
 8001d90:	08001e15 	.word	0x08001e15
 8001d94:	08001e15 	.word	0x08001e15
 8001d98:	08001dfd 	.word	0x08001dfd
 8001d9c:	08001e0d 	.word	0x08001e0d
 8001da0:	08001db5 	.word	0x08001db5
 8001da4:	08001dc5 	.word	0x08001dc5
 8001da8:	08001dd5 	.word	0x08001dd5
 8001dac:	08001ddd 	.word	0x08001ddd
 8001db0:	08001ded 	.word	0x08001ded
			case 'c':
				buzzTone = 65;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <playTone+0x2ac>)
 8001db6:	2241      	movs	r2, #65	; 0x41
 8001db8:	601a      	str	r2, [r3, #0]
				break;
 8001dba:	e02f      	b.n	8001e1c <playTone+0x2a4>
			case 'C':
				buzzTone = 69;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <playTone+0x2ac>)
 8001dbe:	2245      	movs	r2, #69	; 0x45
 8001dc0:	601a      	str	r2, [r3, #0]
				break;
 8001dc2:	e02b      	b.n	8001e1c <playTone+0x2a4>

			case 'd':
				buzzTone = 73;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <playTone+0x2ac>)
 8001dc6:	2249      	movs	r2, #73	; 0x49
 8001dc8:	601a      	str	r2, [r3, #0]
				break;
 8001dca:	e027      	b.n	8001e1c <playTone+0x2a4>
			case 'D':
				buzzTone = 78;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <playTone+0x2ac>)
 8001dce:	224e      	movs	r2, #78	; 0x4e
 8001dd0:	601a      	str	r2, [r3, #0]
				break;
 8001dd2:	e023      	b.n	8001e1c <playTone+0x2a4>

			case 'e':
				buzzTone = 82;
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <playTone+0x2ac>)
 8001dd6:	2252      	movs	r2, #82	; 0x52
 8001dd8:	601a      	str	r2, [r3, #0]
				break;
 8001dda:	e01f      	b.n	8001e1c <playTone+0x2a4>

			case 'f':
				buzzTone = 87;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <playTone+0x2ac>)
 8001dde:	2257      	movs	r2, #87	; 0x57
 8001de0:	601a      	str	r2, [r3, #0]
				break;
 8001de2:	e01b      	b.n	8001e1c <playTone+0x2a4>
			case 'F':
				buzzTone = 93;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <playTone+0x2ac>)
 8001de6:	225d      	movs	r2, #93	; 0x5d
 8001de8:	601a      	str	r2, [r3, #0]
				break;
 8001dea:	e017      	b.n	8001e1c <playTone+0x2a4>

			case 'g':
				buzzTone = 98;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <playTone+0x2ac>)
 8001dee:	2262      	movs	r2, #98	; 0x62
 8001df0:	601a      	str	r2, [r3, #0]
				break;
 8001df2:	e013      	b.n	8001e1c <playTone+0x2a4>
			case 'G':
				buzzTone = 104;
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <playTone+0x2ac>)
 8001df6:	2268      	movs	r2, #104	; 0x68
 8001df8:	601a      	str	r2, [r3, #0]
				break;
 8001dfa:	e00f      	b.n	8001e1c <playTone+0x2a4>

			case 'a':
				buzzTone = 110;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <playTone+0x2ac>)
 8001dfe:	226e      	movs	r2, #110	; 0x6e
 8001e00:	601a      	str	r2, [r3, #0]
				break;
 8001e02:	e00b      	b.n	8001e1c <playTone+0x2a4>
			case 'A':
				buzzTone = 117;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <playTone+0x2ac>)
 8001e06:	2275      	movs	r2, #117	; 0x75
 8001e08:	601a      	str	r2, [r3, #0]
				break;
 8001e0a:	e007      	b.n	8001e1c <playTone+0x2a4>

			case 'b':
				buzzTone = 123;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <playTone+0x2ac>)
 8001e0e:	227b      	movs	r2, #123	; 0x7b
 8001e10:	601a      	str	r2, [r3, #0]
				break;
 8001e12:	e003      	b.n	8001e1c <playTone+0x2a4>
			default:
				buzzTone = 0;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <playTone+0x2ac>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
				break;
 8001e1a:	bf00      	nop
		}
	break;
 8001e1c:	e1e5      	b.n	80021ea <playTone+0x672>
 8001e1e:	bf00      	nop
 8001e20:	200001b0 	.word	0x200001b0
 8001e24:	200001c4 	.word	0x200001c4

	case '3':
		i++;
 8001e28:	4b9b      	ldr	r3, [pc, #620]	; (8002098 <playTone+0x520>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a9a      	ldr	r2, [pc, #616]	; (8002098 <playTone+0x520>)
 8001e30:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 8001e32:	4b99      	ldr	r3, [pc, #612]	; (8002098 <playTone+0x520>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3b41      	subs	r3, #65	; 0x41
 8001e40:	2b26      	cmp	r3, #38	; 0x26
 8001e42:	f200 8081 	bhi.w	8001f48 <playTone+0x3d0>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <playTone+0x2d4>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001f39 	.word	0x08001f39
 8001e50:	08001f49 	.word	0x08001f49
 8001e54:	08001ef1 	.word	0x08001ef1
 8001e58:	08001f01 	.word	0x08001f01
 8001e5c:	08001f49 	.word	0x08001f49
 8001e60:	08001f19 	.word	0x08001f19
 8001e64:	08001f29 	.word	0x08001f29
 8001e68:	08001f49 	.word	0x08001f49
 8001e6c:	08001f49 	.word	0x08001f49
 8001e70:	08001f49 	.word	0x08001f49
 8001e74:	08001f49 	.word	0x08001f49
 8001e78:	08001f49 	.word	0x08001f49
 8001e7c:	08001f49 	.word	0x08001f49
 8001e80:	08001f49 	.word	0x08001f49
 8001e84:	08001f49 	.word	0x08001f49
 8001e88:	08001f49 	.word	0x08001f49
 8001e8c:	08001f49 	.word	0x08001f49
 8001e90:	08001f49 	.word	0x08001f49
 8001e94:	08001f49 	.word	0x08001f49
 8001e98:	08001f49 	.word	0x08001f49
 8001e9c:	08001f49 	.word	0x08001f49
 8001ea0:	08001f49 	.word	0x08001f49
 8001ea4:	08001f49 	.word	0x08001f49
 8001ea8:	08001f49 	.word	0x08001f49
 8001eac:	08001f49 	.word	0x08001f49
 8001eb0:	08001f49 	.word	0x08001f49
 8001eb4:	08001f49 	.word	0x08001f49
 8001eb8:	08001f49 	.word	0x08001f49
 8001ebc:	08001f49 	.word	0x08001f49
 8001ec0:	08001f49 	.word	0x08001f49
 8001ec4:	08001f49 	.word	0x08001f49
 8001ec8:	08001f49 	.word	0x08001f49
 8001ecc:	08001f31 	.word	0x08001f31
 8001ed0:	08001f41 	.word	0x08001f41
 8001ed4:	08001ee9 	.word	0x08001ee9
 8001ed8:	08001ef9 	.word	0x08001ef9
 8001edc:	08001f09 	.word	0x08001f09
 8001ee0:	08001f11 	.word	0x08001f11
 8001ee4:	08001f21 	.word	0x08001f21
			case 'c':
				buzzTone = 131;
 8001ee8:	4b6c      	ldr	r3, [pc, #432]	; (800209c <playTone+0x524>)
 8001eea:	2283      	movs	r2, #131	; 0x83
 8001eec:	601a      	str	r2, [r3, #0]
				break;
 8001eee:	e02f      	b.n	8001f50 <playTone+0x3d8>
			case 'C':
				buzzTone = 139;
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	; (800209c <playTone+0x524>)
 8001ef2:	228b      	movs	r2, #139	; 0x8b
 8001ef4:	601a      	str	r2, [r3, #0]
				break;
 8001ef6:	e02b      	b.n	8001f50 <playTone+0x3d8>

			case 'd':
				buzzTone = 147;
 8001ef8:	4b68      	ldr	r3, [pc, #416]	; (800209c <playTone+0x524>)
 8001efa:	2293      	movs	r2, #147	; 0x93
 8001efc:	601a      	str	r2, [r3, #0]
				break;
 8001efe:	e027      	b.n	8001f50 <playTone+0x3d8>
			case 'D':
				buzzTone = 156;
 8001f00:	4b66      	ldr	r3, [pc, #408]	; (800209c <playTone+0x524>)
 8001f02:	229c      	movs	r2, #156	; 0x9c
 8001f04:	601a      	str	r2, [r3, #0]
				break;
 8001f06:	e023      	b.n	8001f50 <playTone+0x3d8>

			case 'e':
				buzzTone = 165;
 8001f08:	4b64      	ldr	r3, [pc, #400]	; (800209c <playTone+0x524>)
 8001f0a:	22a5      	movs	r2, #165	; 0xa5
 8001f0c:	601a      	str	r2, [r3, #0]
				break;
 8001f0e:	e01f      	b.n	8001f50 <playTone+0x3d8>

			case 'f':
				buzzTone = 175;
 8001f10:	4b62      	ldr	r3, [pc, #392]	; (800209c <playTone+0x524>)
 8001f12:	22af      	movs	r2, #175	; 0xaf
 8001f14:	601a      	str	r2, [r3, #0]
				break;
 8001f16:	e01b      	b.n	8001f50 <playTone+0x3d8>
			case 'F':
				buzzTone = 185;
 8001f18:	4b60      	ldr	r3, [pc, #384]	; (800209c <playTone+0x524>)
 8001f1a:	22b9      	movs	r2, #185	; 0xb9
 8001f1c:	601a      	str	r2, [r3, #0]
				break;
 8001f1e:	e017      	b.n	8001f50 <playTone+0x3d8>

			case 'g':
				buzzTone = 196;
 8001f20:	4b5e      	ldr	r3, [pc, #376]	; (800209c <playTone+0x524>)
 8001f22:	22c4      	movs	r2, #196	; 0xc4
 8001f24:	601a      	str	r2, [r3, #0]
				break;
 8001f26:	e013      	b.n	8001f50 <playTone+0x3d8>
			case 'G':
				buzzTone = 208;
 8001f28:	4b5c      	ldr	r3, [pc, #368]	; (800209c <playTone+0x524>)
 8001f2a:	22d0      	movs	r2, #208	; 0xd0
 8001f2c:	601a      	str	r2, [r3, #0]
				break;
 8001f2e:	e00f      	b.n	8001f50 <playTone+0x3d8>

			case 'a':
				buzzTone = 220;
 8001f30:	4b5a      	ldr	r3, [pc, #360]	; (800209c <playTone+0x524>)
 8001f32:	22dc      	movs	r2, #220	; 0xdc
 8001f34:	601a      	str	r2, [r3, #0]
				break;
 8001f36:	e00b      	b.n	8001f50 <playTone+0x3d8>
			case 'A':
				buzzTone = 233;
 8001f38:	4b58      	ldr	r3, [pc, #352]	; (800209c <playTone+0x524>)
 8001f3a:	22e9      	movs	r2, #233	; 0xe9
 8001f3c:	601a      	str	r2, [r3, #0]
				break;
 8001f3e:	e007      	b.n	8001f50 <playTone+0x3d8>

			case 'b':
				buzzTone = 247;
 8001f40:	4b56      	ldr	r3, [pc, #344]	; (800209c <playTone+0x524>)
 8001f42:	22f7      	movs	r2, #247	; 0xf7
 8001f44:	601a      	str	r2, [r3, #0]
				break;
 8001f46:	e003      	b.n	8001f50 <playTone+0x3d8>
			default:
				buzzTone = 0;
 8001f48:	4b54      	ldr	r3, [pc, #336]	; (800209c <playTone+0x524>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
				break;
 8001f4e:	bf00      	nop
		}
		break;
 8001f50:	e14b      	b.n	80021ea <playTone+0x672>

	case '4':
		i++;
 8001f52:	4b51      	ldr	r3, [pc, #324]	; (8002098 <playTone+0x520>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a4f      	ldr	r2, [pc, #316]	; (8002098 <playTone+0x520>)
 8001f5a:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 8001f5c:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <playTone+0x520>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	3b41      	subs	r3, #65	; 0x41
 8001f6a:	2b26      	cmp	r3, #38	; 0x26
 8001f6c:	f200 808e 	bhi.w	800208c <playTone+0x514>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <playTone+0x400>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08002079 	.word	0x08002079
 8001f7c:	0800208d 	.word	0x0800208d
 8001f80:	0800201f 	.word	0x0800201f
 8001f84:	08002033 	.word	0x08002033
 8001f88:	0800208d 	.word	0x0800208d
 8001f8c:	08002051 	.word	0x08002051
 8001f90:	08002065 	.word	0x08002065
 8001f94:	0800208d 	.word	0x0800208d
 8001f98:	0800208d 	.word	0x0800208d
 8001f9c:	0800208d 	.word	0x0800208d
 8001fa0:	0800208d 	.word	0x0800208d
 8001fa4:	0800208d 	.word	0x0800208d
 8001fa8:	0800208d 	.word	0x0800208d
 8001fac:	0800208d 	.word	0x0800208d
 8001fb0:	0800208d 	.word	0x0800208d
 8001fb4:	0800208d 	.word	0x0800208d
 8001fb8:	0800208d 	.word	0x0800208d
 8001fbc:	0800208d 	.word	0x0800208d
 8001fc0:	0800208d 	.word	0x0800208d
 8001fc4:	0800208d 	.word	0x0800208d
 8001fc8:	0800208d 	.word	0x0800208d
 8001fcc:	0800208d 	.word	0x0800208d
 8001fd0:	0800208d 	.word	0x0800208d
 8001fd4:	0800208d 	.word	0x0800208d
 8001fd8:	0800208d 	.word	0x0800208d
 8001fdc:	0800208d 	.word	0x0800208d
 8001fe0:	0800208d 	.word	0x0800208d
 8001fe4:	0800208d 	.word	0x0800208d
 8001fe8:	0800208d 	.word	0x0800208d
 8001fec:	0800208d 	.word	0x0800208d
 8001ff0:	0800208d 	.word	0x0800208d
 8001ff4:	0800208d 	.word	0x0800208d
 8001ff8:	0800206f 	.word	0x0800206f
 8001ffc:	08002083 	.word	0x08002083
 8002000:	08002015 	.word	0x08002015
 8002004:	08002029 	.word	0x08002029
 8002008:	0800203d 	.word	0x0800203d
 800200c:	08002047 	.word	0x08002047
 8002010:	0800205b 	.word	0x0800205b
			case 'c':
				buzzTone = 262;
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <playTone+0x524>)
 8002016:	f44f 7283 	mov.w	r2, #262	; 0x106
 800201a:	601a      	str	r2, [r3, #0]
				break;
 800201c:	e03a      	b.n	8002094 <playTone+0x51c>
			case 'C':
				buzzTone = 277;
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <playTone+0x524>)
 8002020:	f240 1215 	movw	r2, #277	; 0x115
 8002024:	601a      	str	r2, [r3, #0]
				break;
 8002026:	e035      	b.n	8002094 <playTone+0x51c>

			case 'd':
				buzzTone = 294;
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <playTone+0x524>)
 800202a:	f44f 7293 	mov.w	r2, #294	; 0x126
 800202e:	601a      	str	r2, [r3, #0]
				break;
 8002030:	e030      	b.n	8002094 <playTone+0x51c>
			case 'D':
				buzzTone = 311;
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <playTone+0x524>)
 8002034:	f240 1237 	movw	r2, #311	; 0x137
 8002038:	601a      	str	r2, [r3, #0]
				break;
 800203a:	e02b      	b.n	8002094 <playTone+0x51c>

			case 'e':
				buzzTone = 330;
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <playTone+0x524>)
 800203e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8002042:	601a      	str	r2, [r3, #0]
				break;
 8002044:	e026      	b.n	8002094 <playTone+0x51c>

			case 'f':
				buzzTone = 349;
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <playTone+0x524>)
 8002048:	f240 125d 	movw	r2, #349	; 0x15d
 800204c:	601a      	str	r2, [r3, #0]
				break;
 800204e:	e021      	b.n	8002094 <playTone+0x51c>
			case 'F':
				buzzTone = 370;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <playTone+0x524>)
 8002052:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8002056:	601a      	str	r2, [r3, #0]
				break;
 8002058:	e01c      	b.n	8002094 <playTone+0x51c>

			case 'g':
				buzzTone = 392;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <playTone+0x524>)
 800205c:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8002060:	601a      	str	r2, [r3, #0]
				break;
 8002062:	e017      	b.n	8002094 <playTone+0x51c>
			case 'G':
				buzzTone = 415;
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <playTone+0x524>)
 8002066:	f240 129f 	movw	r2, #415	; 0x19f
 800206a:	601a      	str	r2, [r3, #0]
				break;
 800206c:	e012      	b.n	8002094 <playTone+0x51c>

			case 'a':
				buzzTone = 440;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <playTone+0x524>)
 8002070:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8002074:	601a      	str	r2, [r3, #0]
				break;
 8002076:	e00d      	b.n	8002094 <playTone+0x51c>
			case 'A':
				buzzTone = 466;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <playTone+0x524>)
 800207a:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 800207e:	601a      	str	r2, [r3, #0]
				break;
 8002080:	e008      	b.n	8002094 <playTone+0x51c>

			case 'b':
				buzzTone = 494;
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <playTone+0x524>)
 8002084:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8002088:	601a      	str	r2, [r3, #0]
				break;
 800208a:	e003      	b.n	8002094 <playTone+0x51c>
			default:
				buzzTone = 0;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <playTone+0x524>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
				break;
 8002092:	bf00      	nop
		}
		break;
 8002094:	e0a9      	b.n	80021ea <playTone+0x672>
 8002096:	bf00      	nop
 8002098:	200001b0 	.word	0x200001b0
 800209c:	200001c4 	.word	0x200001c4

	case '5':
		i++;
 80020a0:	4b6c      	ldr	r3, [pc, #432]	; (8002254 <playTone+0x6dc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a6b      	ldr	r2, [pc, #428]	; (8002254 <playTone+0x6dc>)
 80020a8:	6013      	str	r3, [r2, #0]
		switch(s[i]){
 80020aa:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <playTone+0x6dc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	3b41      	subs	r3, #65	; 0x41
 80020b8:	2b26      	cmp	r3, #38	; 0x26
 80020ba:	f200 808d 	bhi.w	80021d8 <playTone+0x660>
 80020be:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <playTone+0x54c>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080021c5 	.word	0x080021c5
 80020c8:	080021d9 	.word	0x080021d9
 80020cc:	0800216b 	.word	0x0800216b
 80020d0:	0800217f 	.word	0x0800217f
 80020d4:	080021d9 	.word	0x080021d9
 80020d8:	0800219d 	.word	0x0800219d
 80020dc:	080021b1 	.word	0x080021b1
 80020e0:	080021d9 	.word	0x080021d9
 80020e4:	080021d9 	.word	0x080021d9
 80020e8:	080021d9 	.word	0x080021d9
 80020ec:	080021d9 	.word	0x080021d9
 80020f0:	080021d9 	.word	0x080021d9
 80020f4:	080021d9 	.word	0x080021d9
 80020f8:	080021d9 	.word	0x080021d9
 80020fc:	080021d9 	.word	0x080021d9
 8002100:	080021d9 	.word	0x080021d9
 8002104:	080021d9 	.word	0x080021d9
 8002108:	080021d9 	.word	0x080021d9
 800210c:	080021d9 	.word	0x080021d9
 8002110:	080021d9 	.word	0x080021d9
 8002114:	080021d9 	.word	0x080021d9
 8002118:	080021d9 	.word	0x080021d9
 800211c:	080021d9 	.word	0x080021d9
 8002120:	080021d9 	.word	0x080021d9
 8002124:	080021d9 	.word	0x080021d9
 8002128:	080021d9 	.word	0x080021d9
 800212c:	080021d9 	.word	0x080021d9
 8002130:	080021d9 	.word	0x080021d9
 8002134:	080021d9 	.word	0x080021d9
 8002138:	080021d9 	.word	0x080021d9
 800213c:	080021d9 	.word	0x080021d9
 8002140:	080021d9 	.word	0x080021d9
 8002144:	080021bb 	.word	0x080021bb
 8002148:	080021cf 	.word	0x080021cf
 800214c:	08002161 	.word	0x08002161
 8002150:	08002175 	.word	0x08002175
 8002154:	08002189 	.word	0x08002189
 8002158:	08002193 	.word	0x08002193
 800215c:	080021a7 	.word	0x080021a7
			case 'c':
				buzzTone = 523;
 8002160:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <playTone+0x6e0>)
 8002162:	f240 220b 	movw	r2, #523	; 0x20b
 8002166:	601a      	str	r2, [r3, #0]
				break;
 8002168:	e03a      	b.n	80021e0 <playTone+0x668>
			case 'C':
				buzzTone = 554;
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <playTone+0x6e0>)
 800216c:	f240 222a 	movw	r2, #554	; 0x22a
 8002170:	601a      	str	r2, [r3, #0]
				break;
 8002172:	e035      	b.n	80021e0 <playTone+0x668>

			case 'd':
				buzzTone = 587;
 8002174:	4b38      	ldr	r3, [pc, #224]	; (8002258 <playTone+0x6e0>)
 8002176:	f240 224b 	movw	r2, #587	; 0x24b
 800217a:	601a      	str	r2, [r3, #0]
				break;
 800217c:	e030      	b.n	80021e0 <playTone+0x668>
			case 'D':
				buzzTone = 622;
 800217e:	4b36      	ldr	r3, [pc, #216]	; (8002258 <playTone+0x6e0>)
 8002180:	f240 226e 	movw	r2, #622	; 0x26e
 8002184:	601a      	str	r2, [r3, #0]
				break;
 8002186:	e02b      	b.n	80021e0 <playTone+0x668>

			case 'e':
				buzzTone = 659;
 8002188:	4b33      	ldr	r3, [pc, #204]	; (8002258 <playTone+0x6e0>)
 800218a:	f240 2293 	movw	r2, #659	; 0x293
 800218e:	601a      	str	r2, [r3, #0]
				break;
 8002190:	e026      	b.n	80021e0 <playTone+0x668>

			case 'f':
				buzzTone = 698;
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <playTone+0x6e0>)
 8002194:	f240 22ba 	movw	r2, #698	; 0x2ba
 8002198:	601a      	str	r2, [r3, #0]
				break;
 800219a:	e021      	b.n	80021e0 <playTone+0x668>
			case 'F':
				buzzTone = 740;
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <playTone+0x6e0>)
 800219e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80021a2:	601a      	str	r2, [r3, #0]
				break;
 80021a4:	e01c      	b.n	80021e0 <playTone+0x668>

			case 'g':
				buzzTone = 784;
 80021a6:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <playTone+0x6e0>)
 80021a8:	f44f 7244 	mov.w	r2, #784	; 0x310
 80021ac:	601a      	str	r2, [r3, #0]
				break;
 80021ae:	e017      	b.n	80021e0 <playTone+0x668>
			case 'G':
				buzzTone = 831;
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <playTone+0x6e0>)
 80021b2:	f240 323f 	movw	r2, #831	; 0x33f
 80021b6:	601a      	str	r2, [r3, #0]
				break;
 80021b8:	e012      	b.n	80021e0 <playTone+0x668>

			case 'a':
				buzzTone = 880;
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <playTone+0x6e0>)
 80021bc:	f44f 725c 	mov.w	r2, #880	; 0x370
 80021c0:	601a      	str	r2, [r3, #0]
				break;
 80021c2:	e00d      	b.n	80021e0 <playTone+0x668>
			case 'A':
				buzzTone = 932;
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <playTone+0x6e0>)
 80021c6:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80021ca:	601a      	str	r2, [r3, #0]
				break;
 80021cc:	e008      	b.n	80021e0 <playTone+0x668>

			case 'b':
				buzzTone = 988;
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <playTone+0x6e0>)
 80021d0:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 80021d4:	601a      	str	r2, [r3, #0]
				break;
 80021d6:	e003      	b.n	80021e0 <playTone+0x668>
			default:
				buzzTone = 0;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <playTone+0x6e0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
				break;
 80021de:	bf00      	nop
		}
		break;
 80021e0:	e003      	b.n	80021ea <playTone+0x672>

	default:
		buzzTone = 0;
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <playTone+0x6e0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
		break;
 80021e8:	bf00      	nop
	}

	setFreq(buzzTone);
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <playTone+0x6e0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f836 	bl	8002260 <setFreq>
	gotoxy(1,8);
 80021f4:	2108      	movs	r1, #8
 80021f6:	2001      	movs	r0, #1
 80021f8:	f7ff fb98 	bl	800192c <gotoxy>
	printf("Input[%02d]: %c%c, Buzz: %04d | Length: %04d",i, s[i-1], s[i], buzzTone, length);
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <playTone+0x6dc>)
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <playTone+0x6dc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <playTone+0x6dc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461c      	mov	r4, r3
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <playTone+0x6e0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	9201      	str	r2, [sp, #4]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	4623      	mov	r3, r4
 8002228:	4602      	mov	r2, r0
 800222a:	480c      	ldr	r0, [pc, #48]	; (800225c <playTone+0x6e4>)
 800222c:	f000 fd68 	bl	8002d00 <iprintf>

	if (i > length){
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <playTone+0x6dc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	429a      	cmp	r2, r3
 8002238:	da02      	bge.n	8002240 <playTone+0x6c8>
		i = 0;
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <playTone+0x6dc>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
	}

	i++;
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <playTone+0x6dc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a03      	ldr	r2, [pc, #12]	; (8002254 <playTone+0x6dc>)
 8002248:	6013      	str	r3, [r2, #0]

}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}
 8002252:	bf00      	nop
 8002254:	200001b0 	.word	0x200001b0
 8002258:	200001c4 	.word	0x200001c4
 800225c:	08003e70 	.word	0x08003e70

08002260 <setFreq>:




void setFreq(uint16_t freq)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
    // Calculate the new auto-reload value based on the desired frequency
    uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f959 	bl	8000524 <__aeabi_i2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	a11c      	add	r1, pc, #112	; (adr r1, 80022e8 <setFreq+0x88>)
 8002278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800227c:	f7fe fae6 	bl	800084c <__aeabi_ddiv>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <setFreq+0x80>)
 800228e:	f7fe fadd 	bl	800084c <__aeabi_ddiv>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <setFreq+0x84>)
 80022a0:	f7fd fff2 	bl	8000288 <__aeabi_dsub>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fbb6 	bl	8000a1c <__aeabi_d2uiz>
 80022b0:	4603      	mov	r3, r0
 80022b2:	60fb      	str	r3, [r7, #12]

    // Set the new auto-reload value
    TIM2->ARR = reload;
 80022b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Set compare register to maintain 50% duty cycle
    TIM2->CCR3 = reload / 2;
 80022bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	63d3      	str	r3, [r2, #60]	; 0x3c

    // Generate an update event to apply the new settings
    TIM2->EGR |= TIM_EGR_UG;
 80022c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6153      	str	r3, [r2, #20]
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40590000 	.word	0x40590000
 80022e4:	3ff00000 	.word	0x3ff00000
 80022e8:	00000000 	.word	0x00000000
 80022ec:	418e8480 	.word	0x418e8480

080022f0 <main>:
#include "timer.h"
#include "LCD.h"
#include "joystick.h"
#include "asteroid.h"

int main(void) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
	// Setup communication with the PC
	uart_init(112500);
 80022f6:	4816      	ldr	r0, [pc, #88]	; (8002350 <main+0x60>)
 80022f8:	f7fe ff76 	bl	80011e8 <uart_init>

	clrscr();
 80022fc:	f7ff fafc 	bl	80018f8 <clrscr>

	// Setup LEDs
	initLed();
 8002300:	f7ff f97e 	bl	8001600 <initLed>

	// Setup Joystick
	intiJoystick();
 8002304:	f7ff f88a 	bl	800141c <intiJoystick>

	// Setup Timers with Buzzer
	initTimer();
 8002308:	f000 f9f4 	bl	80026f4 <initTimer>
	initTimer2();
 800230c:	f7ff fb86 	bl	8001a1c <initTimer2>
	initBuzz();
 8002310:	f7ff fc02 	bl	8001b18 <initBuzz>
	setFreq(0);
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff ffa3 	bl	8002260 <setFreq>

	refreshRate = 8;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <main+0x64>)
 800231c:	2208      	movs	r2, #8
 800231e:	601a      	str	r2, [r3, #0]
//	char bustin[] = "2d  4d  4C  4d  2A  4d  4C  4d  2a  4d  4C  4d  2G  4d  4C  4d  2g  4d  4C  4d  3f  4d  4C  4d  3C  4d  4C  4d  4C  4d  4C  4d  2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b    3f   3d   3f   3d   3f   3d  3f  3d  3c 3C 3d  3f   3d   3f   3d   3f   3d  3f  3d  3c 3C 2d  2d  2f 2F 2a  3c    2b    2d  2d  2f 2F 2a  3c    2b       ";
//	char ballin[] = "2b 2b 2b 2b  3c   2b 2a   2g 2b   3d 3d 3d 3d 2b  3d 3d 3d 3d 3d 3d 3d 3e   3d 3d 3d 3d 3d 3e   2b 2a   2g 2g   3d 3d 3d 3d 3d 3e   2b 2a   2g 2g 2b 2b 2b 3c 2b 2a 2g 2a  2a 2g 2a  2b   2b 2b 2b 3c 2b 2a 2g 2a  2a 2g 3d  2b   2b 2b 2b 2b 2b 2a 2g 2a  2a 2g 3d  2b   3d 3d 3e  2b 2b 2a  2a 2a 2g 3d  2b   2b 2b 2b 3c 2b 2a 2g 2a 2g 2a 2g 2a  2e      3e 3d 3c 2b 2b 2b 2a 2g 2a  2g    2g 2g 3d 3d 3c 2b 2b  2a 2g 2a  2g   2b 2b 2b 2b 2b 2a 2g 2a  2a 2a 2a 2g 2b   3d 3d 3d 3d 3d 3d 2b 2a 2a 2a 2a 2a 2g 2b  2g  3d 3d 3d 3d 3d 3d 3e 2b 2a 2a 2a 2g 2b  2g  3d 3d 3d 3d 3d 3d 3e 2b 2b 2a 2a 2g 2b  2g   2b 2b 2b 3d 3d 2a   2a 2a 2g 2b  2e    3d 3d 3e 2b 2b   3d 3d 3d 3e  2b  3d  3d 2b 3d 3d 3d 2b 2a 2a 2a 2g 2b  2g        3e  2b 2b 2b 2b 2b  2g  3d 3d 3d 3d 3d 3d 3e 2b 2a 2a 2a 2g 2b  2g    3d  3c 2b 2b 2a 2a 2g 2a  2b   3d 3d 3d 3d 2b 3d  3d  3c 2b 2a  2b   3d 3d 3d 3d 2b 3d 3d 3d 3c 2b 2a 2a  2b   3d 3d 3d 3e          3c          3c   2b 2a   2g 2b   3d 3d 3d 3d 2b  3d 3d 3d 3d 3d 3d 3d 3e   3d 3d 3d 3d 3d 3e   2b 2a   2g 2g   3d 3d 3d 3d 3d 3e   2b 2a   2g 2g 2b 2b 2b 3c 2b 2a 2g 2a  2a 2g 2a  2b   2b 2b 2b 3c 2b 2a 2g 2a  2a 2g   2b   2b 2b 2b 2b 2b 2a 2g 2a  2a 2g   2b   3d 3d 3e  2b 2b 2a  2a 2a 2g 3d  2b         ";
//
//	char virus[] ="2e  2a  2b  3c      3d  2b      3c  2a          2a 2G 2a 2b 3c 3d 3e    3e    3e    3e    3e            3d  3e  3f        2b    3c  3d  3e        2a    2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c      3d  2b      3c  2a          2a 2G 2a 2b 3c 3d 3e    3e    3e    3e    3e            3d  3e  3f        2b    3c  3d  3e        2a    2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c      3d  2b      3c  2a          2a  2G  2a  2b  2e  2D  2e  2b  2e  3e  3d  3d  3c  2b  2a  2a  2b  3c  2a  2b  2g  2F  2g  2b  2g  3g  3f  3f  3e  3d  3c  3c  3d  3e  3c  3C  2a  3C  3e  3a    3g    3f  3e  3d  3C  3d  2a  2G  2a                            3a  3b  3e  3e      3d 3c 2b  3c  3d  2e  3c  2b  2a  2G  2a  2b  3c  2a  2b     2g  2b  3g                 2b              3A  3g  3A  3e  3a  3g  3a  3f  3a  3e  3a  3D      2b  3D  4c    3D    3b    2d  2e  2f  2g  2f  2e  2d          2e  2a  2b  3c      3d  2b      3c  2a          2a 2G 2a 2b 3c 3d 3e    3e    3e    3e    3e            3d  3e  3f        2b    3c  3d  3e        2a    2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c      3d  2b      3c  2a          2a 2G 2a 2b 3c 3d 3e    3e    3e    3e    3e            3d  3e  3f        2b    3c  3d  3e        2a    2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c      3d  2b      3c  2a          2e  2a  2b  3c    3d  2b    3c  2a      2a  2G  2a  2b  3c  3d  3e    3e  3e    3e  3a      3d  3e  3f      2b  3c  3d  3e      2a    3c    2b                                                       ";

	t.mn = 2;
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <main+0x68>)
 8002322:	2202      	movs	r2, #2
 8002324:	705a      	strb	r2, [r3, #1]
	t.sk = 0;
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <main+0x68>)
 8002328:	2200      	movs	r2, #0
 800232a:	709a      	strb	r2, [r3, #2]
	t.state = 0;
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <main+0x68>)
 800232e:	2200      	movs	r2, #0
 8002330:	711a      	strb	r2, [r3, #4]

//	windowSmp(1,2,43,4);

	// initilize keyboard input:
	int i=0;
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
	uart_clear();
 8002336:	f7fe ff41 	bl	80011bc <uart_clear>
//	helpScreen();
//	GameOver();

	while (1) {

		if (lcdUpdate == 0){
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <main+0x6c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <main+0x56>
//			playTone(virus);

			drawTime();
 8002342:	f000 fa83 	bl	800284c <drawTime>
		}


//		readJoystick();

		timeControll();
 8002346:	f000 fc4d 	bl	8002be4 <timeControll>

		writeLed();
 800234a:	f7ff f9f3 	bl	8001734 <writeLed>
		if (lcdUpdate == 0){
 800234e:	e7f4      	b.n	800233a <main+0x4a>
 8002350:	0001b774 	.word	0x0001b774
 8002354:	200001e4 	.word	0x200001e4
 8002358:	200001f0 	.word	0x200001f0
 800235c:	200001d8 	.word	0x200001d8

08002360 <GameOver>:

	gotoxy(162,6);
	printf("%c",193);
}

void GameOver(){
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
	int score = 101421;
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <GameOver+0x44>)
 8002368:	607b      	str	r3, [r7, #4]
	clrscr();
 800236a:	f7ff fac5 	bl	80018f8 <clrscr>
	windowSmp(1,1,184,58);
 800236e:	233a      	movs	r3, #58	; 0x3a
 8002370:	22b8      	movs	r2, #184	; 0xb8
 8002372:	2101      	movs	r1, #1
 8002374:	2001      	movs	r0, #1
 8002376:	f7ff fa2d 	bl	80017d4 <windowSmp>
	DrawGO();
 800237a:	f000 f819 	bl	80023b0 <DrawGO>

	gotoxy(72,20);
 800237e:	2114      	movs	r1, #20
 8002380:	2048      	movs	r0, #72	; 0x48
 8002382:	f7ff fad3 	bl	800192c <gotoxy>
	printf("Your(s) Score was: %05d",score);
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4807      	ldr	r0, [pc, #28]	; (80023a8 <GameOver+0x48>)
 800238a:	f000 fcb9 	bl	8002d00 <iprintf>
	gotoxy(72,21);
 800238e:	2115      	movs	r1, #21
 8002390:	2048      	movs	r0, #72	; 0x48
 8002392:	f7ff facb 	bl	800192c <gotoxy>
	printf("A new personal Best.");
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <GameOver+0x4c>)
 8002398:	f000 fcb2 	bl	8002d00 <iprintf>

}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	00018c2d 	.word	0x00018c2d
 80023a8:	08004128 	.word	0x08004128
 80023ac:	08004140 	.word	0x08004140

080023b0 <DrawGO>:

void DrawGO(){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
gotoxy(46,5);	printf("  /$$$$$$                                           /$$$$$$                               	");
 80023b4:	2105      	movs	r1, #5
 80023b6:	202e      	movs	r0, #46	; 0x2e
 80023b8:	f7ff fab8 	bl	800192c <gotoxy>
 80023bc:	481a      	ldr	r0, [pc, #104]	; (8002428 <DrawGO+0x78>)
 80023be:	f000 fc9f 	bl	8002d00 <iprintf>
gotoxy(46,6);	printf(" /$$__  $$                                         /$$__  $$                              	");
 80023c2:	2106      	movs	r1, #6
 80023c4:	202e      	movs	r0, #46	; 0x2e
 80023c6:	f7ff fab1 	bl	800192c <gotoxy>
 80023ca:	4818      	ldr	r0, [pc, #96]	; (800242c <DrawGO+0x7c>)
 80023cc:	f000 fc98 	bl	8002d00 <iprintf>
gotoxy(46,7);	printf("| $$  \\__/  /$$$$$$  /$$$$$$/$$$$   /$$$$$$       | $$  \\ $$ /$$    /$$ /$$$$$$   /$$$$$$ 	");
 80023d0:	2107      	movs	r1, #7
 80023d2:	202e      	movs	r0, #46	; 0x2e
 80023d4:	f7ff faaa 	bl	800192c <gotoxy>
 80023d8:	4815      	ldr	r0, [pc, #84]	; (8002430 <DrawGO+0x80>)
 80023da:	f000 fc91 	bl	8002d00 <iprintf>
gotoxy(46,8);	printf("| $$ /$$$$ |____  $$| $$_  $$_  $$ /$$__  $$      | $$  | $$|  $$  /$$//$$__  $$ /$$__  $$	");
 80023de:	2108      	movs	r1, #8
 80023e0:	202e      	movs	r0, #46	; 0x2e
 80023e2:	f7ff faa3 	bl	800192c <gotoxy>
 80023e6:	4813      	ldr	r0, [pc, #76]	; (8002434 <DrawGO+0x84>)
 80023e8:	f000 fc8a 	bl	8002d00 <iprintf>
gotoxy(46,9);	printf("| $$|_  $$  /$$$$$$$| $$ \\ $$ \\ $$| $$$$$$$$      | $$  | $$ \\  $$/$$/| $$$$$$$$| $$  \\__/	");
 80023ec:	2109      	movs	r1, #9
 80023ee:	202e      	movs	r0, #46	; 0x2e
 80023f0:	f7ff fa9c 	bl	800192c <gotoxy>
 80023f4:	4810      	ldr	r0, [pc, #64]	; (8002438 <DrawGO+0x88>)
 80023f6:	f000 fc83 	bl	8002d00 <iprintf>
gotoxy(46,9);	printf("| $$  \\ $$ /$$__  $$| $$ | $$ | $$| $$_____/      | $$  | $$  \\  $$$/ | $$_____/| $$      	");
 80023fa:	2109      	movs	r1, #9
 80023fc:	202e      	movs	r0, #46	; 0x2e
 80023fe:	f7ff fa95 	bl	800192c <gotoxy>
 8002402:	480e      	ldr	r0, [pc, #56]	; (800243c <DrawGO+0x8c>)
 8002404:	f000 fc7c 	bl	8002d00 <iprintf>
gotoxy(46,10);	printf("|  $$$$$$/|  $$$$$$$| $$ | $$ | $$|  $$$$$$$      |  $$$$$$/   \\  $/  |  $$$$$$$| $$      	");
 8002408:	210a      	movs	r1, #10
 800240a:	202e      	movs	r0, #46	; 0x2e
 800240c:	f7ff fa8e 	bl	800192c <gotoxy>
 8002410:	480b      	ldr	r0, [pc, #44]	; (8002440 <DrawGO+0x90>)
 8002412:	f000 fc75 	bl	8002d00 <iprintf>
gotoxy(46,11);	printf(" \\______/  \\_______/|__/ |__/ |__/ \\_______/       \\______/     \\_/    \\_______/|__/      	");
 8002416:	210b      	movs	r1, #11
 8002418:	202e      	movs	r0, #46	; 0x2e
 800241a:	f7ff fa87 	bl	800192c <gotoxy>
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <DrawGO+0x94>)
 8002420:	f000 fc6e 	bl	8002d00 <iprintf>

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	08004158 	.word	0x08004158
 800242c:	080041b4 	.word	0x080041b4
 8002430:	08004210 	.word	0x08004210
 8002434:	0800426c 	.word	0x0800426c
 8002438:	080042c8 	.word	0x080042c8
 800243c:	08004324 	.word	0x08004324
 8002440:	08004380 	.word	0x08004380
 8002444:	080043dc 	.word	0x080043dc

08002448 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	e00a      	b.n	8002470 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800245a:	f3af 8000 	nop.w
 800245e:	4601      	mov	r1, r0
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	60ba      	str	r2, [r7, #8]
 8002466:	b2ca      	uxtb	r2, r1
 8002468:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	dbf0      	blt.n	800245a <_read+0x12>
	}

return len;
 8002478:	687b      	ldr	r3, [r7, #4]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
	return -1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024aa:	605a      	str	r2, [r3, #4]
	return 0;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_isatty>:

int _isatty(int file)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
	return 1;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
	return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <_sbrk+0x50>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <_sbrk+0x16>
		heap_end = &end;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <_sbrk+0x50>)
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <_sbrk+0x54>)
 8002500:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <_sbrk+0x50>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <_sbrk+0x50>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	466a      	mov	r2, sp
 8002512:	4293      	cmp	r3, r2
 8002514:	d907      	bls.n	8002526 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002516:	f000 fbb3 	bl	8002c80 <__errno>
 800251a:	4603      	mov	r3, r0
 800251c:	220c      	movs	r2, #12
 800251e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
 8002524:	e006      	b.n	8002534 <_sbrk+0x48>
	}

	heap_end += incr;
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <_sbrk+0x50>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	4a03      	ldr	r2, [pc, #12]	; (800253c <_sbrk+0x50>)
 8002530:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200001b4 	.word	0x200001b4
 8002540:	20000238 	.word	0x20000238

08002544 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <SystemInit+0x84>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <SystemInit+0x84>)
 8002550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <SystemInit+0x88>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <SystemInit+0x88>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <SystemInit+0x88>)
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4918      	ldr	r1, [pc, #96]	; (80025cc <SystemInit+0x88>)
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <SystemInit+0x8c>)
 800256c:	4013      	ands	r3, r2
 800256e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <SystemInit+0x88>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a15      	ldr	r2, [pc, #84]	; (80025cc <SystemInit+0x88>)
 8002576:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <SystemInit+0x88>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a11      	ldr	r2, [pc, #68]	; (80025cc <SystemInit+0x88>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <SystemInit+0x88>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <SystemInit+0x88>)
 8002592:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002596:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <SystemInit+0x88>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <SystemInit+0x88>)
 800259e:	f023 030f 	bic.w	r3, r3, #15
 80025a2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <SystemInit+0x88>)
 80025a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a8:	4908      	ldr	r1, [pc, #32]	; (80025cc <SystemInit+0x88>)
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <SystemInit+0x90>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <SystemInit+0x88>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80025b6:	f000 f80f 	bl	80025d8 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025ba:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <SystemInit+0x84>)
 80025bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025c0:	609a      	str	r2, [r3, #8]
#endif  
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00
 80025cc:	40021000 	.word	0x40021000
 80025d0:	f87fc00c 	.word	0xf87fc00c
 80025d4:	ff00fccc 	.word	0xff00fccc

080025d8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <SetSysClock+0x8c>)
 80025de:	2212      	movs	r2, #18
 80025e0:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <SetSysClock+0x90>)
 80025e4:	4a20      	ldr	r2, [pc, #128]	; (8002668 <SetSysClock+0x90>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <SetSysClock+0x90>)
 80025ec:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <SetSysClock+0x90>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <SetSysClock+0x90>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <SetSysClock+0x90>)
 80025f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fc:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <SetSysClock+0x90>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a19      	ldr	r2, [pc, #100]	; (8002668 <SetSysClock+0x90>)
 8002604:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002608:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <SetSysClock+0x90>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a16      	ldr	r2, [pc, #88]	; (8002668 <SetSysClock+0x90>)
 8002610:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8002614:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <SetSysClock+0x90>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <SetSysClock+0x90>)
 800261c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002620:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002622:	bf00      	nop
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <SetSysClock+0x90>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f9      	beq.n	8002624 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <SetSysClock+0x90>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <SetSysClock+0x90>)
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <SetSysClock+0x90>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a09      	ldr	r2, [pc, #36]	; (8002668 <SetSysClock+0x90>)
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002648:	bf00      	nop
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <SetSysClock+0x90>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d1f9      	bne.n	800264a <SetSysClock+0x72>
  {
  }
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40022000 	.word	0x40022000
 8002668:	40021000 	.word	0x40021000

0800266c <NVIC_EnableIRQ>:
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2201      	movs	r2, #1
 800267e:	fa02 f103 	lsl.w	r1, r2, r3
 8002682:	4a06      	ldr	r2, [pc, #24]	; (800269c <NVIC_EnableIRQ+0x30>)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <NVIC_SetPriority>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da0b      	bge.n	80026cc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	; (80026ec <NVIC_SetPriority+0x4c>)
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	3b04      	subs	r3, #4
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	761a      	strb	r2, [r3, #24]
}
 80026ca:	e009      	b.n	80026e0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <NVIC_SetPriority+0x50>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <initTimer>:
#include "stm32f30x_conf.h"
#include "timer.h"
#include "joystick.h"
#include "LED.h"

void initTimer(){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <initTimer+0x48>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a0f      	ldr	r2, [pc, #60]	; (800273c <initTimer+0x48>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6193      	str	r3, [r2, #24]
	TIM15->CR1 	= 0x0001; // Configure timer 15
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <initTimer+0x4c>)
 8002706:	2201      	movs	r2, #1
 8002708:	801a      	strh	r2, [r3, #0]
	TIM15->ARR 	= 0xF9FF; // Set reload value
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <initTimer+0x4c>)
 800270c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002710:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->PSC 	= 0x0009; // Set prescale value
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <initTimer+0x4c>)
 8002714:	2209      	movs	r2, #9
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER	|= 0x0001;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <initTimer+0x4c>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a08      	ldr	r2, [pc, #32]	; (8002740 <initTimer+0x4c>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	60d3      	str	r3, [r2, #12]
	TIM15->SR	= 0x0000;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <initTimer+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 800272a:	2100      	movs	r1, #0
 800272c:	2018      	movs	r0, #24
 800272e:	f7ff ffb7 	bl	80026a0 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 8002732:	2018      	movs	r0, #24
 8002734:	f7ff ff9a 	bl	800266c <NVIC_EnableIRQ>
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	40014000 	.word	0x40014000

08002744 <TIM1_BRK_TIM15_IRQHandler>:


void TIM1_BRK_TIM15_IRQHandler(void) {
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0

	lcdUpdate++;
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	4a39      	ldr	r2, [pc, #228]	; (8002834 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8002750:	6013      	str	r3, [r2, #0]
	if (lcdUpdate >= refreshRate){
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	db18      	blt.n	8002790 <TIM1_BRK_TIM15_IRQHandler+0x4c>

		if (timeState == 0){
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <TIM1_BRK_TIM15_IRQHandler+0xf8>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b25b      	sxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <TIM1_BRK_TIM15_IRQHandler+0x2c>
			timeState = 1;
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <TIM1_BRK_TIM15_IRQHandler+0xf8>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e007      	b.n	8002780 <TIM1_BRK_TIM15_IRQHandler+0x3c>
		}
		else if (timeState == 1){
 8002770:	4b32      	ldr	r3, [pc, #200]	; (800283c <TIM1_BRK_TIM15_IRQHandler+0xf8>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	b25b      	sxtb	r3, r3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d102      	bne.n	8002780 <TIM1_BRK_TIM15_IRQHandler+0x3c>
			timeState = 0;
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <TIM1_BRK_TIM15_IRQHandler+0xf8>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
		}

		placeLCD--;
 8002780:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <TIM1_BRK_TIM15_IRQHandler+0xfc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3b01      	subs	r3, #1
 8002786:	4a2e      	ldr	r2, [pc, #184]	; (8002840 <TIM1_BRK_TIM15_IRQHandler+0xfc>)
 8002788:	6013      	str	r3, [r2, #0]
		lcdUpdate = 0;
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

	}


	if (placeLCD == 0){
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <TIM1_BRK_TIM15_IRQHandler+0xfc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <TIM1_BRK_TIM15_IRQHandler+0x5a>
		placeLCD = 128;
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <TIM1_BRK_TIM15_IRQHandler+0xfc>)
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	601a      	str	r2, [r3, #0]
	}

	if(t.state){
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d03d      	beq.n	8002824 <TIM1_BRK_TIM15_IRQHandler+0xe0>
		if (t.ml <= 0){
 80027a8:	4b26      	ldr	r3, [pc, #152]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027aa:	78db      	ldrb	r3, [r3, #3]
 80027ac:	b25b      	sxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	dc0b      	bgt.n	80027ca <TIM1_BRK_TIM15_IRQHandler+0x86>
			t.ml = 99;
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027b4:	2263      	movs	r2, #99	; 0x63
 80027b6:	70da      	strb	r2, [r3, #3]
			t.sk--;
 80027b8:	4b22      	ldr	r3, [pc, #136]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027ba:	789b      	ldrb	r3, [r3, #2]
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027c8:	709a      	strb	r2, [r3, #2]
		}
		if (t.sk < 0){
 80027ca:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027cc:	789b      	ldrb	r3, [r3, #2]
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da0b      	bge.n	80027ec <TIM1_BRK_TIM15_IRQHandler+0xa8>
			t.sk = 59;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027d6:	223b      	movs	r2, #59	; 0x3b
 80027d8:	709a      	strb	r2, [r3, #2]
			t.mn--;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	b25a      	sxtb	r2, r3
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027ea:	705a      	strb	r2, [r3, #1]
		}
		t.ml--;
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027ee:	78db      	ldrb	r3, [r3, #3]
 80027f0:	b25b      	sxtb	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	b25a      	sxtb	r2, r3
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 80027fc:	70da      	strb	r2, [r3, #3]
		if (t.mn < 0){
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	b25b      	sxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	da0d      	bge.n	8002824 <TIM1_BRK_TIM15_IRQHandler+0xe0>
			t.state = 0;
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 800280a:	2200      	movs	r2, #0
 800280c:	711a      	strb	r2, [r3, #4]
			t.mn = 0;
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 8002810:	2200      	movs	r2, #0
 8002812:	705a      	strb	r2, [r3, #1]
			t.sk = 0;
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 8002816:	2200      	movs	r2, #0
 8002818:	709a      	strb	r2, [r3, #2]
			t.ml = 0;
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <TIM1_BRK_TIM15_IRQHandler+0x100>)
 800281c:	2200      	movs	r2, #0
 800281e:	70da      	strb	r2, [r3, #3]
			GameOver();
 8002820:	f7ff fd9e 	bl	8002360 <GameOver>
		}

	}


TIM15->SR &= ~0x0001; // Clear interrupt bit
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <TIM1_BRK_TIM15_IRQHandler+0x104>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	6113      	str	r3, [r2, #16]
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200001d8 	.word	0x200001d8
 8002838:	200001e4 	.word	0x200001e4
 800283c:	20000211 	.word	0x20000211
 8002840:	200001c8 	.word	0x200001c8
 8002844:	200001f0 	.word	0x200001f0
 8002848:	40014000 	.word	0x40014000

0800284c <drawTime>:

void drawTime(){
 800284c:	b5b0      	push	{r4, r5, r7, lr}
 800284e:	b0c4      	sub	sp, #272	; 0x110
 8002850:	af00      	add	r7, sp, #0
	static int hp;
	int red = 0, green = 0, yellow = 0, x = t.sk + (t.mn * 60);
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002864:	4bc2      	ldr	r3, [pc, #776]	; (8002b70 <drawTime+0x324>)
 8002866:	789b      	ldrb	r3, [r3, #2]
 8002868:	b25b      	sxtb	r3, r3
 800286a:	4619      	mov	r1, r3
 800286c:	4bc0      	ldr	r3, [pc, #768]	; (8002b70 <drawTime+0x324>)
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	b25b      	sxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	char greenS[] = "1G  1f 1G  1f 1G  1f 1G  1f 1G 1f 1D 1e 1f 1G  1f 1G  1f 1G  1f 1G  1f 1G 1f 1D1e1f 2c  1G 2c  1G 2c  1G 2c  1G 2c 1G 1g1g1G 2c  1G 2c  1G 2c  1G 2c  1G 2c 1G 1g1g1G  ";
 8002882:	4abc      	ldr	r2, [pc, #752]	; (8002b74 <drawTime+0x328>)
 8002884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002888:	4611      	mov	r1, r2
 800288a:	22a8      	movs	r2, #168	; 0xa8
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fa21 	bl	8002cd4 <memcpy>
	char yellowS[] = " 2G2G2G2A2B2B2A2G2G2A2B2B2A2G";
 8002892:	4bb9      	ldr	r3, [pc, #740]	; (8002b78 <drawTime+0x32c>)
 8002894:	f107 0420 	add.w	r4, r7, #32
 8002898:	461d      	mov	r5, r3
 800289a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028a2:	c407      	stmia	r4!, {r0, r1, r2}
 80028a4:	8023      	strh	r3, [r4, #0]
	char redS[] = " 3C3C3C3D3E3E3D3C3C3D3E3E3D3C";
 80028a6:	463b      	mov	r3, r7
 80028a8:	4ab4      	ldr	r2, [pc, #720]	; (8002b7c <drawTime+0x330>)
 80028aa:	461c      	mov	r4, r3
 80028ac:	4615      	mov	r5, r2
 80028ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028b6:	c407      	stmia	r4!, {r0, r1, r2}
 80028b8:	8023      	strh	r3, [r4, #0]


	gotoxy(132,3);
 80028ba:	2103      	movs	r1, #3
 80028bc:	2084      	movs	r0, #132	; 0x84
 80028be:	f7ff f835 	bl	800192c <gotoxy>
	printf("%02d:%02d:%02d", t.mn, t.sk, t.ml);
 80028c2:	4bab      	ldr	r3, [pc, #684]	; (8002b70 <drawTime+0x324>)
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	4619      	mov	r1, r3
 80028ca:	4ba9      	ldr	r3, [pc, #676]	; (8002b70 <drawTime+0x324>)
 80028cc:	789b      	ldrb	r3, [r3, #2]
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	4ba7      	ldr	r3, [pc, #668]	; (8002b70 <drawTime+0x324>)
 80028d4:	78db      	ldrb	r3, [r3, #3]
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	48a9      	ldr	r0, [pc, #676]	; (8002b80 <drawTime+0x334>)
 80028da:	f000 fa11 	bl	8002d00 <iprintf>
//	gotoxy(2,3);
//	for (int i = 0; i < 40; i++){
//		printf("%c",32);
//	}

	gotoxy(142,3);
 80028de:	2103      	movs	r1, #3
 80028e0:	208e      	movs	r0, #142	; 0x8e
 80028e2:	f7ff f823 	bl	800192c <gotoxy>
	t.state ? blink(1): blink(0);
 80028e6:	4ba2      	ldr	r3, [pc, #648]	; (8002b70 <drawTime+0x324>)
 80028e8:	791b      	ldrb	r3, [r3, #4]
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <drawTime+0xac>
 80028f0:	2001      	movs	r0, #1
 80028f2:	f7ff f82d 	bl	8001950 <blink>
 80028f6:	e002      	b.n	80028fe <drawTime+0xb2>
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7ff f829 	bl	8001950 <blink>
	if (x>=80){
 80028fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002902:	2b4f      	cmp	r3, #79	; 0x4f
 8002904:	dd2e      	ble.n	8002964 <drawTime+0x118>
		hp = 1;
 8002906:	4b9f      	ldr	r3, [pc, #636]	; (8002b84 <drawTime+0x338>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
		fgcolor(2); // green
 800290c:	2002      	movs	r0, #2
 800290e:	f7fe ffcd 	bl	80018ac <fgcolor>
		for (int i = 0; i < x-80; i++){
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002918:	e007      	b.n	800292a <drawTime+0xde>
			printf("%c",178);
 800291a:	20b2      	movs	r0, #178	; 0xb2
 800291c:	f000 fa08 	bl	8002d30 <putchar>
		for (int i = 0; i < x-80; i++){
 8002920:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002924:	3301      	adds	r3, #1
 8002926:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800292a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800292e:	3b50      	subs	r3, #80	; 0x50
 8002930:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf0      	blt.n	800291a <drawTime+0xce>
		}
		fgcolor(11); // yellow
 8002938:	200b      	movs	r0, #11
 800293a:	f7fe ffb7 	bl	80018ac <fgcolor>
		for (int i = x-80; i < 40; i++){
 800293e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002942:	3b50      	subs	r3, #80	; 0x50
 8002944:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002948:	e007      	b.n	800295a <drawTime+0x10e>
			printf("%c",178);
 800294a:	20b2      	movs	r0, #178	; 0xb2
 800294c:	f000 f9f0 	bl	8002d30 <putchar>
		for (int i = x-80; i < 40; i++){
 8002950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002954:	3301      	adds	r3, #1
 8002956:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800295a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800295e:	2b27      	cmp	r3, #39	; 0x27
 8002960:	ddf3      	ble.n	800294a <drawTime+0xfe>
 8002962:	e073      	b.n	8002a4c <drawTime+0x200>
		}
	}
	else if (x>=40){
 8002964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002968:	2b27      	cmp	r3, #39	; 0x27
 800296a:	dd2e      	ble.n	80029ca <drawTime+0x17e>
		hp = 2;
 800296c:	4b85      	ldr	r3, [pc, #532]	; (8002b84 <drawTime+0x338>)
 800296e:	2202      	movs	r2, #2
 8002970:	601a      	str	r2, [r3, #0]
		fgcolor(11); // yellow
 8002972:	200b      	movs	r0, #11
 8002974:	f7fe ff9a 	bl	80018ac <fgcolor>
		for (int i = 0; i < x-40; i++){
 8002978:	2300      	movs	r3, #0
 800297a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800297e:	e007      	b.n	8002990 <drawTime+0x144>
			printf("%c",178);
 8002980:	20b2      	movs	r0, #178	; 0xb2
 8002982:	f000 f9d5 	bl	8002d30 <putchar>
		for (int i = 0; i < x-40; i++){
 8002986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800298a:	3301      	adds	r3, #1
 800298c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002990:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002994:	3b28      	subs	r3, #40	; 0x28
 8002996:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800299a:	429a      	cmp	r2, r3
 800299c:	dbf0      	blt.n	8002980 <drawTime+0x134>
		}
		fgcolor(1); // red
 800299e:	2001      	movs	r0, #1
 80029a0:	f7fe ff84 	bl	80018ac <fgcolor>
		for (int i = x-40; i < 40; i++){
 80029a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029a8:	3b28      	subs	r3, #40	; 0x28
 80029aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80029ae:	e007      	b.n	80029c0 <drawTime+0x174>
			printf("%c",178);
 80029b0:	20b2      	movs	r0, #178	; 0xb2
 80029b2:	f000 f9bd 	bl	8002d30 <putchar>
		for (int i = x-40; i < 40; i++){
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ba:	3301      	adds	r3, #1
 80029bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c4:	2b27      	cmp	r3, #39	; 0x27
 80029c6:	ddf3      	ble.n	80029b0 <drawTime+0x164>
 80029c8:	e040      	b.n	8002a4c <drawTime+0x200>
		}
	}
	else if (x<40){
 80029ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029ce:	2b27      	cmp	r3, #39	; 0x27
 80029d0:	dc32      	bgt.n	8002a38 <drawTime+0x1ec>
		hp = 3;
 80029d2:	4b6c      	ldr	r3, [pc, #432]	; (8002b84 <drawTime+0x338>)
 80029d4:	2203      	movs	r2, #3
 80029d6:	601a      	str	r2, [r3, #0]

		led.red = t.state;
 80029d8:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <drawTime+0x324>)
 80029da:	791b      	ldrb	r3, [r3, #4]
 80029dc:	b25b      	sxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	4b69      	ldr	r3, [pc, #420]	; (8002b88 <drawTime+0x33c>)
 80029e2:	601a      	str	r2, [r3, #0]
		fgcolor(1); // red
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fe ff61 	bl	80018ac <fgcolor>
		for (int i = 0; i < x; i++){
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80029f0:	e007      	b.n	8002a02 <drawTime+0x1b6>
			printf("%c",178);
 80029f2:	20b2      	movs	r0, #178	; 0xb2
 80029f4:	f000 f99c 	bl	8002d30 <putchar>
		for (int i = 0; i < x; i++){
 80029f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80029fc:	3301      	adds	r3, #1
 80029fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002a02:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002a06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	dbf1      	blt.n	80029f2 <drawTime+0x1a6>
		}
		blink(0);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fe ff9e 	bl	8001950 <blink>
		for (int i = x; i < 40; i++){
 8002a14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002a1c:	e007      	b.n	8002a2e <drawTime+0x1e2>
			printf("%c",32);
 8002a1e:	2020      	movs	r0, #32
 8002a20:	f000 f986 	bl	8002d30 <putchar>
		for (int i = x; i < 40; i++){
 8002a24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a28:	3301      	adds	r3, #1
 8002a2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002a2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a32:	2b27      	cmp	r3, #39	; 0x27
 8002a34:	ddf3      	ble.n	8002a1e <drawTime+0x1d2>
 8002a36:	e009      	b.n	8002a4c <drawTime+0x200>
		}
	}
	else if (x = 0){
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <drawTime+0x200>
		hp = 0;
 8002a46:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <drawTime+0x338>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
	}

	blink(0);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fe ff7f 	bl	8001950 <blink>
	resetbgcolor();
 8002a52:	f7fe ff47 	bl	80018e4 <resetbgcolor>

	switch(hp){
 8002a56:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <drawTime+0x338>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d841      	bhi.n	8002ae2 <drawTime+0x296>
 8002a5e:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <drawTime+0x218>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002a75 	.word	0x08002a75
 8002a68:	08002a83 	.word	0x08002a83
 8002a6c:	08002aa3 	.word	0x08002aa3
 8002a70:	08002ac3 	.word	0x08002ac3
		case 0:
			red = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			green = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			break;
 8002a80:	e02f      	b.n	8002ae2 <drawTime+0x296>
		case 1:
			green = !t.state | timeState;
 8002a82:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <drawTime+0x324>)
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <drawTime+0x340>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			break;
 8002aa0:	e01f      	b.n	8002ae2 <drawTime+0x296>
		case 2:
			yellow = !t.state | timeState;
 8002aa2:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <drawTime+0x324>)
 8002aa4:	791b      	ldrb	r3, [r3, #4]
 8002aa6:	b25b      	sxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <drawTime+0x340>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			break;
 8002ac0:	e00f      	b.n	8002ae2 <drawTime+0x296>
		case 3:
			red = !t.state | timeState;
 8002ac2:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <drawTime+0x324>)
 8002ac4:	791b      	ldrb	r3, [r3, #4]
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <drawTime+0x340>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8002ae0:	bf00      	nop
	}

	led.gre = green | yellow;
 8002ae2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002aea:	4313      	orrs	r3, r2
 8002aec:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <drawTime+0x33c>)
 8002aee:	6093      	str	r3, [r2, #8]
	led.red = red | yellow;
 8002af0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002af8:	4313      	orrs	r3, r2
 8002afa:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <drawTime+0x33c>)
 8002afc:	6013      	str	r3, [r2, #0]

	if (t.state){
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <drawTime+0x324>)
 8002b00:	791b      	ldrb	r3, [r3, #4]
 8002b02:	b25b      	sxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02b      	beq.n	8002b60 <drawTime+0x314>
		if(green & timeState ){
 8002b08:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <drawTime+0x340>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <drawTime+0x2da>
			playTone(greenS);
 8002b1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff f82a 	bl	8001b78 <playTone>
	}
	else {
		setFreq(0);
	}

}
 8002b24:	e01f      	b.n	8002b66 <drawTime+0x31a>
		else if(yellow & timeState ){
 8002b26:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <drawTime+0x340>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <drawTime+0x2f8>
			playTone(yellowS);
 8002b38:	f107 0320 	add.w	r3, r7, #32
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff f81b 	bl	8001b78 <playTone>
}
 8002b42:	e010      	b.n	8002b66 <drawTime+0x31a>
		else if(red & timeState){
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <drawTime+0x340>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <drawTime+0x31a>
			playTone(redS);
 8002b56:	463b      	mov	r3, r7
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff f80d 	bl	8001b78 <playTone>
}
 8002b5e:	e002      	b.n	8002b66 <drawTime+0x31a>
		setFreq(0);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7ff fb7d 	bl	8002260 <setFreq>
}
 8002b66:	bf00      	nop
 8002b68:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b70:	200001f0 	.word	0x200001f0
 8002b74:	08004448 	.word	0x08004448
 8002b78:	080044f0 	.word	0x080044f0
 8002b7c:	08004510 	.word	0x08004510
 8002b80:	08004438 	.word	0x08004438
 8002b84:	200001b8 	.word	0x200001b8
 8002b88:	200001cc 	.word	0x200001cc
 8002b8c:	20000211 	.word	0x20000211

08002b90 <resetTime>:



void resetTime(){
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
	t.ml = 0;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <resetTime+0x4c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	70da      	strb	r2, [r3, #3]
	t.sk = 0;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <resetTime+0x4c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	709a      	strb	r2, [r3, #2]
	t.mn = 2;
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <resetTime+0x4c>)
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	705a      	strb	r2, [r3, #1]

	t.byThree = (t.sk + (60 * t.mn))/3;
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <resetTime+0x4c>)
 8002ba8:	789b      	ldrb	r3, [r3, #2]
 8002baa:	b25b      	sxtb	r3, r3
 8002bac:	4619      	mov	r1, r3
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <resetTime+0x4c>)
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	b25b      	sxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <resetTime+0x50>)
 8002bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8002bc6:	17db      	asrs	r3, r3, #31
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	b25a      	sxtb	r2, r3
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <resetTime+0x4c>)
 8002bce:	715a      	strb	r2, [r3, #5]

}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	200001f0 	.word	0x200001f0
 8002be0:	55555556 	.word	0x55555556

08002be4 <timeControll>:


void timeControll(){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
	readJoystick();
 8002be8:	f7fe fcae 	bl	8001548 <readJoystick>

	if(joy.up){
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <timeControll+0x40>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <timeControll+0x1a>
		t.state = 0;
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <timeControll+0x44>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	711a      	strb	r2, [r3, #4]
	}
	else if (joy.right){
		resetTime();
	}

}
 8002bfc:	e00f      	b.n	8002c1e <timeControll+0x3a>
	else if (joy.down){
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <timeControll+0x40>)
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <timeControll+0x2c>
		t.state = 1;
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <timeControll+0x44>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	711a      	strb	r2, [r3, #4]
}
 8002c0e:	e006      	b.n	8002c1e <timeControll+0x3a>
	else if (joy.right){
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <timeControll+0x40>)
 8002c12:	78db      	ldrb	r3, [r3, #3]
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <timeControll+0x3a>
		resetTime();
 8002c1a:	f7ff ffb9 	bl	8002b90 <resetTime>
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200001e8 	.word	0x200001e8
 8002c28:	200001f0 	.word	0x200001f0

08002c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c2c:	480d      	ldr	r0, [pc, #52]	; (8002c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c30:	480d      	ldr	r0, [pc, #52]	; (8002c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c32:	490e      	ldr	r1, [pc, #56]	; (8002c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c34:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <LoopForever+0xe>)
  movs r3, #0
 8002c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c38:	e002      	b.n	8002c40 <LoopCopyDataInit>

08002c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c3e:	3304      	adds	r3, #4

08002c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c44:	d3f9      	bcc.n	8002c3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c48:	4c0b      	ldr	r4, [pc, #44]	; (8002c78 <LoopForever+0x16>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c4c:	e001      	b.n	8002c52 <LoopFillZerobss>

08002c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c50:	3204      	adds	r2, #4

08002c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c54:	d3fb      	bcc.n	8002c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c56:	f7ff fc75 	bl	8002544 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002c5a:	f000 f817 	bl	8002c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c5e:	f7ff fb47 	bl	80022f0 <main>

08002c62 <LoopForever>:

LoopForever:
    b LoopForever
 8002c62:	e7fe      	b.n	8002c62 <LoopForever>
  ldr   r0, =_estack
 8002c64:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002c70:	080045d0 	.word	0x080045d0
  ldr r2, =_sbss
 8002c74:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002c78:	20000234 	.word	0x20000234

08002c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <ADC1_2_IRQHandler>
	...

08002c80 <__errno>:
 8002c80:	4b01      	ldr	r3, [pc, #4]	; (8002c88 <__errno+0x8>)
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	2000002c 	.word	0x2000002c

08002c8c <__libc_init_array>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	4d0d      	ldr	r5, [pc, #52]	; (8002cc4 <__libc_init_array+0x38>)
 8002c90:	4c0d      	ldr	r4, [pc, #52]	; (8002cc8 <__libc_init_array+0x3c>)
 8002c92:	1b64      	subs	r4, r4, r5
 8002c94:	10a4      	asrs	r4, r4, #2
 8002c96:	2600      	movs	r6, #0
 8002c98:	42a6      	cmp	r6, r4
 8002c9a:	d109      	bne.n	8002cb0 <__libc_init_array+0x24>
 8002c9c:	4d0b      	ldr	r5, [pc, #44]	; (8002ccc <__libc_init_array+0x40>)
 8002c9e:	4c0c      	ldr	r4, [pc, #48]	; (8002cd0 <__libc_init_array+0x44>)
 8002ca0:	f001 f8a6 	bl	8003df0 <_init>
 8002ca4:	1b64      	subs	r4, r4, r5
 8002ca6:	10a4      	asrs	r4, r4, #2
 8002ca8:	2600      	movs	r6, #0
 8002caa:	42a6      	cmp	r6, r4
 8002cac:	d105      	bne.n	8002cba <__libc_init_array+0x2e>
 8002cae:	bd70      	pop	{r4, r5, r6, pc}
 8002cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb4:	4798      	blx	r3
 8002cb6:	3601      	adds	r6, #1
 8002cb8:	e7ee      	b.n	8002c98 <__libc_init_array+0xc>
 8002cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cbe:	4798      	blx	r3
 8002cc0:	3601      	adds	r6, #1
 8002cc2:	e7f2      	b.n	8002caa <__libc_init_array+0x1e>
 8002cc4:	080045c8 	.word	0x080045c8
 8002cc8:	080045c8 	.word	0x080045c8
 8002ccc:	080045c8 	.word	0x080045c8
 8002cd0:	080045cc 	.word	0x080045cc

08002cd4 <memcpy>:
 8002cd4:	440a      	add	r2, r1
 8002cd6:	4291      	cmp	r1, r2
 8002cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cdc:	d100      	bne.n	8002ce0 <memcpy+0xc>
 8002cde:	4770      	bx	lr
 8002ce0:	b510      	push	{r4, lr}
 8002ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cea:	4291      	cmp	r1, r2
 8002cec:	d1f9      	bne.n	8002ce2 <memcpy+0xe>
 8002cee:	bd10      	pop	{r4, pc}

08002cf0 <memset>:
 8002cf0:	4402      	add	r2, r0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <memset+0xa>
 8002cf8:	4770      	bx	lr
 8002cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfe:	e7f9      	b.n	8002cf4 <memset+0x4>

08002d00 <iprintf>:
 8002d00:	b40f      	push	{r0, r1, r2, r3}
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <iprintf+0x2c>)
 8002d04:	b513      	push	{r0, r1, r4, lr}
 8002d06:	681c      	ldr	r4, [r3, #0]
 8002d08:	b124      	cbz	r4, 8002d14 <iprintf+0x14>
 8002d0a:	69a3      	ldr	r3, [r4, #24]
 8002d0c:	b913      	cbnz	r3, 8002d14 <iprintf+0x14>
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f000 fa0c 	bl	800312c <__sinit>
 8002d14:	ab05      	add	r3, sp, #20
 8002d16:	9a04      	ldr	r2, [sp, #16]
 8002d18:	68a1      	ldr	r1, [r4, #8]
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f000 fbe5 	bl	80034ec <_vfiprintf_r>
 8002d22:	b002      	add	sp, #8
 8002d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d28:	b004      	add	sp, #16
 8002d2a:	4770      	bx	lr
 8002d2c:	2000002c 	.word	0x2000002c

08002d30 <putchar>:
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <putchar+0x28>)
 8002d32:	b513      	push	{r0, r1, r4, lr}
 8002d34:	681c      	ldr	r4, [r3, #0]
 8002d36:	4601      	mov	r1, r0
 8002d38:	b134      	cbz	r4, 8002d48 <putchar+0x18>
 8002d3a:	69a3      	ldr	r3, [r4, #24]
 8002d3c:	b923      	cbnz	r3, 8002d48 <putchar+0x18>
 8002d3e:	9001      	str	r0, [sp, #4]
 8002d40:	4620      	mov	r0, r4
 8002d42:	f000 f9f3 	bl	800312c <__sinit>
 8002d46:	9901      	ldr	r1, [sp, #4]
 8002d48:	68a2      	ldr	r2, [r4, #8]
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	b002      	add	sp, #8
 8002d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d52:	f000 be8f 	b.w	8003a74 <_putc_r>
 8002d56:	bf00      	nop
 8002d58:	2000002c 	.word	0x2000002c

08002d5c <setbuf>:
 8002d5c:	2900      	cmp	r1, #0
 8002d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d62:	bf0c      	ite	eq
 8002d64:	2202      	moveq	r2, #2
 8002d66:	2200      	movne	r2, #0
 8002d68:	f000 b800 	b.w	8002d6c <setvbuf>

08002d6c <setvbuf>:
 8002d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d70:	461d      	mov	r5, r3
 8002d72:	4b5d      	ldr	r3, [pc, #372]	; (8002ee8 <setvbuf+0x17c>)
 8002d74:	681f      	ldr	r7, [r3, #0]
 8002d76:	4604      	mov	r4, r0
 8002d78:	460e      	mov	r6, r1
 8002d7a:	4690      	mov	r8, r2
 8002d7c:	b127      	cbz	r7, 8002d88 <setvbuf+0x1c>
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	b913      	cbnz	r3, 8002d88 <setvbuf+0x1c>
 8002d82:	4638      	mov	r0, r7
 8002d84:	f000 f9d2 	bl	800312c <__sinit>
 8002d88:	4b58      	ldr	r3, [pc, #352]	; (8002eec <setvbuf+0x180>)
 8002d8a:	429c      	cmp	r4, r3
 8002d8c:	d167      	bne.n	8002e5e <setvbuf+0xf2>
 8002d8e:	687c      	ldr	r4, [r7, #4]
 8002d90:	f1b8 0f02 	cmp.w	r8, #2
 8002d94:	d006      	beq.n	8002da4 <setvbuf+0x38>
 8002d96:	f1b8 0f01 	cmp.w	r8, #1
 8002d9a:	f200 809f 	bhi.w	8002edc <setvbuf+0x170>
 8002d9e:	2d00      	cmp	r5, #0
 8002da0:	f2c0 809c 	blt.w	8002edc <setvbuf+0x170>
 8002da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002da6:	07db      	lsls	r3, r3, #31
 8002da8:	d405      	bmi.n	8002db6 <setvbuf+0x4a>
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	0598      	lsls	r0, r3, #22
 8002dae:	d402      	bmi.n	8002db6 <setvbuf+0x4a>
 8002db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002db2:	f000 fa59 	bl	8003268 <__retarget_lock_acquire_recursive>
 8002db6:	4621      	mov	r1, r4
 8002db8:	4638      	mov	r0, r7
 8002dba:	f000 f923 	bl	8003004 <_fflush_r>
 8002dbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dc0:	b141      	cbz	r1, 8002dd4 <setvbuf+0x68>
 8002dc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dc6:	4299      	cmp	r1, r3
 8002dc8:	d002      	beq.n	8002dd0 <setvbuf+0x64>
 8002dca:	4638      	mov	r0, r7
 8002dcc:	f000 faba 	bl	8003344 <_free_r>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6363      	str	r3, [r4, #52]	; 0x34
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61a3      	str	r3, [r4, #24]
 8002dd8:	6063      	str	r3, [r4, #4]
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	0619      	lsls	r1, r3, #24
 8002dde:	d503      	bpl.n	8002de8 <setvbuf+0x7c>
 8002de0:	6921      	ldr	r1, [r4, #16]
 8002de2:	4638      	mov	r0, r7
 8002de4:	f000 faae 	bl	8003344 <_free_r>
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002dee:	f023 0303 	bic.w	r3, r3, #3
 8002df2:	f1b8 0f02 	cmp.w	r8, #2
 8002df6:	81a3      	strh	r3, [r4, #12]
 8002df8:	d06c      	beq.n	8002ed4 <setvbuf+0x168>
 8002dfa:	ab01      	add	r3, sp, #4
 8002dfc:	466a      	mov	r2, sp
 8002dfe:	4621      	mov	r1, r4
 8002e00:	4638      	mov	r0, r7
 8002e02:	f000 fa33 	bl	800326c <__swhatbuf_r>
 8002e06:	89a3      	ldrh	r3, [r4, #12]
 8002e08:	4318      	orrs	r0, r3
 8002e0a:	81a0      	strh	r0, [r4, #12]
 8002e0c:	2d00      	cmp	r5, #0
 8002e0e:	d130      	bne.n	8002e72 <setvbuf+0x106>
 8002e10:	9d00      	ldr	r5, [sp, #0]
 8002e12:	4628      	mov	r0, r5
 8002e14:	f000 fa8e 	bl	8003334 <malloc>
 8002e18:	4606      	mov	r6, r0
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d155      	bne.n	8002eca <setvbuf+0x15e>
 8002e1e:	f8dd 9000 	ldr.w	r9, [sp]
 8002e22:	45a9      	cmp	r9, r5
 8002e24:	d14a      	bne.n	8002ebc <setvbuf+0x150>
 8002e26:	f04f 35ff 	mov.w	r5, #4294967295
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60a2      	str	r2, [r4, #8]
 8002e2e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002e32:	6022      	str	r2, [r4, #0]
 8002e34:	6122      	str	r2, [r4, #16]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e3c:	6162      	str	r2, [r4, #20]
 8002e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	07d2      	lsls	r2, r2, #31
 8002e46:	81a3      	strh	r3, [r4, #12]
 8002e48:	d405      	bmi.n	8002e56 <setvbuf+0xea>
 8002e4a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002e4e:	d102      	bne.n	8002e56 <setvbuf+0xea>
 8002e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e52:	f000 fa0a 	bl	800326a <__retarget_lock_release_recursive>
 8002e56:	4628      	mov	r0, r5
 8002e58:	b003      	add	sp, #12
 8002e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <setvbuf+0x184>)
 8002e60:	429c      	cmp	r4, r3
 8002e62:	d101      	bne.n	8002e68 <setvbuf+0xfc>
 8002e64:	68bc      	ldr	r4, [r7, #8]
 8002e66:	e793      	b.n	8002d90 <setvbuf+0x24>
 8002e68:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <setvbuf+0x188>)
 8002e6a:	429c      	cmp	r4, r3
 8002e6c:	bf08      	it	eq
 8002e6e:	68fc      	ldreq	r4, [r7, #12]
 8002e70:	e78e      	b.n	8002d90 <setvbuf+0x24>
 8002e72:	2e00      	cmp	r6, #0
 8002e74:	d0cd      	beq.n	8002e12 <setvbuf+0xa6>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	b913      	cbnz	r3, 8002e80 <setvbuf+0x114>
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	f000 f956 	bl	800312c <__sinit>
 8002e80:	f1b8 0f01 	cmp.w	r8, #1
 8002e84:	bf08      	it	eq
 8002e86:	89a3      	ldrheq	r3, [r4, #12]
 8002e88:	6026      	str	r6, [r4, #0]
 8002e8a:	bf04      	itt	eq
 8002e8c:	f043 0301 	orreq.w	r3, r3, #1
 8002e90:	81a3      	strheq	r3, [r4, #12]
 8002e92:	89a2      	ldrh	r2, [r4, #12]
 8002e94:	f012 0308 	ands.w	r3, r2, #8
 8002e98:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002e9c:	d01c      	beq.n	8002ed8 <setvbuf+0x16c>
 8002e9e:	07d3      	lsls	r3, r2, #31
 8002ea0:	bf41      	itttt	mi
 8002ea2:	2300      	movmi	r3, #0
 8002ea4:	426d      	negmi	r5, r5
 8002ea6:	60a3      	strmi	r3, [r4, #8]
 8002ea8:	61a5      	strmi	r5, [r4, #24]
 8002eaa:	bf58      	it	pl
 8002eac:	60a5      	strpl	r5, [r4, #8]
 8002eae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002eb0:	f015 0501 	ands.w	r5, r5, #1
 8002eb4:	d115      	bne.n	8002ee2 <setvbuf+0x176>
 8002eb6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002eba:	e7c8      	b.n	8002e4e <setvbuf+0xe2>
 8002ebc:	4648      	mov	r0, r9
 8002ebe:	f000 fa39 	bl	8003334 <malloc>
 8002ec2:	4606      	mov	r6, r0
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d0ae      	beq.n	8002e26 <setvbuf+0xba>
 8002ec8:	464d      	mov	r5, r9
 8002eca:	89a3      	ldrh	r3, [r4, #12]
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed0:	81a3      	strh	r3, [r4, #12]
 8002ed2:	e7d0      	b.n	8002e76 <setvbuf+0x10a>
 8002ed4:	2500      	movs	r5, #0
 8002ed6:	e7a8      	b.n	8002e2a <setvbuf+0xbe>
 8002ed8:	60a3      	str	r3, [r4, #8]
 8002eda:	e7e8      	b.n	8002eae <setvbuf+0x142>
 8002edc:	f04f 35ff 	mov.w	r5, #4294967295
 8002ee0:	e7b9      	b.n	8002e56 <setvbuf+0xea>
 8002ee2:	2500      	movs	r5, #0
 8002ee4:	e7b7      	b.n	8002e56 <setvbuf+0xea>
 8002ee6:	bf00      	nop
 8002ee8:	2000002c 	.word	0x2000002c
 8002eec:	08004554 	.word	0x08004554
 8002ef0:	08004574 	.word	0x08004574
 8002ef4:	08004534 	.word	0x08004534

08002ef8 <__sflush_r>:
 8002ef8:	898a      	ldrh	r2, [r1, #12]
 8002efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efe:	4605      	mov	r5, r0
 8002f00:	0710      	lsls	r0, r2, #28
 8002f02:	460c      	mov	r4, r1
 8002f04:	d458      	bmi.n	8002fb8 <__sflush_r+0xc0>
 8002f06:	684b      	ldr	r3, [r1, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	dc05      	bgt.n	8002f18 <__sflush_r+0x20>
 8002f0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	dc02      	bgt.n	8002f18 <__sflush_r+0x20>
 8002f12:	2000      	movs	r0, #0
 8002f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f1a:	2e00      	cmp	r6, #0
 8002f1c:	d0f9      	beq.n	8002f12 <__sflush_r+0x1a>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f24:	682f      	ldr	r7, [r5, #0]
 8002f26:	602b      	str	r3, [r5, #0]
 8002f28:	d032      	beq.n	8002f90 <__sflush_r+0x98>
 8002f2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f2c:	89a3      	ldrh	r3, [r4, #12]
 8002f2e:	075a      	lsls	r2, r3, #29
 8002f30:	d505      	bpl.n	8002f3e <__sflush_r+0x46>
 8002f32:	6863      	ldr	r3, [r4, #4]
 8002f34:	1ac0      	subs	r0, r0, r3
 8002f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f38:	b10b      	cbz	r3, 8002f3e <__sflush_r+0x46>
 8002f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f3c:	1ac0      	subs	r0, r0, r3
 8002f3e:	2300      	movs	r3, #0
 8002f40:	4602      	mov	r2, r0
 8002f42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f44:	6a21      	ldr	r1, [r4, #32]
 8002f46:	4628      	mov	r0, r5
 8002f48:	47b0      	blx	r6
 8002f4a:	1c43      	adds	r3, r0, #1
 8002f4c:	89a3      	ldrh	r3, [r4, #12]
 8002f4e:	d106      	bne.n	8002f5e <__sflush_r+0x66>
 8002f50:	6829      	ldr	r1, [r5, #0]
 8002f52:	291d      	cmp	r1, #29
 8002f54:	d82c      	bhi.n	8002fb0 <__sflush_r+0xb8>
 8002f56:	4a2a      	ldr	r2, [pc, #168]	; (8003000 <__sflush_r+0x108>)
 8002f58:	40ca      	lsrs	r2, r1
 8002f5a:	07d6      	lsls	r6, r2, #31
 8002f5c:	d528      	bpl.n	8002fb0 <__sflush_r+0xb8>
 8002f5e:	2200      	movs	r2, #0
 8002f60:	6062      	str	r2, [r4, #4]
 8002f62:	04d9      	lsls	r1, r3, #19
 8002f64:	6922      	ldr	r2, [r4, #16]
 8002f66:	6022      	str	r2, [r4, #0]
 8002f68:	d504      	bpl.n	8002f74 <__sflush_r+0x7c>
 8002f6a:	1c42      	adds	r2, r0, #1
 8002f6c:	d101      	bne.n	8002f72 <__sflush_r+0x7a>
 8002f6e:	682b      	ldr	r3, [r5, #0]
 8002f70:	b903      	cbnz	r3, 8002f74 <__sflush_r+0x7c>
 8002f72:	6560      	str	r0, [r4, #84]	; 0x54
 8002f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f76:	602f      	str	r7, [r5, #0]
 8002f78:	2900      	cmp	r1, #0
 8002f7a:	d0ca      	beq.n	8002f12 <__sflush_r+0x1a>
 8002f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f80:	4299      	cmp	r1, r3
 8002f82:	d002      	beq.n	8002f8a <__sflush_r+0x92>
 8002f84:	4628      	mov	r0, r5
 8002f86:	f000 f9dd 	bl	8003344 <_free_r>
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	6360      	str	r0, [r4, #52]	; 0x34
 8002f8e:	e7c1      	b.n	8002f14 <__sflush_r+0x1c>
 8002f90:	6a21      	ldr	r1, [r4, #32]
 8002f92:	2301      	movs	r3, #1
 8002f94:	4628      	mov	r0, r5
 8002f96:	47b0      	blx	r6
 8002f98:	1c41      	adds	r1, r0, #1
 8002f9a:	d1c7      	bne.n	8002f2c <__sflush_r+0x34>
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0c4      	beq.n	8002f2c <__sflush_r+0x34>
 8002fa2:	2b1d      	cmp	r3, #29
 8002fa4:	d001      	beq.n	8002faa <__sflush_r+0xb2>
 8002fa6:	2b16      	cmp	r3, #22
 8002fa8:	d101      	bne.n	8002fae <__sflush_r+0xb6>
 8002faa:	602f      	str	r7, [r5, #0]
 8002fac:	e7b1      	b.n	8002f12 <__sflush_r+0x1a>
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb4:	81a3      	strh	r3, [r4, #12]
 8002fb6:	e7ad      	b.n	8002f14 <__sflush_r+0x1c>
 8002fb8:	690f      	ldr	r7, [r1, #16]
 8002fba:	2f00      	cmp	r7, #0
 8002fbc:	d0a9      	beq.n	8002f12 <__sflush_r+0x1a>
 8002fbe:	0793      	lsls	r3, r2, #30
 8002fc0:	680e      	ldr	r6, [r1, #0]
 8002fc2:	bf08      	it	eq
 8002fc4:	694b      	ldreq	r3, [r1, #20]
 8002fc6:	600f      	str	r7, [r1, #0]
 8002fc8:	bf18      	it	ne
 8002fca:	2300      	movne	r3, #0
 8002fcc:	eba6 0807 	sub.w	r8, r6, r7
 8002fd0:	608b      	str	r3, [r1, #8]
 8002fd2:	f1b8 0f00 	cmp.w	r8, #0
 8002fd6:	dd9c      	ble.n	8002f12 <__sflush_r+0x1a>
 8002fd8:	6a21      	ldr	r1, [r4, #32]
 8002fda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fdc:	4643      	mov	r3, r8
 8002fde:	463a      	mov	r2, r7
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	47b0      	blx	r6
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	dc06      	bgt.n	8002ff6 <__sflush_r+0xfe>
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fee:	81a3      	strh	r3, [r4, #12]
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	e78e      	b.n	8002f14 <__sflush_r+0x1c>
 8002ff6:	4407      	add	r7, r0
 8002ff8:	eba8 0800 	sub.w	r8, r8, r0
 8002ffc:	e7e9      	b.n	8002fd2 <__sflush_r+0xda>
 8002ffe:	bf00      	nop
 8003000:	20400001 	.word	0x20400001

08003004 <_fflush_r>:
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	690b      	ldr	r3, [r1, #16]
 8003008:	4605      	mov	r5, r0
 800300a:	460c      	mov	r4, r1
 800300c:	b913      	cbnz	r3, 8003014 <_fflush_r+0x10>
 800300e:	2500      	movs	r5, #0
 8003010:	4628      	mov	r0, r5
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	b118      	cbz	r0, 800301e <_fflush_r+0x1a>
 8003016:	6983      	ldr	r3, [r0, #24]
 8003018:	b90b      	cbnz	r3, 800301e <_fflush_r+0x1a>
 800301a:	f000 f887 	bl	800312c <__sinit>
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <_fflush_r+0x6c>)
 8003020:	429c      	cmp	r4, r3
 8003022:	d11b      	bne.n	800305c <_fflush_r+0x58>
 8003024:	686c      	ldr	r4, [r5, #4]
 8003026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ef      	beq.n	800300e <_fflush_r+0xa>
 800302e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003030:	07d0      	lsls	r0, r2, #31
 8003032:	d404      	bmi.n	800303e <_fflush_r+0x3a>
 8003034:	0599      	lsls	r1, r3, #22
 8003036:	d402      	bmi.n	800303e <_fflush_r+0x3a>
 8003038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800303a:	f000 f915 	bl	8003268 <__retarget_lock_acquire_recursive>
 800303e:	4628      	mov	r0, r5
 8003040:	4621      	mov	r1, r4
 8003042:	f7ff ff59 	bl	8002ef8 <__sflush_r>
 8003046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003048:	07da      	lsls	r2, r3, #31
 800304a:	4605      	mov	r5, r0
 800304c:	d4e0      	bmi.n	8003010 <_fflush_r+0xc>
 800304e:	89a3      	ldrh	r3, [r4, #12]
 8003050:	059b      	lsls	r3, r3, #22
 8003052:	d4dd      	bmi.n	8003010 <_fflush_r+0xc>
 8003054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003056:	f000 f908 	bl	800326a <__retarget_lock_release_recursive>
 800305a:	e7d9      	b.n	8003010 <_fflush_r+0xc>
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <_fflush_r+0x70>)
 800305e:	429c      	cmp	r4, r3
 8003060:	d101      	bne.n	8003066 <_fflush_r+0x62>
 8003062:	68ac      	ldr	r4, [r5, #8]
 8003064:	e7df      	b.n	8003026 <_fflush_r+0x22>
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <_fflush_r+0x74>)
 8003068:	429c      	cmp	r4, r3
 800306a:	bf08      	it	eq
 800306c:	68ec      	ldreq	r4, [r5, #12]
 800306e:	e7da      	b.n	8003026 <_fflush_r+0x22>
 8003070:	08004554 	.word	0x08004554
 8003074:	08004574 	.word	0x08004574
 8003078:	08004534 	.word	0x08004534

0800307c <std>:
 800307c:	2300      	movs	r3, #0
 800307e:	b510      	push	{r4, lr}
 8003080:	4604      	mov	r4, r0
 8003082:	e9c0 3300 	strd	r3, r3, [r0]
 8003086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800308a:	6083      	str	r3, [r0, #8]
 800308c:	8181      	strh	r1, [r0, #12]
 800308e:	6643      	str	r3, [r0, #100]	; 0x64
 8003090:	81c2      	strh	r2, [r0, #14]
 8003092:	6183      	str	r3, [r0, #24]
 8003094:	4619      	mov	r1, r3
 8003096:	2208      	movs	r2, #8
 8003098:	305c      	adds	r0, #92	; 0x5c
 800309a:	f7ff fe29 	bl	8002cf0 <memset>
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <std+0x38>)
 80030a0:	6263      	str	r3, [r4, #36]	; 0x24
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <std+0x3c>)
 80030a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <std+0x40>)
 80030a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <std+0x44>)
 80030ac:	6224      	str	r4, [r4, #32]
 80030ae:	6323      	str	r3, [r4, #48]	; 0x30
 80030b0:	bd10      	pop	{r4, pc}
 80030b2:	bf00      	nop
 80030b4:	08003b25 	.word	0x08003b25
 80030b8:	08003b47 	.word	0x08003b47
 80030bc:	08003b7f 	.word	0x08003b7f
 80030c0:	08003ba3 	.word	0x08003ba3

080030c4 <_cleanup_r>:
 80030c4:	4901      	ldr	r1, [pc, #4]	; (80030cc <_cleanup_r+0x8>)
 80030c6:	f000 b8af 	b.w	8003228 <_fwalk_reent>
 80030ca:	bf00      	nop
 80030cc:	08003005 	.word	0x08003005

080030d0 <__sfmoreglue>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	1e4a      	subs	r2, r1, #1
 80030d4:	2568      	movs	r5, #104	; 0x68
 80030d6:	4355      	muls	r5, r2
 80030d8:	460e      	mov	r6, r1
 80030da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030de:	f000 f981 	bl	80033e4 <_malloc_r>
 80030e2:	4604      	mov	r4, r0
 80030e4:	b140      	cbz	r0, 80030f8 <__sfmoreglue+0x28>
 80030e6:	2100      	movs	r1, #0
 80030e8:	e9c0 1600 	strd	r1, r6, [r0]
 80030ec:	300c      	adds	r0, #12
 80030ee:	60a0      	str	r0, [r4, #8]
 80030f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030f4:	f7ff fdfc 	bl	8002cf0 <memset>
 80030f8:	4620      	mov	r0, r4
 80030fa:	bd70      	pop	{r4, r5, r6, pc}

080030fc <__sfp_lock_acquire>:
 80030fc:	4801      	ldr	r0, [pc, #4]	; (8003104 <__sfp_lock_acquire+0x8>)
 80030fe:	f000 b8b3 	b.w	8003268 <__retarget_lock_acquire_recursive>
 8003102:	bf00      	nop
 8003104:	2000022c 	.word	0x2000022c

08003108 <__sfp_lock_release>:
 8003108:	4801      	ldr	r0, [pc, #4]	; (8003110 <__sfp_lock_release+0x8>)
 800310a:	f000 b8ae 	b.w	800326a <__retarget_lock_release_recursive>
 800310e:	bf00      	nop
 8003110:	2000022c 	.word	0x2000022c

08003114 <__sinit_lock_acquire>:
 8003114:	4801      	ldr	r0, [pc, #4]	; (800311c <__sinit_lock_acquire+0x8>)
 8003116:	f000 b8a7 	b.w	8003268 <__retarget_lock_acquire_recursive>
 800311a:	bf00      	nop
 800311c:	20000227 	.word	0x20000227

08003120 <__sinit_lock_release>:
 8003120:	4801      	ldr	r0, [pc, #4]	; (8003128 <__sinit_lock_release+0x8>)
 8003122:	f000 b8a2 	b.w	800326a <__retarget_lock_release_recursive>
 8003126:	bf00      	nop
 8003128:	20000227 	.word	0x20000227

0800312c <__sinit>:
 800312c:	b510      	push	{r4, lr}
 800312e:	4604      	mov	r4, r0
 8003130:	f7ff fff0 	bl	8003114 <__sinit_lock_acquire>
 8003134:	69a3      	ldr	r3, [r4, #24]
 8003136:	b11b      	cbz	r3, 8003140 <__sinit+0x14>
 8003138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800313c:	f7ff bff0 	b.w	8003120 <__sinit_lock_release>
 8003140:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003144:	6523      	str	r3, [r4, #80]	; 0x50
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <__sinit+0x68>)
 8003148:	4a13      	ldr	r2, [pc, #76]	; (8003198 <__sinit+0x6c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	62a2      	str	r2, [r4, #40]	; 0x28
 800314e:	42a3      	cmp	r3, r4
 8003150:	bf04      	itt	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	61a3      	streq	r3, [r4, #24]
 8003156:	4620      	mov	r0, r4
 8003158:	f000 f820 	bl	800319c <__sfp>
 800315c:	6060      	str	r0, [r4, #4]
 800315e:	4620      	mov	r0, r4
 8003160:	f000 f81c 	bl	800319c <__sfp>
 8003164:	60a0      	str	r0, [r4, #8]
 8003166:	4620      	mov	r0, r4
 8003168:	f000 f818 	bl	800319c <__sfp>
 800316c:	2200      	movs	r2, #0
 800316e:	60e0      	str	r0, [r4, #12]
 8003170:	2104      	movs	r1, #4
 8003172:	6860      	ldr	r0, [r4, #4]
 8003174:	f7ff ff82 	bl	800307c <std>
 8003178:	68a0      	ldr	r0, [r4, #8]
 800317a:	2201      	movs	r2, #1
 800317c:	2109      	movs	r1, #9
 800317e:	f7ff ff7d 	bl	800307c <std>
 8003182:	68e0      	ldr	r0, [r4, #12]
 8003184:	2202      	movs	r2, #2
 8003186:	2112      	movs	r1, #18
 8003188:	f7ff ff78 	bl	800307c <std>
 800318c:	2301      	movs	r3, #1
 800318e:	61a3      	str	r3, [r4, #24]
 8003190:	e7d2      	b.n	8003138 <__sinit+0xc>
 8003192:	bf00      	nop
 8003194:	08004530 	.word	0x08004530
 8003198:	080030c5 	.word	0x080030c5

0800319c <__sfp>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	4607      	mov	r7, r0
 80031a0:	f7ff ffac 	bl	80030fc <__sfp_lock_acquire>
 80031a4:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <__sfp+0x84>)
 80031a6:	681e      	ldr	r6, [r3, #0]
 80031a8:	69b3      	ldr	r3, [r6, #24]
 80031aa:	b913      	cbnz	r3, 80031b2 <__sfp+0x16>
 80031ac:	4630      	mov	r0, r6
 80031ae:	f7ff ffbd 	bl	800312c <__sinit>
 80031b2:	3648      	adds	r6, #72	; 0x48
 80031b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	d503      	bpl.n	80031c4 <__sfp+0x28>
 80031bc:	6833      	ldr	r3, [r6, #0]
 80031be:	b30b      	cbz	r3, 8003204 <__sfp+0x68>
 80031c0:	6836      	ldr	r6, [r6, #0]
 80031c2:	e7f7      	b.n	80031b4 <__sfp+0x18>
 80031c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031c8:	b9d5      	cbnz	r5, 8003200 <__sfp+0x64>
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <__sfp+0x88>)
 80031cc:	60e3      	str	r3, [r4, #12]
 80031ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031d2:	6665      	str	r5, [r4, #100]	; 0x64
 80031d4:	f000 f847 	bl	8003266 <__retarget_lock_init_recursive>
 80031d8:	f7ff ff96 	bl	8003108 <__sfp_lock_release>
 80031dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031e4:	6025      	str	r5, [r4, #0]
 80031e6:	61a5      	str	r5, [r4, #24]
 80031e8:	2208      	movs	r2, #8
 80031ea:	4629      	mov	r1, r5
 80031ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031f0:	f7ff fd7e 	bl	8002cf0 <memset>
 80031f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031fc:	4620      	mov	r0, r4
 80031fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003200:	3468      	adds	r4, #104	; 0x68
 8003202:	e7d9      	b.n	80031b8 <__sfp+0x1c>
 8003204:	2104      	movs	r1, #4
 8003206:	4638      	mov	r0, r7
 8003208:	f7ff ff62 	bl	80030d0 <__sfmoreglue>
 800320c:	4604      	mov	r4, r0
 800320e:	6030      	str	r0, [r6, #0]
 8003210:	2800      	cmp	r0, #0
 8003212:	d1d5      	bne.n	80031c0 <__sfp+0x24>
 8003214:	f7ff ff78 	bl	8003108 <__sfp_lock_release>
 8003218:	230c      	movs	r3, #12
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	e7ee      	b.n	80031fc <__sfp+0x60>
 800321e:	bf00      	nop
 8003220:	08004530 	.word	0x08004530
 8003224:	ffff0001 	.word	0xffff0001

08003228 <_fwalk_reent>:
 8003228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800322c:	4606      	mov	r6, r0
 800322e:	4688      	mov	r8, r1
 8003230:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003234:	2700      	movs	r7, #0
 8003236:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800323a:	f1b9 0901 	subs.w	r9, r9, #1
 800323e:	d505      	bpl.n	800324c <_fwalk_reent+0x24>
 8003240:	6824      	ldr	r4, [r4, #0]
 8003242:	2c00      	cmp	r4, #0
 8003244:	d1f7      	bne.n	8003236 <_fwalk_reent+0xe>
 8003246:	4638      	mov	r0, r7
 8003248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800324c:	89ab      	ldrh	r3, [r5, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d907      	bls.n	8003262 <_fwalk_reent+0x3a>
 8003252:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003256:	3301      	adds	r3, #1
 8003258:	d003      	beq.n	8003262 <_fwalk_reent+0x3a>
 800325a:	4629      	mov	r1, r5
 800325c:	4630      	mov	r0, r6
 800325e:	47c0      	blx	r8
 8003260:	4307      	orrs	r7, r0
 8003262:	3568      	adds	r5, #104	; 0x68
 8003264:	e7e9      	b.n	800323a <_fwalk_reent+0x12>

08003266 <__retarget_lock_init_recursive>:
 8003266:	4770      	bx	lr

08003268 <__retarget_lock_acquire_recursive>:
 8003268:	4770      	bx	lr

0800326a <__retarget_lock_release_recursive>:
 800326a:	4770      	bx	lr

0800326c <__swhatbuf_r>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	460e      	mov	r6, r1
 8003270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003274:	2900      	cmp	r1, #0
 8003276:	b096      	sub	sp, #88	; 0x58
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	da07      	bge.n	800328e <__swhatbuf_r+0x22>
 800327e:	2300      	movs	r3, #0
 8003280:	602b      	str	r3, [r5, #0]
 8003282:	89b3      	ldrh	r3, [r6, #12]
 8003284:	061a      	lsls	r2, r3, #24
 8003286:	d410      	bmi.n	80032aa <__swhatbuf_r+0x3e>
 8003288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800328c:	e00e      	b.n	80032ac <__swhatbuf_r+0x40>
 800328e:	466a      	mov	r2, sp
 8003290:	f000 fd5c 	bl	8003d4c <_fstat_r>
 8003294:	2800      	cmp	r0, #0
 8003296:	dbf2      	blt.n	800327e <__swhatbuf_r+0x12>
 8003298:	9a01      	ldr	r2, [sp, #4]
 800329a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800329e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032a2:	425a      	negs	r2, r3
 80032a4:	415a      	adcs	r2, r3
 80032a6:	602a      	str	r2, [r5, #0]
 80032a8:	e7ee      	b.n	8003288 <__swhatbuf_r+0x1c>
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	2000      	movs	r0, #0
 80032ae:	6023      	str	r3, [r4, #0]
 80032b0:	b016      	add	sp, #88	; 0x58
 80032b2:	bd70      	pop	{r4, r5, r6, pc}

080032b4 <__smakebuf_r>:
 80032b4:	898b      	ldrh	r3, [r1, #12]
 80032b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032b8:	079d      	lsls	r5, r3, #30
 80032ba:	4606      	mov	r6, r0
 80032bc:	460c      	mov	r4, r1
 80032be:	d507      	bpl.n	80032d0 <__smakebuf_r+0x1c>
 80032c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	6123      	str	r3, [r4, #16]
 80032c8:	2301      	movs	r3, #1
 80032ca:	6163      	str	r3, [r4, #20]
 80032cc:	b002      	add	sp, #8
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	ab01      	add	r3, sp, #4
 80032d2:	466a      	mov	r2, sp
 80032d4:	f7ff ffca 	bl	800326c <__swhatbuf_r>
 80032d8:	9900      	ldr	r1, [sp, #0]
 80032da:	4605      	mov	r5, r0
 80032dc:	4630      	mov	r0, r6
 80032de:	f000 f881 	bl	80033e4 <_malloc_r>
 80032e2:	b948      	cbnz	r0, 80032f8 <__smakebuf_r+0x44>
 80032e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032e8:	059a      	lsls	r2, r3, #22
 80032ea:	d4ef      	bmi.n	80032cc <__smakebuf_r+0x18>
 80032ec:	f023 0303 	bic.w	r3, r3, #3
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	81a3      	strh	r3, [r4, #12]
 80032f6:	e7e3      	b.n	80032c0 <__smakebuf_r+0xc>
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <__smakebuf_r+0x7c>)
 80032fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	6020      	str	r0, [r4, #0]
 8003300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003304:	81a3      	strh	r3, [r4, #12]
 8003306:	9b00      	ldr	r3, [sp, #0]
 8003308:	6163      	str	r3, [r4, #20]
 800330a:	9b01      	ldr	r3, [sp, #4]
 800330c:	6120      	str	r0, [r4, #16]
 800330e:	b15b      	cbz	r3, 8003328 <__smakebuf_r+0x74>
 8003310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003314:	4630      	mov	r0, r6
 8003316:	f000 fd2b 	bl	8003d70 <_isatty_r>
 800331a:	b128      	cbz	r0, 8003328 <__smakebuf_r+0x74>
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	81a3      	strh	r3, [r4, #12]
 8003328:	89a0      	ldrh	r0, [r4, #12]
 800332a:	4305      	orrs	r5, r0
 800332c:	81a5      	strh	r5, [r4, #12]
 800332e:	e7cd      	b.n	80032cc <__smakebuf_r+0x18>
 8003330:	080030c5 	.word	0x080030c5

08003334 <malloc>:
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <malloc+0xc>)
 8003336:	4601      	mov	r1, r0
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	f000 b853 	b.w	80033e4 <_malloc_r>
 800333e:	bf00      	nop
 8003340:	2000002c 	.word	0x2000002c

08003344 <_free_r>:
 8003344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003346:	2900      	cmp	r1, #0
 8003348:	d048      	beq.n	80033dc <_free_r+0x98>
 800334a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800334e:	9001      	str	r0, [sp, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f1a1 0404 	sub.w	r4, r1, #4
 8003356:	bfb8      	it	lt
 8003358:	18e4      	addlt	r4, r4, r3
 800335a:	f000 fd2b 	bl	8003db4 <__malloc_lock>
 800335e:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <_free_r+0x9c>)
 8003360:	9801      	ldr	r0, [sp, #4]
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	4615      	mov	r5, r2
 8003366:	b933      	cbnz	r3, 8003376 <_free_r+0x32>
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	6014      	str	r4, [r2, #0]
 800336c:	b003      	add	sp, #12
 800336e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003372:	f000 bd25 	b.w	8003dc0 <__malloc_unlock>
 8003376:	42a3      	cmp	r3, r4
 8003378:	d90b      	bls.n	8003392 <_free_r+0x4e>
 800337a:	6821      	ldr	r1, [r4, #0]
 800337c:	1862      	adds	r2, r4, r1
 800337e:	4293      	cmp	r3, r2
 8003380:	bf04      	itt	eq
 8003382:	681a      	ldreq	r2, [r3, #0]
 8003384:	685b      	ldreq	r3, [r3, #4]
 8003386:	6063      	str	r3, [r4, #4]
 8003388:	bf04      	itt	eq
 800338a:	1852      	addeq	r2, r2, r1
 800338c:	6022      	streq	r2, [r4, #0]
 800338e:	602c      	str	r4, [r5, #0]
 8003390:	e7ec      	b.n	800336c <_free_r+0x28>
 8003392:	461a      	mov	r2, r3
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	b10b      	cbz	r3, 800339c <_free_r+0x58>
 8003398:	42a3      	cmp	r3, r4
 800339a:	d9fa      	bls.n	8003392 <_free_r+0x4e>
 800339c:	6811      	ldr	r1, [r2, #0]
 800339e:	1855      	adds	r5, r2, r1
 80033a0:	42a5      	cmp	r5, r4
 80033a2:	d10b      	bne.n	80033bc <_free_r+0x78>
 80033a4:	6824      	ldr	r4, [r4, #0]
 80033a6:	4421      	add	r1, r4
 80033a8:	1854      	adds	r4, r2, r1
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	6011      	str	r1, [r2, #0]
 80033ae:	d1dd      	bne.n	800336c <_free_r+0x28>
 80033b0:	681c      	ldr	r4, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	6053      	str	r3, [r2, #4]
 80033b6:	4421      	add	r1, r4
 80033b8:	6011      	str	r1, [r2, #0]
 80033ba:	e7d7      	b.n	800336c <_free_r+0x28>
 80033bc:	d902      	bls.n	80033c4 <_free_r+0x80>
 80033be:	230c      	movs	r3, #12
 80033c0:	6003      	str	r3, [r0, #0]
 80033c2:	e7d3      	b.n	800336c <_free_r+0x28>
 80033c4:	6825      	ldr	r5, [r4, #0]
 80033c6:	1961      	adds	r1, r4, r5
 80033c8:	428b      	cmp	r3, r1
 80033ca:	bf04      	itt	eq
 80033cc:	6819      	ldreq	r1, [r3, #0]
 80033ce:	685b      	ldreq	r3, [r3, #4]
 80033d0:	6063      	str	r3, [r4, #4]
 80033d2:	bf04      	itt	eq
 80033d4:	1949      	addeq	r1, r1, r5
 80033d6:	6021      	streq	r1, [r4, #0]
 80033d8:	6054      	str	r4, [r2, #4]
 80033da:	e7c7      	b.n	800336c <_free_r+0x28>
 80033dc:	b003      	add	sp, #12
 80033de:	bd30      	pop	{r4, r5, pc}
 80033e0:	200001bc 	.word	0x200001bc

080033e4 <_malloc_r>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	1ccd      	adds	r5, r1, #3
 80033e8:	f025 0503 	bic.w	r5, r5, #3
 80033ec:	3508      	adds	r5, #8
 80033ee:	2d0c      	cmp	r5, #12
 80033f0:	bf38      	it	cc
 80033f2:	250c      	movcc	r5, #12
 80033f4:	2d00      	cmp	r5, #0
 80033f6:	4606      	mov	r6, r0
 80033f8:	db01      	blt.n	80033fe <_malloc_r+0x1a>
 80033fa:	42a9      	cmp	r1, r5
 80033fc:	d903      	bls.n	8003406 <_malloc_r+0x22>
 80033fe:	230c      	movs	r3, #12
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	2000      	movs	r0, #0
 8003404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003406:	f000 fcd5 	bl	8003db4 <__malloc_lock>
 800340a:	4921      	ldr	r1, [pc, #132]	; (8003490 <_malloc_r+0xac>)
 800340c:	680a      	ldr	r2, [r1, #0]
 800340e:	4614      	mov	r4, r2
 8003410:	b99c      	cbnz	r4, 800343a <_malloc_r+0x56>
 8003412:	4f20      	ldr	r7, [pc, #128]	; (8003494 <_malloc_r+0xb0>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b923      	cbnz	r3, 8003422 <_malloc_r+0x3e>
 8003418:	4621      	mov	r1, r4
 800341a:	4630      	mov	r0, r6
 800341c:	f000 fb72 	bl	8003b04 <_sbrk_r>
 8003420:	6038      	str	r0, [r7, #0]
 8003422:	4629      	mov	r1, r5
 8003424:	4630      	mov	r0, r6
 8003426:	f000 fb6d 	bl	8003b04 <_sbrk_r>
 800342a:	1c43      	adds	r3, r0, #1
 800342c:	d123      	bne.n	8003476 <_malloc_r+0x92>
 800342e:	230c      	movs	r3, #12
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	4630      	mov	r0, r6
 8003434:	f000 fcc4 	bl	8003dc0 <__malloc_unlock>
 8003438:	e7e3      	b.n	8003402 <_malloc_r+0x1e>
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	1b5b      	subs	r3, r3, r5
 800343e:	d417      	bmi.n	8003470 <_malloc_r+0x8c>
 8003440:	2b0b      	cmp	r3, #11
 8003442:	d903      	bls.n	800344c <_malloc_r+0x68>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	441c      	add	r4, r3
 8003448:	6025      	str	r5, [r4, #0]
 800344a:	e004      	b.n	8003456 <_malloc_r+0x72>
 800344c:	6863      	ldr	r3, [r4, #4]
 800344e:	42a2      	cmp	r2, r4
 8003450:	bf0c      	ite	eq
 8003452:	600b      	streq	r3, [r1, #0]
 8003454:	6053      	strne	r3, [r2, #4]
 8003456:	4630      	mov	r0, r6
 8003458:	f000 fcb2 	bl	8003dc0 <__malloc_unlock>
 800345c:	f104 000b 	add.w	r0, r4, #11
 8003460:	1d23      	adds	r3, r4, #4
 8003462:	f020 0007 	bic.w	r0, r0, #7
 8003466:	1ac2      	subs	r2, r0, r3
 8003468:	d0cc      	beq.n	8003404 <_malloc_r+0x20>
 800346a:	1a1b      	subs	r3, r3, r0
 800346c:	50a3      	str	r3, [r4, r2]
 800346e:	e7c9      	b.n	8003404 <_malloc_r+0x20>
 8003470:	4622      	mov	r2, r4
 8003472:	6864      	ldr	r4, [r4, #4]
 8003474:	e7cc      	b.n	8003410 <_malloc_r+0x2c>
 8003476:	1cc4      	adds	r4, r0, #3
 8003478:	f024 0403 	bic.w	r4, r4, #3
 800347c:	42a0      	cmp	r0, r4
 800347e:	d0e3      	beq.n	8003448 <_malloc_r+0x64>
 8003480:	1a21      	subs	r1, r4, r0
 8003482:	4630      	mov	r0, r6
 8003484:	f000 fb3e 	bl	8003b04 <_sbrk_r>
 8003488:	3001      	adds	r0, #1
 800348a:	d1dd      	bne.n	8003448 <_malloc_r+0x64>
 800348c:	e7cf      	b.n	800342e <_malloc_r+0x4a>
 800348e:	bf00      	nop
 8003490:	200001bc 	.word	0x200001bc
 8003494:	200001c0 	.word	0x200001c0

08003498 <__sfputc_r>:
 8003498:	6893      	ldr	r3, [r2, #8]
 800349a:	3b01      	subs	r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	b410      	push	{r4}
 80034a0:	6093      	str	r3, [r2, #8]
 80034a2:	da08      	bge.n	80034b6 <__sfputc_r+0x1e>
 80034a4:	6994      	ldr	r4, [r2, #24]
 80034a6:	42a3      	cmp	r3, r4
 80034a8:	db01      	blt.n	80034ae <__sfputc_r+0x16>
 80034aa:	290a      	cmp	r1, #10
 80034ac:	d103      	bne.n	80034b6 <__sfputc_r+0x1e>
 80034ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034b2:	f000 bb7b 	b.w	8003bac <__swbuf_r>
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	1c58      	adds	r0, r3, #1
 80034ba:	6010      	str	r0, [r2, #0]
 80034bc:	7019      	strb	r1, [r3, #0]
 80034be:	4608      	mov	r0, r1
 80034c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <__sfputs_r>:
 80034c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c8:	4606      	mov	r6, r0
 80034ca:	460f      	mov	r7, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	18d5      	adds	r5, r2, r3
 80034d0:	42ac      	cmp	r4, r5
 80034d2:	d101      	bne.n	80034d8 <__sfputs_r+0x12>
 80034d4:	2000      	movs	r0, #0
 80034d6:	e007      	b.n	80034e8 <__sfputs_r+0x22>
 80034d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034dc:	463a      	mov	r2, r7
 80034de:	4630      	mov	r0, r6
 80034e0:	f7ff ffda 	bl	8003498 <__sfputc_r>
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	d1f3      	bne.n	80034d0 <__sfputs_r+0xa>
 80034e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034ec <_vfiprintf_r>:
 80034ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f0:	460d      	mov	r5, r1
 80034f2:	b09d      	sub	sp, #116	; 0x74
 80034f4:	4614      	mov	r4, r2
 80034f6:	4698      	mov	r8, r3
 80034f8:	4606      	mov	r6, r0
 80034fa:	b118      	cbz	r0, 8003504 <_vfiprintf_r+0x18>
 80034fc:	6983      	ldr	r3, [r0, #24]
 80034fe:	b90b      	cbnz	r3, 8003504 <_vfiprintf_r+0x18>
 8003500:	f7ff fe14 	bl	800312c <__sinit>
 8003504:	4b89      	ldr	r3, [pc, #548]	; (800372c <_vfiprintf_r+0x240>)
 8003506:	429d      	cmp	r5, r3
 8003508:	d11b      	bne.n	8003542 <_vfiprintf_r+0x56>
 800350a:	6875      	ldr	r5, [r6, #4]
 800350c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800350e:	07d9      	lsls	r1, r3, #31
 8003510:	d405      	bmi.n	800351e <_vfiprintf_r+0x32>
 8003512:	89ab      	ldrh	r3, [r5, #12]
 8003514:	059a      	lsls	r2, r3, #22
 8003516:	d402      	bmi.n	800351e <_vfiprintf_r+0x32>
 8003518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800351a:	f7ff fea5 	bl	8003268 <__retarget_lock_acquire_recursive>
 800351e:	89ab      	ldrh	r3, [r5, #12]
 8003520:	071b      	lsls	r3, r3, #28
 8003522:	d501      	bpl.n	8003528 <_vfiprintf_r+0x3c>
 8003524:	692b      	ldr	r3, [r5, #16]
 8003526:	b9eb      	cbnz	r3, 8003564 <_vfiprintf_r+0x78>
 8003528:	4629      	mov	r1, r5
 800352a:	4630      	mov	r0, r6
 800352c:	f000 fb90 	bl	8003c50 <__swsetup_r>
 8003530:	b1c0      	cbz	r0, 8003564 <_vfiprintf_r+0x78>
 8003532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003534:	07dc      	lsls	r4, r3, #31
 8003536:	d50e      	bpl.n	8003556 <_vfiprintf_r+0x6a>
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	b01d      	add	sp, #116	; 0x74
 800353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003542:	4b7b      	ldr	r3, [pc, #492]	; (8003730 <_vfiprintf_r+0x244>)
 8003544:	429d      	cmp	r5, r3
 8003546:	d101      	bne.n	800354c <_vfiprintf_r+0x60>
 8003548:	68b5      	ldr	r5, [r6, #8]
 800354a:	e7df      	b.n	800350c <_vfiprintf_r+0x20>
 800354c:	4b79      	ldr	r3, [pc, #484]	; (8003734 <_vfiprintf_r+0x248>)
 800354e:	429d      	cmp	r5, r3
 8003550:	bf08      	it	eq
 8003552:	68f5      	ldreq	r5, [r6, #12]
 8003554:	e7da      	b.n	800350c <_vfiprintf_r+0x20>
 8003556:	89ab      	ldrh	r3, [r5, #12]
 8003558:	0598      	lsls	r0, r3, #22
 800355a:	d4ed      	bmi.n	8003538 <_vfiprintf_r+0x4c>
 800355c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800355e:	f7ff fe84 	bl	800326a <__retarget_lock_release_recursive>
 8003562:	e7e9      	b.n	8003538 <_vfiprintf_r+0x4c>
 8003564:	2300      	movs	r3, #0
 8003566:	9309      	str	r3, [sp, #36]	; 0x24
 8003568:	2320      	movs	r3, #32
 800356a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800356e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003572:	2330      	movs	r3, #48	; 0x30
 8003574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003738 <_vfiprintf_r+0x24c>
 8003578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800357c:	f04f 0901 	mov.w	r9, #1
 8003580:	4623      	mov	r3, r4
 8003582:	469a      	mov	sl, r3
 8003584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003588:	b10a      	cbz	r2, 800358e <_vfiprintf_r+0xa2>
 800358a:	2a25      	cmp	r2, #37	; 0x25
 800358c:	d1f9      	bne.n	8003582 <_vfiprintf_r+0x96>
 800358e:	ebba 0b04 	subs.w	fp, sl, r4
 8003592:	d00b      	beq.n	80035ac <_vfiprintf_r+0xc0>
 8003594:	465b      	mov	r3, fp
 8003596:	4622      	mov	r2, r4
 8003598:	4629      	mov	r1, r5
 800359a:	4630      	mov	r0, r6
 800359c:	f7ff ff93 	bl	80034c6 <__sfputs_r>
 80035a0:	3001      	adds	r0, #1
 80035a2:	f000 80aa 	beq.w	80036fa <_vfiprintf_r+0x20e>
 80035a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035a8:	445a      	add	r2, fp
 80035aa:	9209      	str	r2, [sp, #36]	; 0x24
 80035ac:	f89a 3000 	ldrb.w	r3, [sl]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80a2 	beq.w	80036fa <_vfiprintf_r+0x20e>
 80035b6:	2300      	movs	r3, #0
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035c0:	f10a 0a01 	add.w	sl, sl, #1
 80035c4:	9304      	str	r3, [sp, #16]
 80035c6:	9307      	str	r3, [sp, #28]
 80035c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035cc:	931a      	str	r3, [sp, #104]	; 0x68
 80035ce:	4654      	mov	r4, sl
 80035d0:	2205      	movs	r2, #5
 80035d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d6:	4858      	ldr	r0, [pc, #352]	; (8003738 <_vfiprintf_r+0x24c>)
 80035d8:	f7fc fe02 	bl	80001e0 <memchr>
 80035dc:	9a04      	ldr	r2, [sp, #16]
 80035de:	b9d8      	cbnz	r0, 8003618 <_vfiprintf_r+0x12c>
 80035e0:	06d1      	lsls	r1, r2, #27
 80035e2:	bf44      	itt	mi
 80035e4:	2320      	movmi	r3, #32
 80035e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ea:	0713      	lsls	r3, r2, #28
 80035ec:	bf44      	itt	mi
 80035ee:	232b      	movmi	r3, #43	; 0x2b
 80035f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035f4:	f89a 3000 	ldrb.w	r3, [sl]
 80035f8:	2b2a      	cmp	r3, #42	; 0x2a
 80035fa:	d015      	beq.n	8003628 <_vfiprintf_r+0x13c>
 80035fc:	9a07      	ldr	r2, [sp, #28]
 80035fe:	4654      	mov	r4, sl
 8003600:	2000      	movs	r0, #0
 8003602:	f04f 0c0a 	mov.w	ip, #10
 8003606:	4621      	mov	r1, r4
 8003608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800360c:	3b30      	subs	r3, #48	; 0x30
 800360e:	2b09      	cmp	r3, #9
 8003610:	d94e      	bls.n	80036b0 <_vfiprintf_r+0x1c4>
 8003612:	b1b0      	cbz	r0, 8003642 <_vfiprintf_r+0x156>
 8003614:	9207      	str	r2, [sp, #28]
 8003616:	e014      	b.n	8003642 <_vfiprintf_r+0x156>
 8003618:	eba0 0308 	sub.w	r3, r0, r8
 800361c:	fa09 f303 	lsl.w	r3, r9, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	9304      	str	r3, [sp, #16]
 8003624:	46a2      	mov	sl, r4
 8003626:	e7d2      	b.n	80035ce <_vfiprintf_r+0xe2>
 8003628:	9b03      	ldr	r3, [sp, #12]
 800362a:	1d19      	adds	r1, r3, #4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	9103      	str	r1, [sp, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	bfbb      	ittet	lt
 8003634:	425b      	neglt	r3, r3
 8003636:	f042 0202 	orrlt.w	r2, r2, #2
 800363a:	9307      	strge	r3, [sp, #28]
 800363c:	9307      	strlt	r3, [sp, #28]
 800363e:	bfb8      	it	lt
 8003640:	9204      	strlt	r2, [sp, #16]
 8003642:	7823      	ldrb	r3, [r4, #0]
 8003644:	2b2e      	cmp	r3, #46	; 0x2e
 8003646:	d10c      	bne.n	8003662 <_vfiprintf_r+0x176>
 8003648:	7863      	ldrb	r3, [r4, #1]
 800364a:	2b2a      	cmp	r3, #42	; 0x2a
 800364c:	d135      	bne.n	80036ba <_vfiprintf_r+0x1ce>
 800364e:	9b03      	ldr	r3, [sp, #12]
 8003650:	1d1a      	adds	r2, r3, #4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	9203      	str	r2, [sp, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfb8      	it	lt
 800365a:	f04f 33ff 	movlt.w	r3, #4294967295
 800365e:	3402      	adds	r4, #2
 8003660:	9305      	str	r3, [sp, #20]
 8003662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003748 <_vfiprintf_r+0x25c>
 8003666:	7821      	ldrb	r1, [r4, #0]
 8003668:	2203      	movs	r2, #3
 800366a:	4650      	mov	r0, sl
 800366c:	f7fc fdb8 	bl	80001e0 <memchr>
 8003670:	b140      	cbz	r0, 8003684 <_vfiprintf_r+0x198>
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	eba0 000a 	sub.w	r0, r0, sl
 8003678:	fa03 f000 	lsl.w	r0, r3, r0
 800367c:	9b04      	ldr	r3, [sp, #16]
 800367e:	4303      	orrs	r3, r0
 8003680:	3401      	adds	r4, #1
 8003682:	9304      	str	r3, [sp, #16]
 8003684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003688:	482c      	ldr	r0, [pc, #176]	; (800373c <_vfiprintf_r+0x250>)
 800368a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800368e:	2206      	movs	r2, #6
 8003690:	f7fc fda6 	bl	80001e0 <memchr>
 8003694:	2800      	cmp	r0, #0
 8003696:	d03f      	beq.n	8003718 <_vfiprintf_r+0x22c>
 8003698:	4b29      	ldr	r3, [pc, #164]	; (8003740 <_vfiprintf_r+0x254>)
 800369a:	bb1b      	cbnz	r3, 80036e4 <_vfiprintf_r+0x1f8>
 800369c:	9b03      	ldr	r3, [sp, #12]
 800369e:	3307      	adds	r3, #7
 80036a0:	f023 0307 	bic.w	r3, r3, #7
 80036a4:	3308      	adds	r3, #8
 80036a6:	9303      	str	r3, [sp, #12]
 80036a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036aa:	443b      	add	r3, r7
 80036ac:	9309      	str	r3, [sp, #36]	; 0x24
 80036ae:	e767      	b.n	8003580 <_vfiprintf_r+0x94>
 80036b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80036b4:	460c      	mov	r4, r1
 80036b6:	2001      	movs	r0, #1
 80036b8:	e7a5      	b.n	8003606 <_vfiprintf_r+0x11a>
 80036ba:	2300      	movs	r3, #0
 80036bc:	3401      	adds	r4, #1
 80036be:	9305      	str	r3, [sp, #20]
 80036c0:	4619      	mov	r1, r3
 80036c2:	f04f 0c0a 	mov.w	ip, #10
 80036c6:	4620      	mov	r0, r4
 80036c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036cc:	3a30      	subs	r2, #48	; 0x30
 80036ce:	2a09      	cmp	r2, #9
 80036d0:	d903      	bls.n	80036da <_vfiprintf_r+0x1ee>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0c5      	beq.n	8003662 <_vfiprintf_r+0x176>
 80036d6:	9105      	str	r1, [sp, #20]
 80036d8:	e7c3      	b.n	8003662 <_vfiprintf_r+0x176>
 80036da:	fb0c 2101 	mla	r1, ip, r1, r2
 80036de:	4604      	mov	r4, r0
 80036e0:	2301      	movs	r3, #1
 80036e2:	e7f0      	b.n	80036c6 <_vfiprintf_r+0x1da>
 80036e4:	ab03      	add	r3, sp, #12
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	462a      	mov	r2, r5
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <_vfiprintf_r+0x258>)
 80036ec:	a904      	add	r1, sp, #16
 80036ee:	4630      	mov	r0, r6
 80036f0:	f3af 8000 	nop.w
 80036f4:	4607      	mov	r7, r0
 80036f6:	1c78      	adds	r0, r7, #1
 80036f8:	d1d6      	bne.n	80036a8 <_vfiprintf_r+0x1bc>
 80036fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036fc:	07d9      	lsls	r1, r3, #31
 80036fe:	d405      	bmi.n	800370c <_vfiprintf_r+0x220>
 8003700:	89ab      	ldrh	r3, [r5, #12]
 8003702:	059a      	lsls	r2, r3, #22
 8003704:	d402      	bmi.n	800370c <_vfiprintf_r+0x220>
 8003706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003708:	f7ff fdaf 	bl	800326a <__retarget_lock_release_recursive>
 800370c:	89ab      	ldrh	r3, [r5, #12]
 800370e:	065b      	lsls	r3, r3, #25
 8003710:	f53f af12 	bmi.w	8003538 <_vfiprintf_r+0x4c>
 8003714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003716:	e711      	b.n	800353c <_vfiprintf_r+0x50>
 8003718:	ab03      	add	r3, sp, #12
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	462a      	mov	r2, r5
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <_vfiprintf_r+0x258>)
 8003720:	a904      	add	r1, sp, #16
 8003722:	4630      	mov	r0, r6
 8003724:	f000 f880 	bl	8003828 <_printf_i>
 8003728:	e7e4      	b.n	80036f4 <_vfiprintf_r+0x208>
 800372a:	bf00      	nop
 800372c:	08004554 	.word	0x08004554
 8003730:	08004574 	.word	0x08004574
 8003734:	08004534 	.word	0x08004534
 8003738:	08004594 	.word	0x08004594
 800373c:	0800459e 	.word	0x0800459e
 8003740:	00000000 	.word	0x00000000
 8003744:	080034c7 	.word	0x080034c7
 8003748:	0800459a 	.word	0x0800459a

0800374c <_printf_common>:
 800374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	4616      	mov	r6, r2
 8003752:	4699      	mov	r9, r3
 8003754:	688a      	ldr	r2, [r1, #8]
 8003756:	690b      	ldr	r3, [r1, #16]
 8003758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800375c:	4293      	cmp	r3, r2
 800375e:	bfb8      	it	lt
 8003760:	4613      	movlt	r3, r2
 8003762:	6033      	str	r3, [r6, #0]
 8003764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003768:	4607      	mov	r7, r0
 800376a:	460c      	mov	r4, r1
 800376c:	b10a      	cbz	r2, 8003772 <_printf_common+0x26>
 800376e:	3301      	adds	r3, #1
 8003770:	6033      	str	r3, [r6, #0]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	0699      	lsls	r1, r3, #26
 8003776:	bf42      	ittt	mi
 8003778:	6833      	ldrmi	r3, [r6, #0]
 800377a:	3302      	addmi	r3, #2
 800377c:	6033      	strmi	r3, [r6, #0]
 800377e:	6825      	ldr	r5, [r4, #0]
 8003780:	f015 0506 	ands.w	r5, r5, #6
 8003784:	d106      	bne.n	8003794 <_printf_common+0x48>
 8003786:	f104 0a19 	add.w	sl, r4, #25
 800378a:	68e3      	ldr	r3, [r4, #12]
 800378c:	6832      	ldr	r2, [r6, #0]
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	42ab      	cmp	r3, r5
 8003792:	dc26      	bgt.n	80037e2 <_printf_common+0x96>
 8003794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003798:	1e13      	subs	r3, r2, #0
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	bf18      	it	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	0692      	lsls	r2, r2, #26
 80037a2:	d42b      	bmi.n	80037fc <_printf_common+0xb0>
 80037a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037a8:	4649      	mov	r1, r9
 80037aa:	4638      	mov	r0, r7
 80037ac:	47c0      	blx	r8
 80037ae:	3001      	adds	r0, #1
 80037b0:	d01e      	beq.n	80037f0 <_printf_common+0xa4>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	68e5      	ldr	r5, [r4, #12]
 80037b6:	6832      	ldr	r2, [r6, #0]
 80037b8:	f003 0306 	and.w	r3, r3, #6
 80037bc:	2b04      	cmp	r3, #4
 80037be:	bf08      	it	eq
 80037c0:	1aad      	subeq	r5, r5, r2
 80037c2:	68a3      	ldr	r3, [r4, #8]
 80037c4:	6922      	ldr	r2, [r4, #16]
 80037c6:	bf0c      	ite	eq
 80037c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037cc:	2500      	movne	r5, #0
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bfc4      	itt	gt
 80037d2:	1a9b      	subgt	r3, r3, r2
 80037d4:	18ed      	addgt	r5, r5, r3
 80037d6:	2600      	movs	r6, #0
 80037d8:	341a      	adds	r4, #26
 80037da:	42b5      	cmp	r5, r6
 80037dc:	d11a      	bne.n	8003814 <_printf_common+0xc8>
 80037de:	2000      	movs	r0, #0
 80037e0:	e008      	b.n	80037f4 <_printf_common+0xa8>
 80037e2:	2301      	movs	r3, #1
 80037e4:	4652      	mov	r2, sl
 80037e6:	4649      	mov	r1, r9
 80037e8:	4638      	mov	r0, r7
 80037ea:	47c0      	blx	r8
 80037ec:	3001      	adds	r0, #1
 80037ee:	d103      	bne.n	80037f8 <_printf_common+0xac>
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f8:	3501      	adds	r5, #1
 80037fa:	e7c6      	b.n	800378a <_printf_common+0x3e>
 80037fc:	18e1      	adds	r1, r4, r3
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	2030      	movs	r0, #48	; 0x30
 8003802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003806:	4422      	add	r2, r4
 8003808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800380c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003810:	3302      	adds	r3, #2
 8003812:	e7c7      	b.n	80037a4 <_printf_common+0x58>
 8003814:	2301      	movs	r3, #1
 8003816:	4622      	mov	r2, r4
 8003818:	4649      	mov	r1, r9
 800381a:	4638      	mov	r0, r7
 800381c:	47c0      	blx	r8
 800381e:	3001      	adds	r0, #1
 8003820:	d0e6      	beq.n	80037f0 <_printf_common+0xa4>
 8003822:	3601      	adds	r6, #1
 8003824:	e7d9      	b.n	80037da <_printf_common+0x8e>
	...

08003828 <_printf_i>:
 8003828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	460c      	mov	r4, r1
 800382e:	4691      	mov	r9, r2
 8003830:	7e27      	ldrb	r7, [r4, #24]
 8003832:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003834:	2f78      	cmp	r7, #120	; 0x78
 8003836:	4680      	mov	r8, r0
 8003838:	469a      	mov	sl, r3
 800383a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800383e:	d807      	bhi.n	8003850 <_printf_i+0x28>
 8003840:	2f62      	cmp	r7, #98	; 0x62
 8003842:	d80a      	bhi.n	800385a <_printf_i+0x32>
 8003844:	2f00      	cmp	r7, #0
 8003846:	f000 80d8 	beq.w	80039fa <_printf_i+0x1d2>
 800384a:	2f58      	cmp	r7, #88	; 0x58
 800384c:	f000 80a3 	beq.w	8003996 <_printf_i+0x16e>
 8003850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003858:	e03a      	b.n	80038d0 <_printf_i+0xa8>
 800385a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800385e:	2b15      	cmp	r3, #21
 8003860:	d8f6      	bhi.n	8003850 <_printf_i+0x28>
 8003862:	a001      	add	r0, pc, #4	; (adr r0, 8003868 <_printf_i+0x40>)
 8003864:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003868:	080038c1 	.word	0x080038c1
 800386c:	080038d5 	.word	0x080038d5
 8003870:	08003851 	.word	0x08003851
 8003874:	08003851 	.word	0x08003851
 8003878:	08003851 	.word	0x08003851
 800387c:	08003851 	.word	0x08003851
 8003880:	080038d5 	.word	0x080038d5
 8003884:	08003851 	.word	0x08003851
 8003888:	08003851 	.word	0x08003851
 800388c:	08003851 	.word	0x08003851
 8003890:	08003851 	.word	0x08003851
 8003894:	080039e1 	.word	0x080039e1
 8003898:	08003905 	.word	0x08003905
 800389c:	080039c3 	.word	0x080039c3
 80038a0:	08003851 	.word	0x08003851
 80038a4:	08003851 	.word	0x08003851
 80038a8:	08003a03 	.word	0x08003a03
 80038ac:	08003851 	.word	0x08003851
 80038b0:	08003905 	.word	0x08003905
 80038b4:	08003851 	.word	0x08003851
 80038b8:	08003851 	.word	0x08003851
 80038bc:	080039cb 	.word	0x080039cb
 80038c0:	680b      	ldr	r3, [r1, #0]
 80038c2:	1d1a      	adds	r2, r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	600a      	str	r2, [r1, #0]
 80038c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0a3      	b.n	8003a1c <_printf_i+0x1f4>
 80038d4:	6825      	ldr	r5, [r4, #0]
 80038d6:	6808      	ldr	r0, [r1, #0]
 80038d8:	062e      	lsls	r6, r5, #24
 80038da:	f100 0304 	add.w	r3, r0, #4
 80038de:	d50a      	bpl.n	80038f6 <_printf_i+0xce>
 80038e0:	6805      	ldr	r5, [r0, #0]
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	2d00      	cmp	r5, #0
 80038e6:	da03      	bge.n	80038f0 <_printf_i+0xc8>
 80038e8:	232d      	movs	r3, #45	; 0x2d
 80038ea:	426d      	negs	r5, r5
 80038ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038f0:	485e      	ldr	r0, [pc, #376]	; (8003a6c <_printf_i+0x244>)
 80038f2:	230a      	movs	r3, #10
 80038f4:	e019      	b.n	800392a <_printf_i+0x102>
 80038f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038fa:	6805      	ldr	r5, [r0, #0]
 80038fc:	600b      	str	r3, [r1, #0]
 80038fe:	bf18      	it	ne
 8003900:	b22d      	sxthne	r5, r5
 8003902:	e7ef      	b.n	80038e4 <_printf_i+0xbc>
 8003904:	680b      	ldr	r3, [r1, #0]
 8003906:	6825      	ldr	r5, [r4, #0]
 8003908:	1d18      	adds	r0, r3, #4
 800390a:	6008      	str	r0, [r1, #0]
 800390c:	0628      	lsls	r0, r5, #24
 800390e:	d501      	bpl.n	8003914 <_printf_i+0xec>
 8003910:	681d      	ldr	r5, [r3, #0]
 8003912:	e002      	b.n	800391a <_printf_i+0xf2>
 8003914:	0669      	lsls	r1, r5, #25
 8003916:	d5fb      	bpl.n	8003910 <_printf_i+0xe8>
 8003918:	881d      	ldrh	r5, [r3, #0]
 800391a:	4854      	ldr	r0, [pc, #336]	; (8003a6c <_printf_i+0x244>)
 800391c:	2f6f      	cmp	r7, #111	; 0x6f
 800391e:	bf0c      	ite	eq
 8003920:	2308      	moveq	r3, #8
 8003922:	230a      	movne	r3, #10
 8003924:	2100      	movs	r1, #0
 8003926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800392a:	6866      	ldr	r6, [r4, #4]
 800392c:	60a6      	str	r6, [r4, #8]
 800392e:	2e00      	cmp	r6, #0
 8003930:	bfa2      	ittt	ge
 8003932:	6821      	ldrge	r1, [r4, #0]
 8003934:	f021 0104 	bicge.w	r1, r1, #4
 8003938:	6021      	strge	r1, [r4, #0]
 800393a:	b90d      	cbnz	r5, 8003940 <_printf_i+0x118>
 800393c:	2e00      	cmp	r6, #0
 800393e:	d04d      	beq.n	80039dc <_printf_i+0x1b4>
 8003940:	4616      	mov	r6, r2
 8003942:	fbb5 f1f3 	udiv	r1, r5, r3
 8003946:	fb03 5711 	mls	r7, r3, r1, r5
 800394a:	5dc7      	ldrb	r7, [r0, r7]
 800394c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003950:	462f      	mov	r7, r5
 8003952:	42bb      	cmp	r3, r7
 8003954:	460d      	mov	r5, r1
 8003956:	d9f4      	bls.n	8003942 <_printf_i+0x11a>
 8003958:	2b08      	cmp	r3, #8
 800395a:	d10b      	bne.n	8003974 <_printf_i+0x14c>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	07df      	lsls	r7, r3, #31
 8003960:	d508      	bpl.n	8003974 <_printf_i+0x14c>
 8003962:	6923      	ldr	r3, [r4, #16]
 8003964:	6861      	ldr	r1, [r4, #4]
 8003966:	4299      	cmp	r1, r3
 8003968:	bfde      	ittt	le
 800396a:	2330      	movle	r3, #48	; 0x30
 800396c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003970:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003974:	1b92      	subs	r2, r2, r6
 8003976:	6122      	str	r2, [r4, #16]
 8003978:	f8cd a000 	str.w	sl, [sp]
 800397c:	464b      	mov	r3, r9
 800397e:	aa03      	add	r2, sp, #12
 8003980:	4621      	mov	r1, r4
 8003982:	4640      	mov	r0, r8
 8003984:	f7ff fee2 	bl	800374c <_printf_common>
 8003988:	3001      	adds	r0, #1
 800398a:	d14c      	bne.n	8003a26 <_printf_i+0x1fe>
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	b004      	add	sp, #16
 8003992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003996:	4835      	ldr	r0, [pc, #212]	; (8003a6c <_printf_i+0x244>)
 8003998:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	680e      	ldr	r6, [r1, #0]
 80039a0:	061f      	lsls	r7, r3, #24
 80039a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80039a6:	600e      	str	r6, [r1, #0]
 80039a8:	d514      	bpl.n	80039d4 <_printf_i+0x1ac>
 80039aa:	07d9      	lsls	r1, r3, #31
 80039ac:	bf44      	itt	mi
 80039ae:	f043 0320 	orrmi.w	r3, r3, #32
 80039b2:	6023      	strmi	r3, [r4, #0]
 80039b4:	b91d      	cbnz	r5, 80039be <_printf_i+0x196>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	f023 0320 	bic.w	r3, r3, #32
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	2310      	movs	r3, #16
 80039c0:	e7b0      	b.n	8003924 <_printf_i+0xfc>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	f043 0320 	orr.w	r3, r3, #32
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	2378      	movs	r3, #120	; 0x78
 80039cc:	4828      	ldr	r0, [pc, #160]	; (8003a70 <_printf_i+0x248>)
 80039ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039d2:	e7e3      	b.n	800399c <_printf_i+0x174>
 80039d4:	065e      	lsls	r6, r3, #25
 80039d6:	bf48      	it	mi
 80039d8:	b2ad      	uxthmi	r5, r5
 80039da:	e7e6      	b.n	80039aa <_printf_i+0x182>
 80039dc:	4616      	mov	r6, r2
 80039de:	e7bb      	b.n	8003958 <_printf_i+0x130>
 80039e0:	680b      	ldr	r3, [r1, #0]
 80039e2:	6826      	ldr	r6, [r4, #0]
 80039e4:	6960      	ldr	r0, [r4, #20]
 80039e6:	1d1d      	adds	r5, r3, #4
 80039e8:	600d      	str	r5, [r1, #0]
 80039ea:	0635      	lsls	r5, r6, #24
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	d501      	bpl.n	80039f4 <_printf_i+0x1cc>
 80039f0:	6018      	str	r0, [r3, #0]
 80039f2:	e002      	b.n	80039fa <_printf_i+0x1d2>
 80039f4:	0671      	lsls	r1, r6, #25
 80039f6:	d5fb      	bpl.n	80039f0 <_printf_i+0x1c8>
 80039f8:	8018      	strh	r0, [r3, #0]
 80039fa:	2300      	movs	r3, #0
 80039fc:	6123      	str	r3, [r4, #16]
 80039fe:	4616      	mov	r6, r2
 8003a00:	e7ba      	b.n	8003978 <_printf_i+0x150>
 8003a02:	680b      	ldr	r3, [r1, #0]
 8003a04:	1d1a      	adds	r2, r3, #4
 8003a06:	600a      	str	r2, [r1, #0]
 8003a08:	681e      	ldr	r6, [r3, #0]
 8003a0a:	6862      	ldr	r2, [r4, #4]
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4630      	mov	r0, r6
 8003a10:	f7fc fbe6 	bl	80001e0 <memchr>
 8003a14:	b108      	cbz	r0, 8003a1a <_printf_i+0x1f2>
 8003a16:	1b80      	subs	r0, r0, r6
 8003a18:	6060      	str	r0, [r4, #4]
 8003a1a:	6863      	ldr	r3, [r4, #4]
 8003a1c:	6123      	str	r3, [r4, #16]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a24:	e7a8      	b.n	8003978 <_printf_i+0x150>
 8003a26:	6923      	ldr	r3, [r4, #16]
 8003a28:	4632      	mov	r2, r6
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	4640      	mov	r0, r8
 8003a2e:	47d0      	blx	sl
 8003a30:	3001      	adds	r0, #1
 8003a32:	d0ab      	beq.n	800398c <_printf_i+0x164>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	079b      	lsls	r3, r3, #30
 8003a38:	d413      	bmi.n	8003a62 <_printf_i+0x23a>
 8003a3a:	68e0      	ldr	r0, [r4, #12]
 8003a3c:	9b03      	ldr	r3, [sp, #12]
 8003a3e:	4298      	cmp	r0, r3
 8003a40:	bfb8      	it	lt
 8003a42:	4618      	movlt	r0, r3
 8003a44:	e7a4      	b.n	8003990 <_printf_i+0x168>
 8003a46:	2301      	movs	r3, #1
 8003a48:	4632      	mov	r2, r6
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	47d0      	blx	sl
 8003a50:	3001      	adds	r0, #1
 8003a52:	d09b      	beq.n	800398c <_printf_i+0x164>
 8003a54:	3501      	adds	r5, #1
 8003a56:	68e3      	ldr	r3, [r4, #12]
 8003a58:	9903      	ldr	r1, [sp, #12]
 8003a5a:	1a5b      	subs	r3, r3, r1
 8003a5c:	42ab      	cmp	r3, r5
 8003a5e:	dcf2      	bgt.n	8003a46 <_printf_i+0x21e>
 8003a60:	e7eb      	b.n	8003a3a <_printf_i+0x212>
 8003a62:	2500      	movs	r5, #0
 8003a64:	f104 0619 	add.w	r6, r4, #25
 8003a68:	e7f5      	b.n	8003a56 <_printf_i+0x22e>
 8003a6a:	bf00      	nop
 8003a6c:	080045a5 	.word	0x080045a5
 8003a70:	080045b6 	.word	0x080045b6

08003a74 <_putc_r>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	460d      	mov	r5, r1
 8003a78:	4614      	mov	r4, r2
 8003a7a:	4606      	mov	r6, r0
 8003a7c:	b118      	cbz	r0, 8003a86 <_putc_r+0x12>
 8003a7e:	6983      	ldr	r3, [r0, #24]
 8003a80:	b90b      	cbnz	r3, 8003a86 <_putc_r+0x12>
 8003a82:	f7ff fb53 	bl	800312c <__sinit>
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <_putc_r+0x84>)
 8003a88:	429c      	cmp	r4, r3
 8003a8a:	d124      	bne.n	8003ad6 <_putc_r+0x62>
 8003a8c:	6874      	ldr	r4, [r6, #4]
 8003a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a90:	07d8      	lsls	r0, r3, #31
 8003a92:	d405      	bmi.n	8003aa0 <_putc_r+0x2c>
 8003a94:	89a3      	ldrh	r3, [r4, #12]
 8003a96:	0599      	lsls	r1, r3, #22
 8003a98:	d402      	bmi.n	8003aa0 <_putc_r+0x2c>
 8003a9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a9c:	f7ff fbe4 	bl	8003268 <__retarget_lock_acquire_recursive>
 8003aa0:	68a3      	ldr	r3, [r4, #8]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	60a3      	str	r3, [r4, #8]
 8003aa8:	da05      	bge.n	8003ab6 <_putc_r+0x42>
 8003aaa:	69a2      	ldr	r2, [r4, #24]
 8003aac:	4293      	cmp	r3, r2
 8003aae:	db1c      	blt.n	8003aea <_putc_r+0x76>
 8003ab0:	b2eb      	uxtb	r3, r5
 8003ab2:	2b0a      	cmp	r3, #10
 8003ab4:	d019      	beq.n	8003aea <_putc_r+0x76>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	6022      	str	r2, [r4, #0]
 8003abc:	701d      	strb	r5, [r3, #0]
 8003abe:	b2ed      	uxtb	r5, r5
 8003ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ac2:	07da      	lsls	r2, r3, #31
 8003ac4:	d405      	bmi.n	8003ad2 <_putc_r+0x5e>
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	059b      	lsls	r3, r3, #22
 8003aca:	d402      	bmi.n	8003ad2 <_putc_r+0x5e>
 8003acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ace:	f7ff fbcc 	bl	800326a <__retarget_lock_release_recursive>
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <_putc_r+0x88>)
 8003ad8:	429c      	cmp	r4, r3
 8003ada:	d101      	bne.n	8003ae0 <_putc_r+0x6c>
 8003adc:	68b4      	ldr	r4, [r6, #8]
 8003ade:	e7d6      	b.n	8003a8e <_putc_r+0x1a>
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <_putc_r+0x8c>)
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	bf08      	it	eq
 8003ae6:	68f4      	ldreq	r4, [r6, #12]
 8003ae8:	e7d1      	b.n	8003a8e <_putc_r+0x1a>
 8003aea:	4629      	mov	r1, r5
 8003aec:	4622      	mov	r2, r4
 8003aee:	4630      	mov	r0, r6
 8003af0:	f000 f85c 	bl	8003bac <__swbuf_r>
 8003af4:	4605      	mov	r5, r0
 8003af6:	e7e3      	b.n	8003ac0 <_putc_r+0x4c>
 8003af8:	08004554 	.word	0x08004554
 8003afc:	08004574 	.word	0x08004574
 8003b00:	08004534 	.word	0x08004534

08003b04 <_sbrk_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4d06      	ldr	r5, [pc, #24]	; (8003b20 <_sbrk_r+0x1c>)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	f7fe fcec 	bl	80024ec <_sbrk>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_sbrk_r+0x1a>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_sbrk_r+0x1a>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	20000230 	.word	0x20000230

08003b24 <__sread>:
 8003b24:	b510      	push	{r4, lr}
 8003b26:	460c      	mov	r4, r1
 8003b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b2c:	f000 f94e 	bl	8003dcc <_read_r>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	bfab      	itete	ge
 8003b34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b36:	89a3      	ldrhlt	r3, [r4, #12]
 8003b38:	181b      	addge	r3, r3, r0
 8003b3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b3e:	bfac      	ite	ge
 8003b40:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b42:	81a3      	strhlt	r3, [r4, #12]
 8003b44:	bd10      	pop	{r4, pc}

08003b46 <__swrite>:
 8003b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4a:	461f      	mov	r7, r3
 8003b4c:	898b      	ldrh	r3, [r1, #12]
 8003b4e:	05db      	lsls	r3, r3, #23
 8003b50:	4605      	mov	r5, r0
 8003b52:	460c      	mov	r4, r1
 8003b54:	4616      	mov	r6, r2
 8003b56:	d505      	bpl.n	8003b64 <__swrite+0x1e>
 8003b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f000 f916 	bl	8003d90 <_lseek_r>
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b6e:	81a3      	strh	r3, [r4, #12]
 8003b70:	4632      	mov	r2, r6
 8003b72:	463b      	mov	r3, r7
 8003b74:	4628      	mov	r0, r5
 8003b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7a:	f7fd babf 	b.w	80010fc <_write_r>

08003b7e <__sseek>:
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	460c      	mov	r4, r1
 8003b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b86:	f000 f903 	bl	8003d90 <_lseek_r>
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	bf15      	itete	ne
 8003b90:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b9a:	81a3      	strheq	r3, [r4, #12]
 8003b9c:	bf18      	it	ne
 8003b9e:	81a3      	strhne	r3, [r4, #12]
 8003ba0:	bd10      	pop	{r4, pc}

08003ba2 <__sclose>:
 8003ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba6:	f000 b8c1 	b.w	8003d2c <_close_r>
	...

08003bac <__swbuf_r>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	460e      	mov	r6, r1
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	4605      	mov	r5, r0
 8003bb4:	b118      	cbz	r0, 8003bbe <__swbuf_r+0x12>
 8003bb6:	6983      	ldr	r3, [r0, #24]
 8003bb8:	b90b      	cbnz	r3, 8003bbe <__swbuf_r+0x12>
 8003bba:	f7ff fab7 	bl	800312c <__sinit>
 8003bbe:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <__swbuf_r+0x98>)
 8003bc0:	429c      	cmp	r4, r3
 8003bc2:	d12b      	bne.n	8003c1c <__swbuf_r+0x70>
 8003bc4:	686c      	ldr	r4, [r5, #4]
 8003bc6:	69a3      	ldr	r3, [r4, #24]
 8003bc8:	60a3      	str	r3, [r4, #8]
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	071a      	lsls	r2, r3, #28
 8003bce:	d52f      	bpl.n	8003c30 <__swbuf_r+0x84>
 8003bd0:	6923      	ldr	r3, [r4, #16]
 8003bd2:	b36b      	cbz	r3, 8003c30 <__swbuf_r+0x84>
 8003bd4:	6923      	ldr	r3, [r4, #16]
 8003bd6:	6820      	ldr	r0, [r4, #0]
 8003bd8:	1ac0      	subs	r0, r0, r3
 8003bda:	6963      	ldr	r3, [r4, #20]
 8003bdc:	b2f6      	uxtb	r6, r6
 8003bde:	4283      	cmp	r3, r0
 8003be0:	4637      	mov	r7, r6
 8003be2:	dc04      	bgt.n	8003bee <__swbuf_r+0x42>
 8003be4:	4621      	mov	r1, r4
 8003be6:	4628      	mov	r0, r5
 8003be8:	f7ff fa0c 	bl	8003004 <_fflush_r>
 8003bec:	bb30      	cbnz	r0, 8003c3c <__swbuf_r+0x90>
 8003bee:	68a3      	ldr	r3, [r4, #8]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	60a3      	str	r3, [r4, #8]
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	6022      	str	r2, [r4, #0]
 8003bfa:	701e      	strb	r6, [r3, #0]
 8003bfc:	6963      	ldr	r3, [r4, #20]
 8003bfe:	3001      	adds	r0, #1
 8003c00:	4283      	cmp	r3, r0
 8003c02:	d004      	beq.n	8003c0e <__swbuf_r+0x62>
 8003c04:	89a3      	ldrh	r3, [r4, #12]
 8003c06:	07db      	lsls	r3, r3, #31
 8003c08:	d506      	bpl.n	8003c18 <__swbuf_r+0x6c>
 8003c0a:	2e0a      	cmp	r6, #10
 8003c0c:	d104      	bne.n	8003c18 <__swbuf_r+0x6c>
 8003c0e:	4621      	mov	r1, r4
 8003c10:	4628      	mov	r0, r5
 8003c12:	f7ff f9f7 	bl	8003004 <_fflush_r>
 8003c16:	b988      	cbnz	r0, 8003c3c <__swbuf_r+0x90>
 8003c18:	4638      	mov	r0, r7
 8003c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <__swbuf_r+0x9c>)
 8003c1e:	429c      	cmp	r4, r3
 8003c20:	d101      	bne.n	8003c26 <__swbuf_r+0x7a>
 8003c22:	68ac      	ldr	r4, [r5, #8]
 8003c24:	e7cf      	b.n	8003bc6 <__swbuf_r+0x1a>
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <__swbuf_r+0xa0>)
 8003c28:	429c      	cmp	r4, r3
 8003c2a:	bf08      	it	eq
 8003c2c:	68ec      	ldreq	r4, [r5, #12]
 8003c2e:	e7ca      	b.n	8003bc6 <__swbuf_r+0x1a>
 8003c30:	4621      	mov	r1, r4
 8003c32:	4628      	mov	r0, r5
 8003c34:	f000 f80c 	bl	8003c50 <__swsetup_r>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d0cb      	beq.n	8003bd4 <__swbuf_r+0x28>
 8003c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8003c40:	e7ea      	b.n	8003c18 <__swbuf_r+0x6c>
 8003c42:	bf00      	nop
 8003c44:	08004554 	.word	0x08004554
 8003c48:	08004574 	.word	0x08004574
 8003c4c:	08004534 	.word	0x08004534

08003c50 <__swsetup_r>:
 8003c50:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <__swsetup_r+0xcc>)
 8003c52:	b570      	push	{r4, r5, r6, lr}
 8003c54:	681d      	ldr	r5, [r3, #0]
 8003c56:	4606      	mov	r6, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	b125      	cbz	r5, 8003c66 <__swsetup_r+0x16>
 8003c5c:	69ab      	ldr	r3, [r5, #24]
 8003c5e:	b913      	cbnz	r3, 8003c66 <__swsetup_r+0x16>
 8003c60:	4628      	mov	r0, r5
 8003c62:	f7ff fa63 	bl	800312c <__sinit>
 8003c66:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <__swsetup_r+0xd0>)
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d10f      	bne.n	8003c8c <__swsetup_r+0x3c>
 8003c6c:	686c      	ldr	r4, [r5, #4]
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c74:	0719      	lsls	r1, r3, #28
 8003c76:	d42c      	bmi.n	8003cd2 <__swsetup_r+0x82>
 8003c78:	06dd      	lsls	r5, r3, #27
 8003c7a:	d411      	bmi.n	8003ca0 <__swsetup_r+0x50>
 8003c7c:	2309      	movs	r3, #9
 8003c7e:	6033      	str	r3, [r6, #0]
 8003c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	e03e      	b.n	8003d0a <__swsetup_r+0xba>
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <__swsetup_r+0xd4>)
 8003c8e:	429c      	cmp	r4, r3
 8003c90:	d101      	bne.n	8003c96 <__swsetup_r+0x46>
 8003c92:	68ac      	ldr	r4, [r5, #8]
 8003c94:	e7eb      	b.n	8003c6e <__swsetup_r+0x1e>
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <__swsetup_r+0xd8>)
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	bf08      	it	eq
 8003c9c:	68ec      	ldreq	r4, [r5, #12]
 8003c9e:	e7e6      	b.n	8003c6e <__swsetup_r+0x1e>
 8003ca0:	0758      	lsls	r0, r3, #29
 8003ca2:	d512      	bpl.n	8003cca <__swsetup_r+0x7a>
 8003ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ca6:	b141      	cbz	r1, 8003cba <__swsetup_r+0x6a>
 8003ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cac:	4299      	cmp	r1, r3
 8003cae:	d002      	beq.n	8003cb6 <__swsetup_r+0x66>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f7ff fb47 	bl	8003344 <_free_r>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8003cba:	89a3      	ldrh	r3, [r4, #12]
 8003cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6063      	str	r3, [r4, #4]
 8003cc6:	6923      	ldr	r3, [r4, #16]
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	6923      	ldr	r3, [r4, #16]
 8003cd4:	b94b      	cbnz	r3, 8003cea <__swsetup_r+0x9a>
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce0:	d003      	beq.n	8003cea <__swsetup_r+0x9a>
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	f7ff fae5 	bl	80032b4 <__smakebuf_r>
 8003cea:	89a0      	ldrh	r0, [r4, #12]
 8003cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cf0:	f010 0301 	ands.w	r3, r0, #1
 8003cf4:	d00a      	beq.n	8003d0c <__swsetup_r+0xbc>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60a3      	str	r3, [r4, #8]
 8003cfa:	6963      	ldr	r3, [r4, #20]
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	61a3      	str	r3, [r4, #24]
 8003d00:	6923      	ldr	r3, [r4, #16]
 8003d02:	b943      	cbnz	r3, 8003d16 <__swsetup_r+0xc6>
 8003d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d08:	d1ba      	bne.n	8003c80 <__swsetup_r+0x30>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	0781      	lsls	r1, r0, #30
 8003d0e:	bf58      	it	pl
 8003d10:	6963      	ldrpl	r3, [r4, #20]
 8003d12:	60a3      	str	r3, [r4, #8]
 8003d14:	e7f4      	b.n	8003d00 <__swsetup_r+0xb0>
 8003d16:	2000      	movs	r0, #0
 8003d18:	e7f7      	b.n	8003d0a <__swsetup_r+0xba>
 8003d1a:	bf00      	nop
 8003d1c:	2000002c 	.word	0x2000002c
 8003d20:	08004554 	.word	0x08004554
 8003d24:	08004574 	.word	0x08004574
 8003d28:	08004534 	.word	0x08004534

08003d2c <_close_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4d06      	ldr	r5, [pc, #24]	; (8003d48 <_close_r+0x1c>)
 8003d30:	2300      	movs	r3, #0
 8003d32:	4604      	mov	r4, r0
 8003d34:	4608      	mov	r0, r1
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	f7fe fba3 	bl	8002482 <_close>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_close_r+0x1a>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_close_r+0x1a>
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	20000230 	.word	0x20000230

08003d4c <_fstat_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4d07      	ldr	r5, [pc, #28]	; (8003d6c <_fstat_r+0x20>)
 8003d50:	2300      	movs	r3, #0
 8003d52:	4604      	mov	r4, r0
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	602b      	str	r3, [r5, #0]
 8003d5a:	f7fe fb9e 	bl	800249a <_fstat>
 8003d5e:	1c43      	adds	r3, r0, #1
 8003d60:	d102      	bne.n	8003d68 <_fstat_r+0x1c>
 8003d62:	682b      	ldr	r3, [r5, #0]
 8003d64:	b103      	cbz	r3, 8003d68 <_fstat_r+0x1c>
 8003d66:	6023      	str	r3, [r4, #0]
 8003d68:	bd38      	pop	{r3, r4, r5, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000230 	.word	0x20000230

08003d70 <_isatty_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d06      	ldr	r5, [pc, #24]	; (8003d8c <_isatty_r+0x1c>)
 8003d74:	2300      	movs	r3, #0
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	f7fe fb9d 	bl	80024ba <_isatty>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d102      	bne.n	8003d8a <_isatty_r+0x1a>
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	b103      	cbz	r3, 8003d8a <_isatty_r+0x1a>
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	20000230 	.word	0x20000230

08003d90 <_lseek_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4d07      	ldr	r5, [pc, #28]	; (8003db0 <_lseek_r+0x20>)
 8003d94:	4604      	mov	r4, r0
 8003d96:	4608      	mov	r0, r1
 8003d98:	4611      	mov	r1, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	602a      	str	r2, [r5, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f7fe fb96 	bl	80024d0 <_lseek>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_lseek_r+0x1e>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_lseek_r+0x1e>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	20000230 	.word	0x20000230

08003db4 <__malloc_lock>:
 8003db4:	4801      	ldr	r0, [pc, #4]	; (8003dbc <__malloc_lock+0x8>)
 8003db6:	f7ff ba57 	b.w	8003268 <__retarget_lock_acquire_recursive>
 8003dba:	bf00      	nop
 8003dbc:	20000228 	.word	0x20000228

08003dc0 <__malloc_unlock>:
 8003dc0:	4801      	ldr	r0, [pc, #4]	; (8003dc8 <__malloc_unlock+0x8>)
 8003dc2:	f7ff ba52 	b.w	800326a <__retarget_lock_release_recursive>
 8003dc6:	bf00      	nop
 8003dc8:	20000228 	.word	0x20000228

08003dcc <_read_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4d07      	ldr	r5, [pc, #28]	; (8003dec <_read_r+0x20>)
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	4608      	mov	r0, r1
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	602a      	str	r2, [r5, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f7fe fb34 	bl	8002448 <_read>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d102      	bne.n	8003dea <_read_r+0x1e>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	b103      	cbz	r3, 8003dea <_read_r+0x1e>
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	20000230 	.word	0x20000230

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
