
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002294  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800256c  0800256c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800256c  0800256c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800256c  0800256c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002570  08002570  00012570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000090  08002604  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002604  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006faf  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000137f  00000000  00000000  0002706f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000540  00000000  00000000  000283f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a8  00000000  00000000  00028930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035bb  00000000  00000000  00028dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056a6  00000000  00000000  0002c393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a076  00000000  00000000  00031a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008baaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d38  00000000  00000000  0008bb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800240c 	.word	0x0800240c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800240c 	.word	0x0800240c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000270:	b480      	push	{r7}
 8000272:	b08b      	sub	sp, #44	; 0x2c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000298:	4b91      	ldr	r3, [pc, #580]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	2b08      	cmp	r3, #8
 80002a6:	d011      	beq.n	80002cc <RCC_GetClocksFreq+0x5c>
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	2b08      	cmp	r3, #8
 80002ac:	d837      	bhi.n	800031e <RCC_GetClocksFreq+0xae>
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <RCC_GetClocksFreq+0x4c>
 80002b4:	6a3b      	ldr	r3, [r7, #32]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d004      	beq.n	80002c4 <RCC_GetClocksFreq+0x54>
 80002ba:	e030      	b.n	800031e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a89      	ldr	r2, [pc, #548]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c0:	601a      	str	r2, [r3, #0]
      break;
 80002c2:	e030      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a87      	ldr	r2, [pc, #540]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c8:	601a      	str	r2, [r3, #0]
      break;
 80002ca:	e02c      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002cc:	4b84      	ldr	r3, [pc, #528]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002d4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002d6:	4b82      	ldr	r3, [pc, #520]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	0c9b      	lsrs	r3, r3, #18
 80002e4:	3302      	adds	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4a7d      	ldr	r2, [pc, #500]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e00d      	b.n	8000316 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002fa:	4b79      	ldr	r3, [pc, #484]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000306:	4a77      	ldr	r2, [pc, #476]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fbb2 f2f3 	udiv	r2, r2, r3
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	fb02 f303 	mul.w	r3, r2, r3
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031a:	601a      	str	r2, [r3, #0]
      break;
 800031c:	e003      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a70      	ldr	r2, [pc, #448]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000322:	601a      	str	r2, [r3, #0]
      break;
 8000324:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000326:	4b6e      	ldr	r3, [pc, #440]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800032e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000336:	4a6d      	ldr	r2, [pc, #436]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	40da      	lsrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800034e:	4b64      	ldr	r3, [pc, #400]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000356:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000358:	6a3b      	ldr	r3, [r7, #32]
 800035a:	0a1b      	lsrs	r3, r3, #8
 800035c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800035e:	4a63      	ldr	r2, [pc, #396]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	40da      	lsrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000376:	4b5a      	ldr	r3, [pc, #360]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800037e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	0adb      	lsrs	r3, r3, #11
 8000384:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000386:	4a59      	ldr	r2, [pc, #356]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000388:	6a3b      	ldr	r3, [r7, #32]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	40da      	lsrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800039e:	4b50      	ldr	r3, [pc, #320]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003a8:	6a3b      	ldr	r3, [r7, #32]
 80003aa:	091b      	lsrs	r3, r3, #4
 80003ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ae:	4a50      	ldr	r2, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d006      	beq.n	80003d2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	e003      	b.n	80003da <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003da:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003de:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	0a5b      	lsrs	r3, r3, #9
 80003e8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ea:	4a41      	ldr	r2, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	fbb2 f2f3 	udiv	r2, r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	e003      	b.n	8000416 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000416:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	f003 0310 	and.w	r3, r3, #16
 800041e:	2b10      	cmp	r3, #16
 8000420:	d003      	beq.n	800042a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	e003      	b.n	8000432 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	2b20      	cmp	r3, #32
 800043c:	d003      	beq.n	8000446 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a28      	ldr	r2, [pc, #160]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000442:	61da      	str	r2, [r3, #28]
 8000444:	e003      	b.n	800044e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045a:	d10d      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000462:	429a      	cmp	r2, r3
 8000464:	d108      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	429a      	cmp	r2, r3
 800046c:	d104      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	005a      	lsls	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	e003      	b.n	8000480 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048c:	d10d      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000494:	429a      	cmp	r2, r3
 8000496:	d108      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	d104      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	005a      	lsls	r2, r3, #1
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
 80004a8:	e003      	b.n	80004b2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d104      	bne.n	80004c8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
 80004c6:	e029      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d10f      	bne.n	80004f4 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
 80004dc:	e01e      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	007a1200 	.word	0x007a1200
 80004e8:	003d0900 	.word	0x003d0900
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80004f4:	4b66      	ldr	r3, [pc, #408]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f003 0303 	and.w	r3, r3, #3
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d104      	bne.n	800050a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
 8000508:	e008      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800050a:	4b61      	ldr	r3, [pc, #388]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	2b03      	cmp	r3, #3
 8000514:	d102      	bne.n	800051c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a5e      	ldr	r2, [pc, #376]	; (8000694 <RCC_GetClocksFreq+0x424>)
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689a      	ldr	r2, [r3, #8]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000530:	e021      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000532:	4b57      	ldr	r3, [pc, #348]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800053a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053e:	d104      	bne.n	800054a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
 8000548:	e015      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800054a:	4b51      	ldr	r3, [pc, #324]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000556:	d104      	bne.n	8000562 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000560:	e009      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800056a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800056e:	d102      	bne.n	8000576 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a48      	ldr	r2, [pc, #288]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d104      	bne.n	800058c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
 800058a:	e021      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000598:	d104      	bne.n	80005a4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	631a      	str	r2, [r3, #48]	; 0x30
 80005a2:	e015      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005b0:	d104      	bne.n	80005bc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ba:	e009      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005c8:	d102      	bne.n	80005d0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a31      	ldr	r2, [pc, #196]	; (8000694 <RCC_GetClocksFreq+0x424>)
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
 80005e4:	e021      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80005f2:	d104      	bne.n	80005fe <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
 80005fc:	e015      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800060a:	d104      	bne.n	8000616 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
 8000614:	e009      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800061e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000622:	d102      	bne.n	800062a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d104      	bne.n	8000640 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800063e:	e021      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800064c:	d104      	bne.n	8000658 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000656:	e015      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000664:	d104      	bne.n	8000670 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800066e:	e009      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000678:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800067c:	d102      	bne.n	8000684 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000682:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000684:	bf00      	nop
 8000686:	372c      	adds	r7, #44	; 0x2c
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	007a1200 	.word	0x007a1200

08000698 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006ee:	2201      	movs	r2, #1
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d103      	bne.n	8000706 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e005      	b.n	8000712 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d102      	bne.n	8000712 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3308      	adds	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000724:	e006      	b.n	8000734 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43da      	mvns	r2, r3
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3724      	adds	r7, #36	; 0x24
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000772:	b480      	push	{r7}
 8000774:	b087      	sub	sp, #28
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b29b      	uxth	r3, r3
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800079c:	2201      	movs	r2, #1
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d105      	bne.n	80007b8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	4013      	ands	r3, r2
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e00d      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d105      	bne.n	80007ca <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4013      	ands	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e004      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4013      	ands	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007da:	2201      	movs	r2, #1
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <USART_GetITStatus+0x8e>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80007fa:	2301      	movs	r3, #1
 80007fc:	74fb      	strb	r3, [r7, #19]
 80007fe:	e001      	b.n	8000804 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000804:	7cfb      	ldrb	r3, [r7, #19]
}
 8000806:	4618      	mov	r0, r3
 8000808:	371c      	adds	r7, #28
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2201      	movs	r2, #1
 8000826:	fa02 f103 	lsl.w	r1, r2, r3
 800082a:	4a06      	ldr	r2, [pc, #24]	; (8000844 <NVIC_EnableIRQ+0x30>)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	095b      	lsrs	r3, r3, #5
 8000832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	b29b      	uxth	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <uart_put_char+0x30>)
 800085a:	f7ff ff1d 	bl	8000698 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800085e:	bf00      	nop
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <uart_put_char+0x30>)
 8000864:	f7ff ff6c 	bl	8000740 <USART_GetFlagStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f8      	beq.n	8000860 <uart_put_char+0x18>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40004400 	.word	0x40004400

0800087c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e012      	b.n	80008b6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b0a      	cmp	r3, #10
 800089a:	d102      	bne.n	80008a2 <_write_r+0x26>
            uart_put_char('\r');
 800089c:	200d      	movs	r0, #13
 800089e:	f7ff ffd3 	bl	8000848 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffcc 	bl	8000848 <uart_put_char>
    for (n = 0; n < len; n++) {
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	3301      	adds	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	dbe8      	blt.n	8000890 <_write_r+0x14>
    }

    return len;
 80008be:	683b      	ldr	r3, [r7, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80008cc:	4915      	ldr	r1, [pc, #84]	; (8000924 <USART2_IRQHandler+0x5c>)
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <USART2_IRQHandler+0x60>)
 80008d0:	f7ff ff4f 	bl	8000772 <USART_GetITStatus>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d021      	beq.n	800091e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <USART2_IRQHandler+0x60>)
 80008dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008de:	b299      	uxth	r1, r3
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <USART2_IRQHandler+0x64>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	b2d0      	uxtb	r0, r2
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <USART2_IRQHandler+0x64>)
 80008ec:	7010      	strb	r0, [r2, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	b2c9      	uxtb	r1, r1
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <USART2_IRQHandler+0x68>)
 80008f4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <USART2_IRQHandler+0x6c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d107      	bne.n	8000910 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <USART2_IRQHandler+0x70>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	3301      	adds	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <USART2_IRQHandler+0x70>)
 800090c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800090e:	e006      	b.n	800091e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <USART2_IRQHandler+0x6c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <USART2_IRQHandler+0x6c>)
 800091c:	701a      	strb	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	00050105 	.word	0x00050105
 8000928:	40004400 	.word	0x40004400
 800092c:	200001ac 	.word	0x200001ac
 8000930:	200000ac 	.word	0x200000ac
 8000934:	200001ae 	.word	0x200001ae
 8000938:	200001ad 	.word	0x200001ad

0800093c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000944:	4b86      	ldr	r3, [pc, #536]	; (8000b60 <uart_init+0x224>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fd5b 	bl	8001408 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000952:	4b83      	ldr	r3, [pc, #524]	; (8000b60 <uart_init+0x224>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fd54 	bl	8001408 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000960:	4b80      	ldr	r3, [pc, #512]	; (8000b64 <uart_init+0x228>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	4a7f      	ldr	r2, [pc, #508]	; (8000b64 <uart_init+0x228>)
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800096c:	4b7d      	ldr	r3, [pc, #500]	; (8000b64 <uart_init+0x228>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a7c      	ldr	r2, [pc, #496]	; (8000b64 <uart_init+0x228>)
 8000972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000976:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800097c:	6a1b      	ldr	r3, [r3, #32]
 800097e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000986:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000996:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80009a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80009a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ac:	6a1b      	ldr	r3, [r3, #32]
 80009ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009b2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80009b6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80009b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009c6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80009c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009d2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009d6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80009d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009dc:	889b      	ldrh	r3, [r3, #4]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e4:	f023 030c 	bic.w	r3, r3, #12
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80009ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f4:	8892      	ldrh	r2, [r2, #4]
 80009f6:	b292      	uxth	r2, r2
 80009f8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80009fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a08:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a14:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a18:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a28:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a34:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a38:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a3a:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <uart_init+0x22c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a4a      	ldr	r2, [pc, #296]	; (8000b68 <uart_init+0x22c>)
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000a46:	4b48      	ldr	r3, [pc, #288]	; (8000b68 <uart_init+0x22c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4a47      	ldr	r2, [pc, #284]	; (8000b68 <uart_init+0x22c>)
 8000a4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a50:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000a52:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <uart_init+0x22c>)
 8000a54:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <uart_init+0x22c>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <uart_init+0x22c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a42      	ldr	r2, [pc, #264]	; (8000b68 <uart_init+0x22c>)
 8000a60:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a64:	f023 030c 	bic.w	r3, r3, #12
 8000a68:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <uart_init+0x22c>)
 8000a6c:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <uart_init+0x22c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <uart_init+0x22c>)
 8000a74:	4a3c      	ldr	r2, [pc, #240]	; (8000b68 <uart_init+0x22c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <uart_init+0x22c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <uart_init+0x22c>)
 8000a80:	f043 030c 	orr.w	r3, r3, #12
 8000a84:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <uart_init+0x22c>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	4a37      	ldr	r2, [pc, #220]	; (8000b68 <uart_init+0x22c>)
 8000a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a90:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <uart_init+0x22c>)
 8000a94:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <uart_init+0x22c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fbe0 	bl	8000270 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <uart_init+0x22c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d010      	beq.n	8000ae2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ac2:	005a      	lsls	r2, r3, #1
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	fb01 f202 	mul.w	r2, r1, r2
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ae0:	e00d      	b.n	8000afe <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	fb01 f202 	mul.w	r2, r1, r2
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d302      	bcc.n	8000b0e <uart_init+0x1d2>
        divider++;
 8000b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <uart_init+0x22c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00b      	beq.n	8000b32 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b26:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <uart_init+0x22c>)
 8000b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b36:	b292      	uxth	r2, r2
 8000b38:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <uart_init+0x22c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <uart_init+0x22c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b46:	2201      	movs	r2, #1
 8000b48:	4908      	ldr	r1, [pc, #32]	; (8000b6c <uart_init+0x230>)
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <uart_init+0x22c>)
 8000b4c:	f7ff fdb6 	bl	80006bc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000b50:	2026      	movs	r0, #38	; 0x26
 8000b52:	f7ff fe5f 	bl	8000814 <NVIC_EnableIRQ>
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000002c 	.word	0x2000002c
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	00050105 	.word	0x00050105

08000b70 <intiJoystick>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi.h"


void intiJoystick(){
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8000b74:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <intiJoystick+0x120>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a45      	ldr	r2, [pc, #276]	; (8000c90 <intiJoystick+0x120>)
 8000b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7e:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port A
 8000b80:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <intiJoystick+0x120>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	4a42      	ldr	r2, [pc, #264]	; (8000c90 <intiJoystick+0x120>)
 8000b86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port A
 8000b8c:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <intiJoystick+0x120>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4a3f      	ldr	r2, [pc, #252]	; (8000c90 <intiJoystick+0x120>)
 8000b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b96:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8000b98:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <intiJoystick+0x124>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a3d      	ldr	r2, [pc, #244]	; (8000c94 <intiJoystick+0x124>)
 8000b9e:	f023 0303 	bic.w	r3, r3, #3
 8000ba2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 8000ba4:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <intiJoystick+0x124>)
 8000ba6:	4a3b      	ldr	r2, [pc, #236]	; (8000c94 <intiJoystick+0x124>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <intiJoystick+0x124>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <intiJoystick+0x124>)
 8000bb2:	f023 0303 	bic.w	r3, r3, #3
 8000bb6:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 8000bb8:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <intiJoystick+0x124>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <intiJoystick+0x124>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8000bc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bd2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 8000bd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 8000be0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bee:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 8000bf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfe:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <intiJoystick+0x128>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <intiJoystick+0x128>)
 8000c06:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000c0a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <intiJoystick+0x128>)
 8000c0e:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <intiJoystick+0x128>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 8000c14:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <intiJoystick+0x128>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <intiJoystick+0x128>)
 8000c1a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000c1e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <intiJoystick+0x128>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <intiJoystick+0x128>)
 8000c26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c2a:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <intiJoystick+0x124>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <intiJoystick+0x124>)
 8000c32:	f023 030c 	bic.w	r3, r3, #12
 8000c36:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <intiJoystick+0x124>)
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <intiJoystick+0x124>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <intiJoystick+0x124>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <intiJoystick+0x124>)
 8000c46:	f023 030c 	bic.w	r3, r3, #12
 8000c4a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <intiJoystick+0x124>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <intiJoystick+0x124>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <intiJoystick+0x128>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <intiJoystick+0x128>)
 8000c5e:	f023 0303 	bic.w	r3, r3, #3
 8000c62:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <intiJoystick+0x128>)
 8000c66:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <intiJoystick+0x128>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <intiJoystick+0x128>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <intiJoystick+0x128>)
 8000c72:	f023 0303 	bic.w	r3, r3, #3
 8000c76:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <intiJoystick+0x128>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <intiJoystick+0x128>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48000800 	.word	0x48000800
 8000c98:	48000400 	.word	0x48000400

08000c9c <readJoystick>:

	GPIO(s)->ODR |= (0x0001 << pin); //Set pin PA1 to high

}*/

int16_t readJoystick(reJoy_s *j){
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b08b      	sub	sp, #44	; 0x2c
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	6078      	str	r0, [r7, #4]
	int32_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - up
 8000ca4:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <readJoystick+0x130>)
 8000ca6:	8a1b      	ldrh	r3, [r3, #16]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
	int32_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 8000cb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cb4:	8a1b      	ldrh	r3, [r3, #16]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	61fb      	str	r3, [r7, #28]
	int32_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - up
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <readJoystick+0x134>)
 8000cc0:	8a1b      	ldrh	r3, [r3, #16]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	f003 0320 	and.w	r3, r3, #32
 8000cc8:	61bb      	str	r3, [r7, #24]
	int32_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - up
 8000cca:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <readJoystick+0x130>)
 8000ccc:	8a1b      	ldrh	r3, [r3, #16]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	617b      	str	r3, [r7, #20]
	int32_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - up
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <readJoystick+0x134>)
 8000cd8:	8a1b      	ldrh	r3, [r3, #16]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	613b      	str	r3, [r7, #16]

	if(b){b = 1;}
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <readJoystick+0x50>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61fb      	str	r3, [r7, #28]
	if(c){c = 1;}
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <readJoystick+0x5a>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
	if(d){d = 1;}
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <readJoystick+0x64>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
	if(e){e = 1;}
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <readJoystick+0x6e>
 8000d06:	2301      	movs	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]

	printf("Joystick:\n%d%d%d%d%d\n",a,b,c,d,e);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	68f9      	ldr	r1, [r7, #12]
 8000d18:	482e      	ldr	r0, [pc, #184]	; (8000dd4 <readJoystick+0x138>)
 8000d1a:	f000 fb5d 	bl	80013d8 <iprintf>
	printf("Right:%d Up:%d Center:%d Left:%d Down:%d \n",a,b,c,d,e);
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	68f9      	ldr	r1, [r7, #12]
 8000d2c:	482a      	ldr	r0, [pc, #168]	; (8000dd8 <readJoystick+0x13c>)
 8000d2e:	f000 fb53 	bl	80013d8 <iprintf>

	printf("%d%d%d%d%d\n",j->right,j->up ,j->center,j->left ,j->down);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d40:	4618      	mov	r0, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000d48:	461c      	mov	r4, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d50:	461a      	mov	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	9200      	str	r2, [sp, #0]
 8000d5c:	4623      	mov	r3, r4
 8000d5e:	4602      	mov	r2, r0
 8000d60:	481e      	ldr	r0, [pc, #120]	; (8000ddc <readJoystick+0x140>)
 8000d62:	f000 fb39 	bl	80013d8 <iprintf>

	j -> right 	= a;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	b25a      	sxtb	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	70da      	strb	r2, [r3, #3]
	j -> up 	= b;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	701a      	strb	r2, [r3, #0]
	j -> center	= c;
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	b25a      	sxtb	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	711a      	strb	r2, [r3, #4]
	j -> left	= d;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	b25a      	sxtb	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	709a      	strb	r2, [r3, #2]
	j -> down 	= e;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	b25a      	sxtb	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	705a      	strb	r2, [r3, #1]

	printf("%d%d%d%d%d\n",j->right,j->up ,j->center,j->left ,j->down);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d94:	4619      	mov	r1, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f993 3000 	ldrsb.w	r3, [r3]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000da4:	461c      	mov	r4, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	9200      	str	r2, [sp, #0]
 8000db8:	4623      	mov	r3, r4
 8000dba:	4602      	mov	r2, r0
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <readJoystick+0x140>)
 8000dbe:	f000 fb0b 	bl	80013d8 <iprintf>
}
 8000dc2:	bf00      	nop
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3724      	adds	r7, #36	; 0x24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	08002424 	.word	0x08002424
 8000dd8:	0800243c 	.word	0x0800243c
 8000ddc:	08002468 	.word	0x08002468

08000de0 <initLed>:


void initLed(){
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	// Set pin PA9 to output - BLUE LED
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2)); // Clear speed register
 8000de4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dee:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000df2:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2)); // set speed register
 8000df4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e02:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOA->OTYPER &= ~(0x0001 << (9 * 1)); // Clear output type register
 8000e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e08:	889b      	ldrh	r3, [r3, #4]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9)); // Set output type register
 8000e18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e20:	8892      	ldrh	r2, [r2, #4]
 8000e22:	b292      	uxth	r2, r2
 8000e24:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOA->MODER &= ~(0x00000003 << (9 * 2)); // Clear mode register
 8000e26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e30:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e34:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2)); // Set mode register
 8000e36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PC7 to output - GREEN LED
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2)); // Clear speed register
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <initLed+0x104>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	4a26      	ldr	r2, [pc, #152]	; (8000ee4 <initLed+0x104>)
 8000e4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e50:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2)); // set speed register
 8000e52:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <initLed+0x104>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <initLed+0x104>)
 8000e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e5c:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOC->OTYPER &= ~(0x0001 << (7 * 1)); // Clear output type register
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <initLed+0x104>)
 8000e60:	889b      	ldrh	r3, [r3, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <initLed+0x104>)
 8000e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7)); // Set output type register
 8000e6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <initLed+0x104>)
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <initLed+0x104>)
 8000e72:	8892      	ldrh	r2, [r2, #4]
 8000e74:	b292      	uxth	r2, r2
 8000e76:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOC->MODER &= ~(0x00000003 << (7 * 2)); // Clear mode register
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <initLed+0x104>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <initLed+0x104>)
 8000e7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e82:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2)); // Set mode register
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <initLed+0x104>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <initLed+0x104>)
 8000e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8e:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PB4 to output - RED LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2)); // Clear speed register
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <initLed+0x108>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <initLed+0x108>)
 8000e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e9a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2)); // set speed register
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <initLed+0x108>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <initLed+0x108>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (4 * 1)); // Clear output type register
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <initLed+0x108>)
 8000eaa:	889b      	ldrh	r3, [r3, #4]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <initLed+0x108>)
 8000eb0:	f023 0310 	bic.w	r3, r3, #16
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4)); // Set output type register
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <initLed+0x108>)
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <initLed+0x108>)
 8000ebc:	8892      	ldrh	r2, [r2, #4]
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <initLed+0x108>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <initLed+0x108>)
 8000ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ecc:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2)); // Set mode register
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <initLed+0x108>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <initLed+0x108>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	48000400 	.word	0x48000400

08000eec <writeLed>:

void writeLed(reJoy_s j){
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b08b      	sub	sp, #44	; 0x2c
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	e883 0003 	stmia.w	r3, {r0, r1}
	int32_t a =	j.right;
 8000ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efc:	61fb      	str	r3, [r7, #28]
	int32_t b =	j.up;
 8000efe:	f997 3000 	ldrsb.w	r3, [r7]
 8000f02:	61bb      	str	r3, [r7, #24]
	int32_t c =	j.center;
 8000f04:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000f08:	617b      	str	r3, [r7, #20]
	int32_t d =	j.left;
 8000f0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000f0e:	613b      	str	r3, [r7, #16]
	int32_t e =	j.down;
 8000f10:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000f14:	60fb      	str	r3, [r7, #12]

	// Right - Blue
	if(a){
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d007      	beq.n	8000f2c <writeLed+0x40>
		GPIOA->ODR &= (0x0000 << 9); //Set pin PA9 to low - on
 8000f1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f20:	8a9b      	ldrh	r3, [r3, #20]
 8000f22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f26:	2200      	movs	r2, #0
 8000f28:	829a      	strh	r2, [r3, #20]
 8000f2a:	e009      	b.n	8000f40 <writeLed+0x54>
	}
	else{
		GPIOA->ODR |= (0x0001 << 9); //Set pin PA9 to high - off
 8000f2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f30:	8a9b      	ldrh	r3, [r3, #20]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	8293      	strh	r3, [r2, #20]
	}

	// Up - Green
	if(b){
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <writeLed+0x66>
		GPIOC->ODR &= (0x0000 << 7); //Set pin PC7 to low - on
 8000f46:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <writeLed+0x154>)
 8000f48:	8a9b      	ldrh	r3, [r3, #20]
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <writeLed+0x154>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	829a      	strh	r2, [r3, #20]
 8000f50:	e007      	b.n	8000f62 <writeLed+0x76>
	}
	else{
		GPIOC->ODR |= (0x0001 << 7); //Set pin PC7 to high - off
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <writeLed+0x154>)
 8000f54:	8a9b      	ldrh	r3, [r3, #20]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4a39      	ldr	r2, [pc, #228]	; (8001040 <writeLed+0x154>)
 8000f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	8293      	strh	r3, [r2, #20]
	}

	// Left - Red
	if(d){
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <writeLed+0x88>
		GPIOB->ODR &= (0x0000 << 4); //Set pin PB4 to low - on
 8000f68:	4b36      	ldr	r3, [pc, #216]	; (8001044 <writeLed+0x158>)
 8000f6a:	8a9b      	ldrh	r3, [r3, #20]
 8000f6c:	4b35      	ldr	r3, [pc, #212]	; (8001044 <writeLed+0x158>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	829a      	strh	r2, [r3, #20]
 8000f72:	e007      	b.n	8000f84 <writeLed+0x98>
	}
	else{
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <writeLed+0x158>)
 8000f76:	8a9b      	ldrh	r3, [r3, #20]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4a32      	ldr	r2, [pc, #200]	; (8001044 <writeLed+0x158>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	8293      	strh	r3, [r2, #20]
	}

	// Down - Blue & Red
	if(e && !(a || d)){
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d011      	beq.n	8000fae <writeLed+0xc2>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10e      	bne.n	8000fae <writeLed+0xc2>
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10b      	bne.n	8000fae <writeLed+0xc2>
		GPIOA->ODR &= (0x0000 << 9); //Set pin PA9 to low - on
 8000f96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f9a:	8a9b      	ldrh	r3, [r3, #20]
 8000f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	829a      	strh	r2, [r3, #20]
		GPIOB->ODR &= (0x0000 << 4); //Set pin PB4 to low - on
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <writeLed+0x158>)
 8000fa6:	8a9b      	ldrh	r3, [r3, #20]
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <writeLed+0x158>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	829a      	strh	r2, [r3, #20]
	}


	// Center - White(All)
	if(c && !(a || b || d)){
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d019      	beq.n	8000fe8 <writeLed+0xfc>
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d116      	bne.n	8000fe8 <writeLed+0xfc>
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d113      	bne.n	8000fe8 <writeLed+0xfc>
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d110      	bne.n	8000fe8 <writeLed+0xfc>
		GPIOA->ODR &= (0x0000 << 9); //Set pin PA9 to low - on
 8000fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fca:	8a9b      	ldrh	r3, [r3, #20]
 8000fcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	829a      	strh	r2, [r3, #20]
		GPIOC->ODR &= (0x0000 << 7); //Set pin PC7 to low - on
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <writeLed+0x154>)
 8000fd6:	8a9b      	ldrh	r3, [r3, #20]
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <writeLed+0x154>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	829a      	strh	r2, [r3, #20]
		GPIOB->ODR &= (0x0000 << 4); //Set pin PB4 to low - on
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <writeLed+0x158>)
 8000fe0:	8a9b      	ldrh	r3, [r3, #20]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <writeLed+0x158>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	829a      	strh	r2, [r3, #20]





	printf("\n\nLED:\n%d%d%d%d%d\n",a,b,c,d,e);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	69f9      	ldr	r1, [r7, #28]
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <writeLed+0x15c>)
 8000ff8:	f000 f9ee 	bl	80013d8 <iprintf>
	printf("Right:%d Up:%d Center:%d Left:%d Down:%d \n",a,b,c,d,e);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	69f9      	ldr	r1, [r7, #28]
 800100a:	4810      	ldr	r0, [pc, #64]	; (800104c <writeLed+0x160>)
 800100c:	f000 f9e4 	bl	80013d8 <iprintf>

	printf("%d%d%d%d%d\n",j.right, j.up, j.center, j.left ,j.down);
 8001010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001014:	4619      	mov	r1, r3
 8001016:	f997 3000 	ldrsb.w	r3, [r7]
 800101a:	4618      	mov	r0, r3
 800101c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001020:	461c      	mov	r4, r3
 8001022:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001026:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800102a:	9201      	str	r2, [sp, #4]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4623      	mov	r3, r4
 8001030:	4602      	mov	r2, r0
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <writeLed+0x164>)
 8001034:	f000 f9d0 	bl	80013d8 <iprintf>




}
 8001038:	bf00      	nop
 800103a:	3724      	adds	r7, #36	; 0x24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	48000800 	.word	0x48000800
 8001044:	48000400 	.word	0x48000400
 8001048:	08002474 	.word	0x08002474
 800104c:	0800243c 	.word	0x0800243c
 8001050:	08002468 	.word	0x08002468

08001054 <resetbgcolor>:
		foreground -= 8;
	}
	printf("%c[%d;%d;%dm", ESC, type, foreground + 30, background + 40);
}

void resetbgcolor() {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
 8001058:	211b      	movs	r1, #27
 800105a:	4802      	ldr	r0, [pc, #8]	; (8001064 <resetbgcolor+0x10>)
 800105c:	f000 f9bc 	bl	80013d8 <iprintf>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	080024ac 	.word	0x080024ac

08001068 <clrscr>:

void clrscr() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 800106c:	4a08      	ldr	r2, [pc, #32]	; (8001090 <clrscr+0x28>)
 800106e:	211b      	movs	r1, #27
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <clrscr+0x2c>)
 8001072:	f000 f9b1 	bl	80013d8 <iprintf>
	printf("%c[%s", ESC, "3J");
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <clrscr+0x30>)
 8001078:	211b      	movs	r1, #27
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <clrscr+0x2c>)
 800107c:	f000 f9ac 	bl	80013d8 <iprintf>
	resetbgcolor();
 8001080:	f7ff ffe8 	bl	8001054 <resetbgcolor>

	gotoxy(0, 0);
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f808 	bl	800109c <gotoxy>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	080024b4 	.word	0x080024b4
 8001094:	080024b8 	.word	0x080024b8
 8001098:	080024c0 	.word	0x080024c0

0800109c <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	211b      	movs	r1, #27
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <gotoxy+0x20>)
 80010ae:	f000 f993 	bl	80013d8 <iprintf>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	080024c8 	.word	0x080024c8

080010c0 <main>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "ansi.h"


int main(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

	// Setup communication with the PC
	uart_init(9600);
 80010c6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80010ca:	f7ff fc37 	bl	800093c <uart_init>
		rotateVector(&v, angle);
		printVec(v, angle);
	}
*/

	clrscr();
 80010ce:	f7ff ffcb 	bl	8001068 <clrscr>

	//rotateBall(&o, angle);
	//ballDebug(o);
*/

	intiJoystick();
 80010d2:	f7ff fd4d 	bl	8000b70 <intiJoystick>
	initLed();
 80010d6:	f7ff fe83 	bl	8000de0 <initLed>

	reJoy_s j = {};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	711a      	strb	r2, [r3, #4]


	while (1) {
		gotoxy(0,0);
 80010e2:	2100      	movs	r1, #0
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ffd9 	bl	800109c <gotoxy>
		readJoystick(&j);
 80010ea:	463b      	mov	r3, r7
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fdd5 	bl	8000c9c <readJoystick>
		writeLed(j);
 80010f2:	463b      	mov	r3, r7
 80010f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010f8:	f7ff fef8 	bl	8000eec <writeLed>
	while (1) {
 80010fc:	e7f1      	b.n	80010e2 <main+0x22>

080010fe <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e00a      	b.n	8001126 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001110:	f3af 8000 	nop.w
 8001114:	4601      	mov	r1, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	60ba      	str	r2, [r7, #8]
 800111c:	b2ca      	uxtb	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	dbf0      	blt.n	8001110 <_read+0x12>
	}

return len;
 800112e:	687b      	ldr	r3, [r7, #4]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	return -1;
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001160:	605a      	str	r2, [r3, #4]
	return 0;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_isatty>:

int _isatty(int file)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
	return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <_sbrk+0x50>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x16>
		heap_end = &end;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <_sbrk+0x50>)
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <_sbrk+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <_sbrk+0x50>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <_sbrk+0x50>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	466a      	mov	r2, sp
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d907      	bls.n	80011da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ca:	f000 f8d3 	bl	8001374 <__errno>
 80011ce:	4603      	mov	r3, r0
 80011d0:	220c      	movs	r2, #12
 80011d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	e006      	b.n	80011e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <_sbrk+0x50>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <_sbrk+0x50>)
 80011e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200001b0 	.word	0x200001b0
 80011f4:	200001d0 	.word	0x200001d0

080011f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <SystemInit+0x84>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <SystemInit+0x84>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <SystemInit+0x88>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <SystemInit+0x88>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <SystemInit+0x88>)
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4918      	ldr	r1, [pc, #96]	; (8001280 <SystemInit+0x88>)
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <SystemInit+0x8c>)
 8001220:	4013      	ands	r3, r2
 8001222:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <SystemInit+0x88>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a15      	ldr	r2, [pc, #84]	; (8001280 <SystemInit+0x88>)
 800122a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800122e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001232:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <SystemInit+0x88>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a11      	ldr	r2, [pc, #68]	; (8001280 <SystemInit+0x88>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <SystemInit+0x88>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <SystemInit+0x88>)
 8001246:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800124a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <SystemInit+0x88>)
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <SystemInit+0x88>)
 8001252:	f023 030f 	bic.w	r3, r3, #15
 8001256:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <SystemInit+0x88>)
 800125a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800125c:	4908      	ldr	r1, [pc, #32]	; (8001280 <SystemInit+0x88>)
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <SystemInit+0x90>)
 8001260:	4013      	ands	r3, r2
 8001262:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <SystemInit+0x88>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800126a:	f000 f80f 	bl	800128c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800126e:	4b03      	ldr	r3, [pc, #12]	; (800127c <SystemInit+0x84>)
 8001270:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001274:	609a      	str	r2, [r3, #8]
#endif  
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	40021000 	.word	0x40021000
 8001284:	f87fc00c 	.word	0xf87fc00c
 8001288:	ff00fccc 	.word	0xff00fccc

0800128c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <SetSysClock+0x8c>)
 8001292:	2212      	movs	r2, #18
 8001294:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <SetSysClock+0x90>)
 8001298:	4a20      	ldr	r2, [pc, #128]	; (800131c <SetSysClock+0x90>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <SetSysClock+0x90>)
 80012a0:	4a1e      	ldr	r2, [pc, #120]	; (800131c <SetSysClock+0x90>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <SetSysClock+0x90>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <SetSysClock+0x90>)
 80012ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <SetSysClock+0x90>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a19      	ldr	r2, [pc, #100]	; (800131c <SetSysClock+0x90>)
 80012b8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80012bc:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <SetSysClock+0x90>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <SetSysClock+0x90>)
 80012c4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80012c8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <SetSysClock+0x90>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <SetSysClock+0x90>)
 80012d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80012d6:	bf00      	nop
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <SetSysClock+0x90>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <SetSysClock+0x90>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <SetSysClock+0x90>)
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <SetSysClock+0x90>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <SetSysClock+0x90>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80012fc:	bf00      	nop
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <SetSysClock+0x90>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b08      	cmp	r3, #8
 8001308:	d1f9      	bne.n	80012fe <SetSysClock+0x72>
  {
  }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000
 800131c:	40021000 	.word	0x40021000

08001320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001322:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopForever+0x6>)
  ldr r1, =_edata
 8001326:	490e      	ldr	r1, [pc, #56]	; (8001360 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <LoopForever+0xe>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopForever+0x12>)
  ldr r4, =_ebss
 800133c:	4c0b      	ldr	r4, [pc, #44]	; (800136c <LoopForever+0x16>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800134a:	f7ff ff55 	bl	80011f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800134e:	f000 f817 	bl	8001380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001352:	f7ff feb5 	bl	80010c0 <main>

08001356 <LoopForever>:

LoopForever:
    b LoopForever
 8001356:	e7fe      	b.n	8001356 <LoopForever>
  ldr   r0, =_estack
 8001358:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001364:	08002574 	.word	0x08002574
  ldr r2, =_sbss
 8001368:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800136c:	200001cc 	.word	0x200001cc

08001370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC1_2_IRQHandler>
	...

08001374 <__errno>:
 8001374:	4b01      	ldr	r3, [pc, #4]	; (800137c <__errno+0x8>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000002c 	.word	0x2000002c

08001380 <__libc_init_array>:
 8001380:	b570      	push	{r4, r5, r6, lr}
 8001382:	4d0d      	ldr	r5, [pc, #52]	; (80013b8 <__libc_init_array+0x38>)
 8001384:	4c0d      	ldr	r4, [pc, #52]	; (80013bc <__libc_init_array+0x3c>)
 8001386:	1b64      	subs	r4, r4, r5
 8001388:	10a4      	asrs	r4, r4, #2
 800138a:	2600      	movs	r6, #0
 800138c:	42a6      	cmp	r6, r4
 800138e:	d109      	bne.n	80013a4 <__libc_init_array+0x24>
 8001390:	4d0b      	ldr	r5, [pc, #44]	; (80013c0 <__libc_init_array+0x40>)
 8001392:	4c0c      	ldr	r4, [pc, #48]	; (80013c4 <__libc_init_array+0x44>)
 8001394:	f001 f83a 	bl	800240c <_init>
 8001398:	1b64      	subs	r4, r4, r5
 800139a:	10a4      	asrs	r4, r4, #2
 800139c:	2600      	movs	r6, #0
 800139e:	42a6      	cmp	r6, r4
 80013a0:	d105      	bne.n	80013ae <__libc_init_array+0x2e>
 80013a2:	bd70      	pop	{r4, r5, r6, pc}
 80013a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a8:	4798      	blx	r3
 80013aa:	3601      	adds	r6, #1
 80013ac:	e7ee      	b.n	800138c <__libc_init_array+0xc>
 80013ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b2:	4798      	blx	r3
 80013b4:	3601      	adds	r6, #1
 80013b6:	e7f2      	b.n	800139e <__libc_init_array+0x1e>
 80013b8:	0800256c 	.word	0x0800256c
 80013bc:	0800256c 	.word	0x0800256c
 80013c0:	0800256c 	.word	0x0800256c
 80013c4:	08002570 	.word	0x08002570

080013c8 <memset>:
 80013c8:	4402      	add	r2, r0
 80013ca:	4603      	mov	r3, r0
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d100      	bne.n	80013d2 <memset+0xa>
 80013d0:	4770      	bx	lr
 80013d2:	f803 1b01 	strb.w	r1, [r3], #1
 80013d6:	e7f9      	b.n	80013cc <memset+0x4>

080013d8 <iprintf>:
 80013d8:	b40f      	push	{r0, r1, r2, r3}
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <iprintf+0x2c>)
 80013dc:	b513      	push	{r0, r1, r4, lr}
 80013de:	681c      	ldr	r4, [r3, #0]
 80013e0:	b124      	cbz	r4, 80013ec <iprintf+0x14>
 80013e2:	69a3      	ldr	r3, [r4, #24]
 80013e4:	b913      	cbnz	r3, 80013ec <iprintf+0x14>
 80013e6:	4620      	mov	r0, r4
 80013e8:	f000 f9f6 	bl	80017d8 <__sinit>
 80013ec:	ab05      	add	r3, sp, #20
 80013ee:	9a04      	ldr	r2, [sp, #16]
 80013f0:	68a1      	ldr	r1, [r4, #8]
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4620      	mov	r0, r4
 80013f6:	f000 fbcf 	bl	8001b98 <_vfiprintf_r>
 80013fa:	b002      	add	sp, #8
 80013fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001400:	b004      	add	sp, #16
 8001402:	4770      	bx	lr
 8001404:	2000002c 	.word	0x2000002c

08001408 <setbuf>:
 8001408:	2900      	cmp	r1, #0
 800140a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140e:	bf0c      	ite	eq
 8001410:	2202      	moveq	r2, #2
 8001412:	2200      	movne	r2, #0
 8001414:	f000 b800 	b.w	8001418 <setvbuf>

08001418 <setvbuf>:
 8001418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800141c:	461d      	mov	r5, r3
 800141e:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <setvbuf+0x17c>)
 8001420:	681f      	ldr	r7, [r3, #0]
 8001422:	4604      	mov	r4, r0
 8001424:	460e      	mov	r6, r1
 8001426:	4690      	mov	r8, r2
 8001428:	b127      	cbz	r7, 8001434 <setvbuf+0x1c>
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	b913      	cbnz	r3, 8001434 <setvbuf+0x1c>
 800142e:	4638      	mov	r0, r7
 8001430:	f000 f9d2 	bl	80017d8 <__sinit>
 8001434:	4b58      	ldr	r3, [pc, #352]	; (8001598 <setvbuf+0x180>)
 8001436:	429c      	cmp	r4, r3
 8001438:	d167      	bne.n	800150a <setvbuf+0xf2>
 800143a:	687c      	ldr	r4, [r7, #4]
 800143c:	f1b8 0f02 	cmp.w	r8, #2
 8001440:	d006      	beq.n	8001450 <setvbuf+0x38>
 8001442:	f1b8 0f01 	cmp.w	r8, #1
 8001446:	f200 809f 	bhi.w	8001588 <setvbuf+0x170>
 800144a:	2d00      	cmp	r5, #0
 800144c:	f2c0 809c 	blt.w	8001588 <setvbuf+0x170>
 8001450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001452:	07db      	lsls	r3, r3, #31
 8001454:	d405      	bmi.n	8001462 <setvbuf+0x4a>
 8001456:	89a3      	ldrh	r3, [r4, #12]
 8001458:	0598      	lsls	r0, r3, #22
 800145a:	d402      	bmi.n	8001462 <setvbuf+0x4a>
 800145c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800145e:	f000 fa59 	bl	8001914 <__retarget_lock_acquire_recursive>
 8001462:	4621      	mov	r1, r4
 8001464:	4638      	mov	r0, r7
 8001466:	f000 f923 	bl	80016b0 <_fflush_r>
 800146a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800146c:	b141      	cbz	r1, 8001480 <setvbuf+0x68>
 800146e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001472:	4299      	cmp	r1, r3
 8001474:	d002      	beq.n	800147c <setvbuf+0x64>
 8001476:	4638      	mov	r0, r7
 8001478:	f000 faba 	bl	80019f0 <_free_r>
 800147c:	2300      	movs	r3, #0
 800147e:	6363      	str	r3, [r4, #52]	; 0x34
 8001480:	2300      	movs	r3, #0
 8001482:	61a3      	str	r3, [r4, #24]
 8001484:	6063      	str	r3, [r4, #4]
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	0619      	lsls	r1, r3, #24
 800148a:	d503      	bpl.n	8001494 <setvbuf+0x7c>
 800148c:	6921      	ldr	r1, [r4, #16]
 800148e:	4638      	mov	r0, r7
 8001490:	f000 faae 	bl	80019f0 <_free_r>
 8001494:	89a3      	ldrh	r3, [r4, #12]
 8001496:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	f1b8 0f02 	cmp.w	r8, #2
 80014a2:	81a3      	strh	r3, [r4, #12]
 80014a4:	d06c      	beq.n	8001580 <setvbuf+0x168>
 80014a6:	ab01      	add	r3, sp, #4
 80014a8:	466a      	mov	r2, sp
 80014aa:	4621      	mov	r1, r4
 80014ac:	4638      	mov	r0, r7
 80014ae:	f000 fa33 	bl	8001918 <__swhatbuf_r>
 80014b2:	89a3      	ldrh	r3, [r4, #12]
 80014b4:	4318      	orrs	r0, r3
 80014b6:	81a0      	strh	r0, [r4, #12]
 80014b8:	2d00      	cmp	r5, #0
 80014ba:	d130      	bne.n	800151e <setvbuf+0x106>
 80014bc:	9d00      	ldr	r5, [sp, #0]
 80014be:	4628      	mov	r0, r5
 80014c0:	f000 fa8e 	bl	80019e0 <malloc>
 80014c4:	4606      	mov	r6, r0
 80014c6:	2800      	cmp	r0, #0
 80014c8:	d155      	bne.n	8001576 <setvbuf+0x15e>
 80014ca:	f8dd 9000 	ldr.w	r9, [sp]
 80014ce:	45a9      	cmp	r9, r5
 80014d0:	d14a      	bne.n	8001568 <setvbuf+0x150>
 80014d2:	f04f 35ff 	mov.w	r5, #4294967295
 80014d6:	2200      	movs	r2, #0
 80014d8:	60a2      	str	r2, [r4, #8]
 80014da:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80014de:	6022      	str	r2, [r4, #0]
 80014e0:	6122      	str	r2, [r4, #16]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e8:	6162      	str	r2, [r4, #20]
 80014ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	07d2      	lsls	r2, r2, #31
 80014f2:	81a3      	strh	r3, [r4, #12]
 80014f4:	d405      	bmi.n	8001502 <setvbuf+0xea>
 80014f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80014fa:	d102      	bne.n	8001502 <setvbuf+0xea>
 80014fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014fe:	f000 fa0a 	bl	8001916 <__retarget_lock_release_recursive>
 8001502:	4628      	mov	r0, r5
 8001504:	b003      	add	sp, #12
 8001506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <setvbuf+0x184>)
 800150c:	429c      	cmp	r4, r3
 800150e:	d101      	bne.n	8001514 <setvbuf+0xfc>
 8001510:	68bc      	ldr	r4, [r7, #8]
 8001512:	e793      	b.n	800143c <setvbuf+0x24>
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <setvbuf+0x188>)
 8001516:	429c      	cmp	r4, r3
 8001518:	bf08      	it	eq
 800151a:	68fc      	ldreq	r4, [r7, #12]
 800151c:	e78e      	b.n	800143c <setvbuf+0x24>
 800151e:	2e00      	cmp	r6, #0
 8001520:	d0cd      	beq.n	80014be <setvbuf+0xa6>
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	b913      	cbnz	r3, 800152c <setvbuf+0x114>
 8001526:	4638      	mov	r0, r7
 8001528:	f000 f956 	bl	80017d8 <__sinit>
 800152c:	f1b8 0f01 	cmp.w	r8, #1
 8001530:	bf08      	it	eq
 8001532:	89a3      	ldrheq	r3, [r4, #12]
 8001534:	6026      	str	r6, [r4, #0]
 8001536:	bf04      	itt	eq
 8001538:	f043 0301 	orreq.w	r3, r3, #1
 800153c:	81a3      	strheq	r3, [r4, #12]
 800153e:	89a2      	ldrh	r2, [r4, #12]
 8001540:	f012 0308 	ands.w	r3, r2, #8
 8001544:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001548:	d01c      	beq.n	8001584 <setvbuf+0x16c>
 800154a:	07d3      	lsls	r3, r2, #31
 800154c:	bf41      	itttt	mi
 800154e:	2300      	movmi	r3, #0
 8001550:	426d      	negmi	r5, r5
 8001552:	60a3      	strmi	r3, [r4, #8]
 8001554:	61a5      	strmi	r5, [r4, #24]
 8001556:	bf58      	it	pl
 8001558:	60a5      	strpl	r5, [r4, #8]
 800155a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800155c:	f015 0501 	ands.w	r5, r5, #1
 8001560:	d115      	bne.n	800158e <setvbuf+0x176>
 8001562:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001566:	e7c8      	b.n	80014fa <setvbuf+0xe2>
 8001568:	4648      	mov	r0, r9
 800156a:	f000 fa39 	bl	80019e0 <malloc>
 800156e:	4606      	mov	r6, r0
 8001570:	2800      	cmp	r0, #0
 8001572:	d0ae      	beq.n	80014d2 <setvbuf+0xba>
 8001574:	464d      	mov	r5, r9
 8001576:	89a3      	ldrh	r3, [r4, #12]
 8001578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157c:	81a3      	strh	r3, [r4, #12]
 800157e:	e7d0      	b.n	8001522 <setvbuf+0x10a>
 8001580:	2500      	movs	r5, #0
 8001582:	e7a8      	b.n	80014d6 <setvbuf+0xbe>
 8001584:	60a3      	str	r3, [r4, #8]
 8001586:	e7e8      	b.n	800155a <setvbuf+0x142>
 8001588:	f04f 35ff 	mov.w	r5, #4294967295
 800158c:	e7b9      	b.n	8001502 <setvbuf+0xea>
 800158e:	2500      	movs	r5, #0
 8001590:	e7b7      	b.n	8001502 <setvbuf+0xea>
 8001592:	bf00      	nop
 8001594:	2000002c 	.word	0x2000002c
 8001598:	080024f8 	.word	0x080024f8
 800159c:	08002518 	.word	0x08002518
 80015a0:	080024d8 	.word	0x080024d8

080015a4 <__sflush_r>:
 80015a4:	898a      	ldrh	r2, [r1, #12]
 80015a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015aa:	4605      	mov	r5, r0
 80015ac:	0710      	lsls	r0, r2, #28
 80015ae:	460c      	mov	r4, r1
 80015b0:	d458      	bmi.n	8001664 <__sflush_r+0xc0>
 80015b2:	684b      	ldr	r3, [r1, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	dc05      	bgt.n	80015c4 <__sflush_r+0x20>
 80015b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dc02      	bgt.n	80015c4 <__sflush_r+0x20>
 80015be:	2000      	movs	r0, #0
 80015c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015c6:	2e00      	cmp	r6, #0
 80015c8:	d0f9      	beq.n	80015be <__sflush_r+0x1a>
 80015ca:	2300      	movs	r3, #0
 80015cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015d0:	682f      	ldr	r7, [r5, #0]
 80015d2:	602b      	str	r3, [r5, #0]
 80015d4:	d032      	beq.n	800163c <__sflush_r+0x98>
 80015d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015d8:	89a3      	ldrh	r3, [r4, #12]
 80015da:	075a      	lsls	r2, r3, #29
 80015dc:	d505      	bpl.n	80015ea <__sflush_r+0x46>
 80015de:	6863      	ldr	r3, [r4, #4]
 80015e0:	1ac0      	subs	r0, r0, r3
 80015e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015e4:	b10b      	cbz	r3, 80015ea <__sflush_r+0x46>
 80015e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015e8:	1ac0      	subs	r0, r0, r3
 80015ea:	2300      	movs	r3, #0
 80015ec:	4602      	mov	r2, r0
 80015ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015f0:	6a21      	ldr	r1, [r4, #32]
 80015f2:	4628      	mov	r0, r5
 80015f4:	47b0      	blx	r6
 80015f6:	1c43      	adds	r3, r0, #1
 80015f8:	89a3      	ldrh	r3, [r4, #12]
 80015fa:	d106      	bne.n	800160a <__sflush_r+0x66>
 80015fc:	6829      	ldr	r1, [r5, #0]
 80015fe:	291d      	cmp	r1, #29
 8001600:	d82c      	bhi.n	800165c <__sflush_r+0xb8>
 8001602:	4a2a      	ldr	r2, [pc, #168]	; (80016ac <__sflush_r+0x108>)
 8001604:	40ca      	lsrs	r2, r1
 8001606:	07d6      	lsls	r6, r2, #31
 8001608:	d528      	bpl.n	800165c <__sflush_r+0xb8>
 800160a:	2200      	movs	r2, #0
 800160c:	6062      	str	r2, [r4, #4]
 800160e:	04d9      	lsls	r1, r3, #19
 8001610:	6922      	ldr	r2, [r4, #16]
 8001612:	6022      	str	r2, [r4, #0]
 8001614:	d504      	bpl.n	8001620 <__sflush_r+0x7c>
 8001616:	1c42      	adds	r2, r0, #1
 8001618:	d101      	bne.n	800161e <__sflush_r+0x7a>
 800161a:	682b      	ldr	r3, [r5, #0]
 800161c:	b903      	cbnz	r3, 8001620 <__sflush_r+0x7c>
 800161e:	6560      	str	r0, [r4, #84]	; 0x54
 8001620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001622:	602f      	str	r7, [r5, #0]
 8001624:	2900      	cmp	r1, #0
 8001626:	d0ca      	beq.n	80015be <__sflush_r+0x1a>
 8001628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800162c:	4299      	cmp	r1, r3
 800162e:	d002      	beq.n	8001636 <__sflush_r+0x92>
 8001630:	4628      	mov	r0, r5
 8001632:	f000 f9dd 	bl	80019f0 <_free_r>
 8001636:	2000      	movs	r0, #0
 8001638:	6360      	str	r0, [r4, #52]	; 0x34
 800163a:	e7c1      	b.n	80015c0 <__sflush_r+0x1c>
 800163c:	6a21      	ldr	r1, [r4, #32]
 800163e:	2301      	movs	r3, #1
 8001640:	4628      	mov	r0, r5
 8001642:	47b0      	blx	r6
 8001644:	1c41      	adds	r1, r0, #1
 8001646:	d1c7      	bne.n	80015d8 <__sflush_r+0x34>
 8001648:	682b      	ldr	r3, [r5, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0c4      	beq.n	80015d8 <__sflush_r+0x34>
 800164e:	2b1d      	cmp	r3, #29
 8001650:	d001      	beq.n	8001656 <__sflush_r+0xb2>
 8001652:	2b16      	cmp	r3, #22
 8001654:	d101      	bne.n	800165a <__sflush_r+0xb6>
 8001656:	602f      	str	r7, [r5, #0]
 8001658:	e7b1      	b.n	80015be <__sflush_r+0x1a>
 800165a:	89a3      	ldrh	r3, [r4, #12]
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	81a3      	strh	r3, [r4, #12]
 8001662:	e7ad      	b.n	80015c0 <__sflush_r+0x1c>
 8001664:	690f      	ldr	r7, [r1, #16]
 8001666:	2f00      	cmp	r7, #0
 8001668:	d0a9      	beq.n	80015be <__sflush_r+0x1a>
 800166a:	0793      	lsls	r3, r2, #30
 800166c:	680e      	ldr	r6, [r1, #0]
 800166e:	bf08      	it	eq
 8001670:	694b      	ldreq	r3, [r1, #20]
 8001672:	600f      	str	r7, [r1, #0]
 8001674:	bf18      	it	ne
 8001676:	2300      	movne	r3, #0
 8001678:	eba6 0807 	sub.w	r8, r6, r7
 800167c:	608b      	str	r3, [r1, #8]
 800167e:	f1b8 0f00 	cmp.w	r8, #0
 8001682:	dd9c      	ble.n	80015be <__sflush_r+0x1a>
 8001684:	6a21      	ldr	r1, [r4, #32]
 8001686:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001688:	4643      	mov	r3, r8
 800168a:	463a      	mov	r2, r7
 800168c:	4628      	mov	r0, r5
 800168e:	47b0      	blx	r6
 8001690:	2800      	cmp	r0, #0
 8001692:	dc06      	bgt.n	80016a2 <__sflush_r+0xfe>
 8001694:	89a3      	ldrh	r3, [r4, #12]
 8001696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169a:	81a3      	strh	r3, [r4, #12]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	e78e      	b.n	80015c0 <__sflush_r+0x1c>
 80016a2:	4407      	add	r7, r0
 80016a4:	eba8 0800 	sub.w	r8, r8, r0
 80016a8:	e7e9      	b.n	800167e <__sflush_r+0xda>
 80016aa:	bf00      	nop
 80016ac:	20400001 	.word	0x20400001

080016b0 <_fflush_r>:
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	690b      	ldr	r3, [r1, #16]
 80016b4:	4605      	mov	r5, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	b913      	cbnz	r3, 80016c0 <_fflush_r+0x10>
 80016ba:	2500      	movs	r5, #0
 80016bc:	4628      	mov	r0, r5
 80016be:	bd38      	pop	{r3, r4, r5, pc}
 80016c0:	b118      	cbz	r0, 80016ca <_fflush_r+0x1a>
 80016c2:	6983      	ldr	r3, [r0, #24]
 80016c4:	b90b      	cbnz	r3, 80016ca <_fflush_r+0x1a>
 80016c6:	f000 f887 	bl	80017d8 <__sinit>
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <_fflush_r+0x6c>)
 80016cc:	429c      	cmp	r4, r3
 80016ce:	d11b      	bne.n	8001708 <_fflush_r+0x58>
 80016d0:	686c      	ldr	r4, [r5, #4]
 80016d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0ef      	beq.n	80016ba <_fflush_r+0xa>
 80016da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016dc:	07d0      	lsls	r0, r2, #31
 80016de:	d404      	bmi.n	80016ea <_fflush_r+0x3a>
 80016e0:	0599      	lsls	r1, r3, #22
 80016e2:	d402      	bmi.n	80016ea <_fflush_r+0x3a>
 80016e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016e6:	f000 f915 	bl	8001914 <__retarget_lock_acquire_recursive>
 80016ea:	4628      	mov	r0, r5
 80016ec:	4621      	mov	r1, r4
 80016ee:	f7ff ff59 	bl	80015a4 <__sflush_r>
 80016f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016f4:	07da      	lsls	r2, r3, #31
 80016f6:	4605      	mov	r5, r0
 80016f8:	d4e0      	bmi.n	80016bc <_fflush_r+0xc>
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	059b      	lsls	r3, r3, #22
 80016fe:	d4dd      	bmi.n	80016bc <_fflush_r+0xc>
 8001700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001702:	f000 f908 	bl	8001916 <__retarget_lock_release_recursive>
 8001706:	e7d9      	b.n	80016bc <_fflush_r+0xc>
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <_fflush_r+0x70>)
 800170a:	429c      	cmp	r4, r3
 800170c:	d101      	bne.n	8001712 <_fflush_r+0x62>
 800170e:	68ac      	ldr	r4, [r5, #8]
 8001710:	e7df      	b.n	80016d2 <_fflush_r+0x22>
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <_fflush_r+0x74>)
 8001714:	429c      	cmp	r4, r3
 8001716:	bf08      	it	eq
 8001718:	68ec      	ldreq	r4, [r5, #12]
 800171a:	e7da      	b.n	80016d2 <_fflush_r+0x22>
 800171c:	080024f8 	.word	0x080024f8
 8001720:	08002518 	.word	0x08002518
 8001724:	080024d8 	.word	0x080024d8

08001728 <std>:
 8001728:	2300      	movs	r3, #0
 800172a:	b510      	push	{r4, lr}
 800172c:	4604      	mov	r4, r0
 800172e:	e9c0 3300 	strd	r3, r3, [r0]
 8001732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001736:	6083      	str	r3, [r0, #8]
 8001738:	8181      	strh	r1, [r0, #12]
 800173a:	6643      	str	r3, [r0, #100]	; 0x64
 800173c:	81c2      	strh	r2, [r0, #14]
 800173e:	6183      	str	r3, [r0, #24]
 8001740:	4619      	mov	r1, r3
 8001742:	2208      	movs	r2, #8
 8001744:	305c      	adds	r0, #92	; 0x5c
 8001746:	f7ff fe3f 	bl	80013c8 <memset>
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <std+0x38>)
 800174c:	6263      	str	r3, [r4, #36]	; 0x24
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <std+0x3c>)
 8001750:	62a3      	str	r3, [r4, #40]	; 0x28
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <std+0x40>)
 8001754:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <std+0x44>)
 8001758:	6224      	str	r4, [r4, #32]
 800175a:	6323      	str	r3, [r4, #48]	; 0x30
 800175c:	bd10      	pop	{r4, pc}
 800175e:	bf00      	nop
 8001760:	08002141 	.word	0x08002141
 8001764:	08002163 	.word	0x08002163
 8001768:	0800219b 	.word	0x0800219b
 800176c:	080021bf 	.word	0x080021bf

08001770 <_cleanup_r>:
 8001770:	4901      	ldr	r1, [pc, #4]	; (8001778 <_cleanup_r+0x8>)
 8001772:	f000 b8af 	b.w	80018d4 <_fwalk_reent>
 8001776:	bf00      	nop
 8001778:	080016b1 	.word	0x080016b1

0800177c <__sfmoreglue>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	1e4a      	subs	r2, r1, #1
 8001780:	2568      	movs	r5, #104	; 0x68
 8001782:	4355      	muls	r5, r2
 8001784:	460e      	mov	r6, r1
 8001786:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800178a:	f000 f981 	bl	8001a90 <_malloc_r>
 800178e:	4604      	mov	r4, r0
 8001790:	b140      	cbz	r0, 80017a4 <__sfmoreglue+0x28>
 8001792:	2100      	movs	r1, #0
 8001794:	e9c0 1600 	strd	r1, r6, [r0]
 8001798:	300c      	adds	r0, #12
 800179a:	60a0      	str	r0, [r4, #8]
 800179c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017a0:	f7ff fe12 	bl	80013c8 <memset>
 80017a4:	4620      	mov	r0, r4
 80017a6:	bd70      	pop	{r4, r5, r6, pc}

080017a8 <__sfp_lock_acquire>:
 80017a8:	4801      	ldr	r0, [pc, #4]	; (80017b0 <__sfp_lock_acquire+0x8>)
 80017aa:	f000 b8b3 	b.w	8001914 <__retarget_lock_acquire_recursive>
 80017ae:	bf00      	nop
 80017b0:	200001c4 	.word	0x200001c4

080017b4 <__sfp_lock_release>:
 80017b4:	4801      	ldr	r0, [pc, #4]	; (80017bc <__sfp_lock_release+0x8>)
 80017b6:	f000 b8ae 	b.w	8001916 <__retarget_lock_release_recursive>
 80017ba:	bf00      	nop
 80017bc:	200001c4 	.word	0x200001c4

080017c0 <__sinit_lock_acquire>:
 80017c0:	4801      	ldr	r0, [pc, #4]	; (80017c8 <__sinit_lock_acquire+0x8>)
 80017c2:	f000 b8a7 	b.w	8001914 <__retarget_lock_acquire_recursive>
 80017c6:	bf00      	nop
 80017c8:	200001bf 	.word	0x200001bf

080017cc <__sinit_lock_release>:
 80017cc:	4801      	ldr	r0, [pc, #4]	; (80017d4 <__sinit_lock_release+0x8>)
 80017ce:	f000 b8a2 	b.w	8001916 <__retarget_lock_release_recursive>
 80017d2:	bf00      	nop
 80017d4:	200001bf 	.word	0x200001bf

080017d8 <__sinit>:
 80017d8:	b510      	push	{r4, lr}
 80017da:	4604      	mov	r4, r0
 80017dc:	f7ff fff0 	bl	80017c0 <__sinit_lock_acquire>
 80017e0:	69a3      	ldr	r3, [r4, #24]
 80017e2:	b11b      	cbz	r3, 80017ec <__sinit+0x14>
 80017e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017e8:	f7ff bff0 	b.w	80017cc <__sinit_lock_release>
 80017ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017f0:	6523      	str	r3, [r4, #80]	; 0x50
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <__sinit+0x68>)
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <__sinit+0x6c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80017fa:	42a3      	cmp	r3, r4
 80017fc:	bf04      	itt	eq
 80017fe:	2301      	moveq	r3, #1
 8001800:	61a3      	streq	r3, [r4, #24]
 8001802:	4620      	mov	r0, r4
 8001804:	f000 f820 	bl	8001848 <__sfp>
 8001808:	6060      	str	r0, [r4, #4]
 800180a:	4620      	mov	r0, r4
 800180c:	f000 f81c 	bl	8001848 <__sfp>
 8001810:	60a0      	str	r0, [r4, #8]
 8001812:	4620      	mov	r0, r4
 8001814:	f000 f818 	bl	8001848 <__sfp>
 8001818:	2200      	movs	r2, #0
 800181a:	60e0      	str	r0, [r4, #12]
 800181c:	2104      	movs	r1, #4
 800181e:	6860      	ldr	r0, [r4, #4]
 8001820:	f7ff ff82 	bl	8001728 <std>
 8001824:	68a0      	ldr	r0, [r4, #8]
 8001826:	2201      	movs	r2, #1
 8001828:	2109      	movs	r1, #9
 800182a:	f7ff ff7d 	bl	8001728 <std>
 800182e:	68e0      	ldr	r0, [r4, #12]
 8001830:	2202      	movs	r2, #2
 8001832:	2112      	movs	r1, #18
 8001834:	f7ff ff78 	bl	8001728 <std>
 8001838:	2301      	movs	r3, #1
 800183a:	61a3      	str	r3, [r4, #24]
 800183c:	e7d2      	b.n	80017e4 <__sinit+0xc>
 800183e:	bf00      	nop
 8001840:	080024d4 	.word	0x080024d4
 8001844:	08001771 	.word	0x08001771

08001848 <__sfp>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	4607      	mov	r7, r0
 800184c:	f7ff ffac 	bl	80017a8 <__sfp_lock_acquire>
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <__sfp+0x84>)
 8001852:	681e      	ldr	r6, [r3, #0]
 8001854:	69b3      	ldr	r3, [r6, #24]
 8001856:	b913      	cbnz	r3, 800185e <__sfp+0x16>
 8001858:	4630      	mov	r0, r6
 800185a:	f7ff ffbd 	bl	80017d8 <__sinit>
 800185e:	3648      	adds	r6, #72	; 0x48
 8001860:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001864:	3b01      	subs	r3, #1
 8001866:	d503      	bpl.n	8001870 <__sfp+0x28>
 8001868:	6833      	ldr	r3, [r6, #0]
 800186a:	b30b      	cbz	r3, 80018b0 <__sfp+0x68>
 800186c:	6836      	ldr	r6, [r6, #0]
 800186e:	e7f7      	b.n	8001860 <__sfp+0x18>
 8001870:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001874:	b9d5      	cbnz	r5, 80018ac <__sfp+0x64>
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <__sfp+0x88>)
 8001878:	60e3      	str	r3, [r4, #12]
 800187a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800187e:	6665      	str	r5, [r4, #100]	; 0x64
 8001880:	f000 f847 	bl	8001912 <__retarget_lock_init_recursive>
 8001884:	f7ff ff96 	bl	80017b4 <__sfp_lock_release>
 8001888:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800188c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001890:	6025      	str	r5, [r4, #0]
 8001892:	61a5      	str	r5, [r4, #24]
 8001894:	2208      	movs	r2, #8
 8001896:	4629      	mov	r1, r5
 8001898:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800189c:	f7ff fd94 	bl	80013c8 <memset>
 80018a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018a8:	4620      	mov	r0, r4
 80018aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ac:	3468      	adds	r4, #104	; 0x68
 80018ae:	e7d9      	b.n	8001864 <__sfp+0x1c>
 80018b0:	2104      	movs	r1, #4
 80018b2:	4638      	mov	r0, r7
 80018b4:	f7ff ff62 	bl	800177c <__sfmoreglue>
 80018b8:	4604      	mov	r4, r0
 80018ba:	6030      	str	r0, [r6, #0]
 80018bc:	2800      	cmp	r0, #0
 80018be:	d1d5      	bne.n	800186c <__sfp+0x24>
 80018c0:	f7ff ff78 	bl	80017b4 <__sfp_lock_release>
 80018c4:	230c      	movs	r3, #12
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	e7ee      	b.n	80018a8 <__sfp+0x60>
 80018ca:	bf00      	nop
 80018cc:	080024d4 	.word	0x080024d4
 80018d0:	ffff0001 	.word	0xffff0001

080018d4 <_fwalk_reent>:
 80018d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018d8:	4606      	mov	r6, r0
 80018da:	4688      	mov	r8, r1
 80018dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018e0:	2700      	movs	r7, #0
 80018e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018e6:	f1b9 0901 	subs.w	r9, r9, #1
 80018ea:	d505      	bpl.n	80018f8 <_fwalk_reent+0x24>
 80018ec:	6824      	ldr	r4, [r4, #0]
 80018ee:	2c00      	cmp	r4, #0
 80018f0:	d1f7      	bne.n	80018e2 <_fwalk_reent+0xe>
 80018f2:	4638      	mov	r0, r7
 80018f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018f8:	89ab      	ldrh	r3, [r5, #12]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d907      	bls.n	800190e <_fwalk_reent+0x3a>
 80018fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001902:	3301      	adds	r3, #1
 8001904:	d003      	beq.n	800190e <_fwalk_reent+0x3a>
 8001906:	4629      	mov	r1, r5
 8001908:	4630      	mov	r0, r6
 800190a:	47c0      	blx	r8
 800190c:	4307      	orrs	r7, r0
 800190e:	3568      	adds	r5, #104	; 0x68
 8001910:	e7e9      	b.n	80018e6 <_fwalk_reent+0x12>

08001912 <__retarget_lock_init_recursive>:
 8001912:	4770      	bx	lr

08001914 <__retarget_lock_acquire_recursive>:
 8001914:	4770      	bx	lr

08001916 <__retarget_lock_release_recursive>:
 8001916:	4770      	bx	lr

08001918 <__swhatbuf_r>:
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	460e      	mov	r6, r1
 800191c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001920:	2900      	cmp	r1, #0
 8001922:	b096      	sub	sp, #88	; 0x58
 8001924:	4614      	mov	r4, r2
 8001926:	461d      	mov	r5, r3
 8001928:	da07      	bge.n	800193a <__swhatbuf_r+0x22>
 800192a:	2300      	movs	r3, #0
 800192c:	602b      	str	r3, [r5, #0]
 800192e:	89b3      	ldrh	r3, [r6, #12]
 8001930:	061a      	lsls	r2, r3, #24
 8001932:	d410      	bmi.n	8001956 <__swhatbuf_r+0x3e>
 8001934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001938:	e00e      	b.n	8001958 <__swhatbuf_r+0x40>
 800193a:	466a      	mov	r2, sp
 800193c:	f000 fd14 	bl	8002368 <_fstat_r>
 8001940:	2800      	cmp	r0, #0
 8001942:	dbf2      	blt.n	800192a <__swhatbuf_r+0x12>
 8001944:	9a01      	ldr	r2, [sp, #4]
 8001946:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800194a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800194e:	425a      	negs	r2, r3
 8001950:	415a      	adcs	r2, r3
 8001952:	602a      	str	r2, [r5, #0]
 8001954:	e7ee      	b.n	8001934 <__swhatbuf_r+0x1c>
 8001956:	2340      	movs	r3, #64	; 0x40
 8001958:	2000      	movs	r0, #0
 800195a:	6023      	str	r3, [r4, #0]
 800195c:	b016      	add	sp, #88	; 0x58
 800195e:	bd70      	pop	{r4, r5, r6, pc}

08001960 <__smakebuf_r>:
 8001960:	898b      	ldrh	r3, [r1, #12]
 8001962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001964:	079d      	lsls	r5, r3, #30
 8001966:	4606      	mov	r6, r0
 8001968:	460c      	mov	r4, r1
 800196a:	d507      	bpl.n	800197c <__smakebuf_r+0x1c>
 800196c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001970:	6023      	str	r3, [r4, #0]
 8001972:	6123      	str	r3, [r4, #16]
 8001974:	2301      	movs	r3, #1
 8001976:	6163      	str	r3, [r4, #20]
 8001978:	b002      	add	sp, #8
 800197a:	bd70      	pop	{r4, r5, r6, pc}
 800197c:	ab01      	add	r3, sp, #4
 800197e:	466a      	mov	r2, sp
 8001980:	f7ff ffca 	bl	8001918 <__swhatbuf_r>
 8001984:	9900      	ldr	r1, [sp, #0]
 8001986:	4605      	mov	r5, r0
 8001988:	4630      	mov	r0, r6
 800198a:	f000 f881 	bl	8001a90 <_malloc_r>
 800198e:	b948      	cbnz	r0, 80019a4 <__smakebuf_r+0x44>
 8001990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001994:	059a      	lsls	r2, r3, #22
 8001996:	d4ef      	bmi.n	8001978 <__smakebuf_r+0x18>
 8001998:	f023 0303 	bic.w	r3, r3, #3
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	81a3      	strh	r3, [r4, #12]
 80019a2:	e7e3      	b.n	800196c <__smakebuf_r+0xc>
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <__smakebuf_r+0x7c>)
 80019a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80019a8:	89a3      	ldrh	r3, [r4, #12]
 80019aa:	6020      	str	r0, [r4, #0]
 80019ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b0:	81a3      	strh	r3, [r4, #12]
 80019b2:	9b00      	ldr	r3, [sp, #0]
 80019b4:	6163      	str	r3, [r4, #20]
 80019b6:	9b01      	ldr	r3, [sp, #4]
 80019b8:	6120      	str	r0, [r4, #16]
 80019ba:	b15b      	cbz	r3, 80019d4 <__smakebuf_r+0x74>
 80019bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019c0:	4630      	mov	r0, r6
 80019c2:	f000 fce3 	bl	800238c <_isatty_r>
 80019c6:	b128      	cbz	r0, 80019d4 <__smakebuf_r+0x74>
 80019c8:	89a3      	ldrh	r3, [r4, #12]
 80019ca:	f023 0303 	bic.w	r3, r3, #3
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	81a3      	strh	r3, [r4, #12]
 80019d4:	89a0      	ldrh	r0, [r4, #12]
 80019d6:	4305      	orrs	r5, r0
 80019d8:	81a5      	strh	r5, [r4, #12]
 80019da:	e7cd      	b.n	8001978 <__smakebuf_r+0x18>
 80019dc:	08001771 	.word	0x08001771

080019e0 <malloc>:
 80019e0:	4b02      	ldr	r3, [pc, #8]	; (80019ec <malloc+0xc>)
 80019e2:	4601      	mov	r1, r0
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f000 b853 	b.w	8001a90 <_malloc_r>
 80019ea:	bf00      	nop
 80019ec:	2000002c 	.word	0x2000002c

080019f0 <_free_r>:
 80019f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019f2:	2900      	cmp	r1, #0
 80019f4:	d048      	beq.n	8001a88 <_free_r+0x98>
 80019f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019fa:	9001      	str	r0, [sp, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f1a1 0404 	sub.w	r4, r1, #4
 8001a02:	bfb8      	it	lt
 8001a04:	18e4      	addlt	r4, r4, r3
 8001a06:	f000 fce3 	bl	80023d0 <__malloc_lock>
 8001a0a:	4a20      	ldr	r2, [pc, #128]	; (8001a8c <_free_r+0x9c>)
 8001a0c:	9801      	ldr	r0, [sp, #4]
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	4615      	mov	r5, r2
 8001a12:	b933      	cbnz	r3, 8001a22 <_free_r+0x32>
 8001a14:	6063      	str	r3, [r4, #4]
 8001a16:	6014      	str	r4, [r2, #0]
 8001a18:	b003      	add	sp, #12
 8001a1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a1e:	f000 bcdd 	b.w	80023dc <__malloc_unlock>
 8001a22:	42a3      	cmp	r3, r4
 8001a24:	d90b      	bls.n	8001a3e <_free_r+0x4e>
 8001a26:	6821      	ldr	r1, [r4, #0]
 8001a28:	1862      	adds	r2, r4, r1
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	bf04      	itt	eq
 8001a2e:	681a      	ldreq	r2, [r3, #0]
 8001a30:	685b      	ldreq	r3, [r3, #4]
 8001a32:	6063      	str	r3, [r4, #4]
 8001a34:	bf04      	itt	eq
 8001a36:	1852      	addeq	r2, r2, r1
 8001a38:	6022      	streq	r2, [r4, #0]
 8001a3a:	602c      	str	r4, [r5, #0]
 8001a3c:	e7ec      	b.n	8001a18 <_free_r+0x28>
 8001a3e:	461a      	mov	r2, r3
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	b10b      	cbz	r3, 8001a48 <_free_r+0x58>
 8001a44:	42a3      	cmp	r3, r4
 8001a46:	d9fa      	bls.n	8001a3e <_free_r+0x4e>
 8001a48:	6811      	ldr	r1, [r2, #0]
 8001a4a:	1855      	adds	r5, r2, r1
 8001a4c:	42a5      	cmp	r5, r4
 8001a4e:	d10b      	bne.n	8001a68 <_free_r+0x78>
 8001a50:	6824      	ldr	r4, [r4, #0]
 8001a52:	4421      	add	r1, r4
 8001a54:	1854      	adds	r4, r2, r1
 8001a56:	42a3      	cmp	r3, r4
 8001a58:	6011      	str	r1, [r2, #0]
 8001a5a:	d1dd      	bne.n	8001a18 <_free_r+0x28>
 8001a5c:	681c      	ldr	r4, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	6053      	str	r3, [r2, #4]
 8001a62:	4421      	add	r1, r4
 8001a64:	6011      	str	r1, [r2, #0]
 8001a66:	e7d7      	b.n	8001a18 <_free_r+0x28>
 8001a68:	d902      	bls.n	8001a70 <_free_r+0x80>
 8001a6a:	230c      	movs	r3, #12
 8001a6c:	6003      	str	r3, [r0, #0]
 8001a6e:	e7d3      	b.n	8001a18 <_free_r+0x28>
 8001a70:	6825      	ldr	r5, [r4, #0]
 8001a72:	1961      	adds	r1, r4, r5
 8001a74:	428b      	cmp	r3, r1
 8001a76:	bf04      	itt	eq
 8001a78:	6819      	ldreq	r1, [r3, #0]
 8001a7a:	685b      	ldreq	r3, [r3, #4]
 8001a7c:	6063      	str	r3, [r4, #4]
 8001a7e:	bf04      	itt	eq
 8001a80:	1949      	addeq	r1, r1, r5
 8001a82:	6021      	streq	r1, [r4, #0]
 8001a84:	6054      	str	r4, [r2, #4]
 8001a86:	e7c7      	b.n	8001a18 <_free_r+0x28>
 8001a88:	b003      	add	sp, #12
 8001a8a:	bd30      	pop	{r4, r5, pc}
 8001a8c:	200001b4 	.word	0x200001b4

08001a90 <_malloc_r>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	1ccd      	adds	r5, r1, #3
 8001a94:	f025 0503 	bic.w	r5, r5, #3
 8001a98:	3508      	adds	r5, #8
 8001a9a:	2d0c      	cmp	r5, #12
 8001a9c:	bf38      	it	cc
 8001a9e:	250c      	movcc	r5, #12
 8001aa0:	2d00      	cmp	r5, #0
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	db01      	blt.n	8001aaa <_malloc_r+0x1a>
 8001aa6:	42a9      	cmp	r1, r5
 8001aa8:	d903      	bls.n	8001ab2 <_malloc_r+0x22>
 8001aaa:	230c      	movs	r3, #12
 8001aac:	6033      	str	r3, [r6, #0]
 8001aae:	2000      	movs	r0, #0
 8001ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab2:	f000 fc8d 	bl	80023d0 <__malloc_lock>
 8001ab6:	4921      	ldr	r1, [pc, #132]	; (8001b3c <_malloc_r+0xac>)
 8001ab8:	680a      	ldr	r2, [r1, #0]
 8001aba:	4614      	mov	r4, r2
 8001abc:	b99c      	cbnz	r4, 8001ae6 <_malloc_r+0x56>
 8001abe:	4f20      	ldr	r7, [pc, #128]	; (8001b40 <_malloc_r+0xb0>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b923      	cbnz	r3, 8001ace <_malloc_r+0x3e>
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f000 fb2a 	bl	8002120 <_sbrk_r>
 8001acc:	6038      	str	r0, [r7, #0]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f000 fb25 	bl	8002120 <_sbrk_r>
 8001ad6:	1c43      	adds	r3, r0, #1
 8001ad8:	d123      	bne.n	8001b22 <_malloc_r+0x92>
 8001ada:	230c      	movs	r3, #12
 8001adc:	6033      	str	r3, [r6, #0]
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f000 fc7c 	bl	80023dc <__malloc_unlock>
 8001ae4:	e7e3      	b.n	8001aae <_malloc_r+0x1e>
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	1b5b      	subs	r3, r3, r5
 8001aea:	d417      	bmi.n	8001b1c <_malloc_r+0x8c>
 8001aec:	2b0b      	cmp	r3, #11
 8001aee:	d903      	bls.n	8001af8 <_malloc_r+0x68>
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	441c      	add	r4, r3
 8001af4:	6025      	str	r5, [r4, #0]
 8001af6:	e004      	b.n	8001b02 <_malloc_r+0x72>
 8001af8:	6863      	ldr	r3, [r4, #4]
 8001afa:	42a2      	cmp	r2, r4
 8001afc:	bf0c      	ite	eq
 8001afe:	600b      	streq	r3, [r1, #0]
 8001b00:	6053      	strne	r3, [r2, #4]
 8001b02:	4630      	mov	r0, r6
 8001b04:	f000 fc6a 	bl	80023dc <__malloc_unlock>
 8001b08:	f104 000b 	add.w	r0, r4, #11
 8001b0c:	1d23      	adds	r3, r4, #4
 8001b0e:	f020 0007 	bic.w	r0, r0, #7
 8001b12:	1ac2      	subs	r2, r0, r3
 8001b14:	d0cc      	beq.n	8001ab0 <_malloc_r+0x20>
 8001b16:	1a1b      	subs	r3, r3, r0
 8001b18:	50a3      	str	r3, [r4, r2]
 8001b1a:	e7c9      	b.n	8001ab0 <_malloc_r+0x20>
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	6864      	ldr	r4, [r4, #4]
 8001b20:	e7cc      	b.n	8001abc <_malloc_r+0x2c>
 8001b22:	1cc4      	adds	r4, r0, #3
 8001b24:	f024 0403 	bic.w	r4, r4, #3
 8001b28:	42a0      	cmp	r0, r4
 8001b2a:	d0e3      	beq.n	8001af4 <_malloc_r+0x64>
 8001b2c:	1a21      	subs	r1, r4, r0
 8001b2e:	4630      	mov	r0, r6
 8001b30:	f000 faf6 	bl	8002120 <_sbrk_r>
 8001b34:	3001      	adds	r0, #1
 8001b36:	d1dd      	bne.n	8001af4 <_malloc_r+0x64>
 8001b38:	e7cf      	b.n	8001ada <_malloc_r+0x4a>
 8001b3a:	bf00      	nop
 8001b3c:	200001b4 	.word	0x200001b4
 8001b40:	200001b8 	.word	0x200001b8

08001b44 <__sfputc_r>:
 8001b44:	6893      	ldr	r3, [r2, #8]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	b410      	push	{r4}
 8001b4c:	6093      	str	r3, [r2, #8]
 8001b4e:	da08      	bge.n	8001b62 <__sfputc_r+0x1e>
 8001b50:	6994      	ldr	r4, [r2, #24]
 8001b52:	42a3      	cmp	r3, r4
 8001b54:	db01      	blt.n	8001b5a <__sfputc_r+0x16>
 8001b56:	290a      	cmp	r1, #10
 8001b58:	d103      	bne.n	8001b62 <__sfputc_r+0x1e>
 8001b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b5e:	f000 bb33 	b.w	80021c8 <__swbuf_r>
 8001b62:	6813      	ldr	r3, [r2, #0]
 8001b64:	1c58      	adds	r0, r3, #1
 8001b66:	6010      	str	r0, [r2, #0]
 8001b68:	7019      	strb	r1, [r3, #0]
 8001b6a:	4608      	mov	r0, r1
 8001b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <__sfputs_r>:
 8001b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b74:	4606      	mov	r6, r0
 8001b76:	460f      	mov	r7, r1
 8001b78:	4614      	mov	r4, r2
 8001b7a:	18d5      	adds	r5, r2, r3
 8001b7c:	42ac      	cmp	r4, r5
 8001b7e:	d101      	bne.n	8001b84 <__sfputs_r+0x12>
 8001b80:	2000      	movs	r0, #0
 8001b82:	e007      	b.n	8001b94 <__sfputs_r+0x22>
 8001b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b88:	463a      	mov	r2, r7
 8001b8a:	4630      	mov	r0, r6
 8001b8c:	f7ff ffda 	bl	8001b44 <__sfputc_r>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d1f3      	bne.n	8001b7c <__sfputs_r+0xa>
 8001b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b98 <_vfiprintf_r>:
 8001b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b9c:	460d      	mov	r5, r1
 8001b9e:	b09d      	sub	sp, #116	; 0x74
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	4606      	mov	r6, r0
 8001ba6:	b118      	cbz	r0, 8001bb0 <_vfiprintf_r+0x18>
 8001ba8:	6983      	ldr	r3, [r0, #24]
 8001baa:	b90b      	cbnz	r3, 8001bb0 <_vfiprintf_r+0x18>
 8001bac:	f7ff fe14 	bl	80017d8 <__sinit>
 8001bb0:	4b89      	ldr	r3, [pc, #548]	; (8001dd8 <_vfiprintf_r+0x240>)
 8001bb2:	429d      	cmp	r5, r3
 8001bb4:	d11b      	bne.n	8001bee <_vfiprintf_r+0x56>
 8001bb6:	6875      	ldr	r5, [r6, #4]
 8001bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bba:	07d9      	lsls	r1, r3, #31
 8001bbc:	d405      	bmi.n	8001bca <_vfiprintf_r+0x32>
 8001bbe:	89ab      	ldrh	r3, [r5, #12]
 8001bc0:	059a      	lsls	r2, r3, #22
 8001bc2:	d402      	bmi.n	8001bca <_vfiprintf_r+0x32>
 8001bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bc6:	f7ff fea5 	bl	8001914 <__retarget_lock_acquire_recursive>
 8001bca:	89ab      	ldrh	r3, [r5, #12]
 8001bcc:	071b      	lsls	r3, r3, #28
 8001bce:	d501      	bpl.n	8001bd4 <_vfiprintf_r+0x3c>
 8001bd0:	692b      	ldr	r3, [r5, #16]
 8001bd2:	b9eb      	cbnz	r3, 8001c10 <_vfiprintf_r+0x78>
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	f000 fb48 	bl	800226c <__swsetup_r>
 8001bdc:	b1c0      	cbz	r0, 8001c10 <_vfiprintf_r+0x78>
 8001bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001be0:	07dc      	lsls	r4, r3, #31
 8001be2:	d50e      	bpl.n	8001c02 <_vfiprintf_r+0x6a>
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	b01d      	add	sp, #116	; 0x74
 8001bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bee:	4b7b      	ldr	r3, [pc, #492]	; (8001ddc <_vfiprintf_r+0x244>)
 8001bf0:	429d      	cmp	r5, r3
 8001bf2:	d101      	bne.n	8001bf8 <_vfiprintf_r+0x60>
 8001bf4:	68b5      	ldr	r5, [r6, #8]
 8001bf6:	e7df      	b.n	8001bb8 <_vfiprintf_r+0x20>
 8001bf8:	4b79      	ldr	r3, [pc, #484]	; (8001de0 <_vfiprintf_r+0x248>)
 8001bfa:	429d      	cmp	r5, r3
 8001bfc:	bf08      	it	eq
 8001bfe:	68f5      	ldreq	r5, [r6, #12]
 8001c00:	e7da      	b.n	8001bb8 <_vfiprintf_r+0x20>
 8001c02:	89ab      	ldrh	r3, [r5, #12]
 8001c04:	0598      	lsls	r0, r3, #22
 8001c06:	d4ed      	bmi.n	8001be4 <_vfiprintf_r+0x4c>
 8001c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c0a:	f7ff fe84 	bl	8001916 <__retarget_lock_release_recursive>
 8001c0e:	e7e9      	b.n	8001be4 <_vfiprintf_r+0x4c>
 8001c10:	2300      	movs	r3, #0
 8001c12:	9309      	str	r3, [sp, #36]	; 0x24
 8001c14:	2320      	movs	r3, #32
 8001c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c1e:	2330      	movs	r3, #48	; 0x30
 8001c20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001de4 <_vfiprintf_r+0x24c>
 8001c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c28:	f04f 0901 	mov.w	r9, #1
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	469a      	mov	sl, r3
 8001c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c34:	b10a      	cbz	r2, 8001c3a <_vfiprintf_r+0xa2>
 8001c36:	2a25      	cmp	r2, #37	; 0x25
 8001c38:	d1f9      	bne.n	8001c2e <_vfiprintf_r+0x96>
 8001c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8001c3e:	d00b      	beq.n	8001c58 <_vfiprintf_r+0xc0>
 8001c40:	465b      	mov	r3, fp
 8001c42:	4622      	mov	r2, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	4630      	mov	r0, r6
 8001c48:	f7ff ff93 	bl	8001b72 <__sfputs_r>
 8001c4c:	3001      	adds	r0, #1
 8001c4e:	f000 80aa 	beq.w	8001da6 <_vfiprintf_r+0x20e>
 8001c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c54:	445a      	add	r2, fp
 8001c56:	9209      	str	r2, [sp, #36]	; 0x24
 8001c58:	f89a 3000 	ldrb.w	r3, [sl]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80a2 	beq.w	8001da6 <_vfiprintf_r+0x20e>
 8001c62:	2300      	movs	r3, #0
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c6c:	f10a 0a01 	add.w	sl, sl, #1
 8001c70:	9304      	str	r3, [sp, #16]
 8001c72:	9307      	str	r3, [sp, #28]
 8001c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c78:	931a      	str	r3, [sp, #104]	; 0x68
 8001c7a:	4654      	mov	r4, sl
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c82:	4858      	ldr	r0, [pc, #352]	; (8001de4 <_vfiprintf_r+0x24c>)
 8001c84:	f7fe faa4 	bl	80001d0 <memchr>
 8001c88:	9a04      	ldr	r2, [sp, #16]
 8001c8a:	b9d8      	cbnz	r0, 8001cc4 <_vfiprintf_r+0x12c>
 8001c8c:	06d1      	lsls	r1, r2, #27
 8001c8e:	bf44      	itt	mi
 8001c90:	2320      	movmi	r3, #32
 8001c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c96:	0713      	lsls	r3, r2, #28
 8001c98:	bf44      	itt	mi
 8001c9a:	232b      	movmi	r3, #43	; 0x2b
 8001c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ca6:	d015      	beq.n	8001cd4 <_vfiprintf_r+0x13c>
 8001ca8:	9a07      	ldr	r2, [sp, #28]
 8001caa:	4654      	mov	r4, sl
 8001cac:	2000      	movs	r0, #0
 8001cae:	f04f 0c0a 	mov.w	ip, #10
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cb8:	3b30      	subs	r3, #48	; 0x30
 8001cba:	2b09      	cmp	r3, #9
 8001cbc:	d94e      	bls.n	8001d5c <_vfiprintf_r+0x1c4>
 8001cbe:	b1b0      	cbz	r0, 8001cee <_vfiprintf_r+0x156>
 8001cc0:	9207      	str	r2, [sp, #28]
 8001cc2:	e014      	b.n	8001cee <_vfiprintf_r+0x156>
 8001cc4:	eba0 0308 	sub.w	r3, r0, r8
 8001cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	9304      	str	r3, [sp, #16]
 8001cd0:	46a2      	mov	sl, r4
 8001cd2:	e7d2      	b.n	8001c7a <_vfiprintf_r+0xe2>
 8001cd4:	9b03      	ldr	r3, [sp, #12]
 8001cd6:	1d19      	adds	r1, r3, #4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	9103      	str	r1, [sp, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bfbb      	ittet	lt
 8001ce0:	425b      	neglt	r3, r3
 8001ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8001ce6:	9307      	strge	r3, [sp, #28]
 8001ce8:	9307      	strlt	r3, [sp, #28]
 8001cea:	bfb8      	it	lt
 8001cec:	9204      	strlt	r2, [sp, #16]
 8001cee:	7823      	ldrb	r3, [r4, #0]
 8001cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8001cf2:	d10c      	bne.n	8001d0e <_vfiprintf_r+0x176>
 8001cf4:	7863      	ldrb	r3, [r4, #1]
 8001cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8001cf8:	d135      	bne.n	8001d66 <_vfiprintf_r+0x1ce>
 8001cfa:	9b03      	ldr	r3, [sp, #12]
 8001cfc:	1d1a      	adds	r2, r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	9203      	str	r2, [sp, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bfb8      	it	lt
 8001d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d0a:	3402      	adds	r4, #2
 8001d0c:	9305      	str	r3, [sp, #20]
 8001d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001df4 <_vfiprintf_r+0x25c>
 8001d12:	7821      	ldrb	r1, [r4, #0]
 8001d14:	2203      	movs	r2, #3
 8001d16:	4650      	mov	r0, sl
 8001d18:	f7fe fa5a 	bl	80001d0 <memchr>
 8001d1c:	b140      	cbz	r0, 8001d30 <_vfiprintf_r+0x198>
 8001d1e:	2340      	movs	r3, #64	; 0x40
 8001d20:	eba0 000a 	sub.w	r0, r0, sl
 8001d24:	fa03 f000 	lsl.w	r0, r3, r0
 8001d28:	9b04      	ldr	r3, [sp, #16]
 8001d2a:	4303      	orrs	r3, r0
 8001d2c:	3401      	adds	r4, #1
 8001d2e:	9304      	str	r3, [sp, #16]
 8001d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d34:	482c      	ldr	r0, [pc, #176]	; (8001de8 <_vfiprintf_r+0x250>)
 8001d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d3a:	2206      	movs	r2, #6
 8001d3c:	f7fe fa48 	bl	80001d0 <memchr>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	d03f      	beq.n	8001dc4 <_vfiprintf_r+0x22c>
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <_vfiprintf_r+0x254>)
 8001d46:	bb1b      	cbnz	r3, 8001d90 <_vfiprintf_r+0x1f8>
 8001d48:	9b03      	ldr	r3, [sp, #12]
 8001d4a:	3307      	adds	r3, #7
 8001d4c:	f023 0307 	bic.w	r3, r3, #7
 8001d50:	3308      	adds	r3, #8
 8001d52:	9303      	str	r3, [sp, #12]
 8001d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d56:	443b      	add	r3, r7
 8001d58:	9309      	str	r3, [sp, #36]	; 0x24
 8001d5a:	e767      	b.n	8001c2c <_vfiprintf_r+0x94>
 8001d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d60:	460c      	mov	r4, r1
 8001d62:	2001      	movs	r0, #1
 8001d64:	e7a5      	b.n	8001cb2 <_vfiprintf_r+0x11a>
 8001d66:	2300      	movs	r3, #0
 8001d68:	3401      	adds	r4, #1
 8001d6a:	9305      	str	r3, [sp, #20]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 0c0a 	mov.w	ip, #10
 8001d72:	4620      	mov	r0, r4
 8001d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d78:	3a30      	subs	r2, #48	; 0x30
 8001d7a:	2a09      	cmp	r2, #9
 8001d7c:	d903      	bls.n	8001d86 <_vfiprintf_r+0x1ee>
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0c5      	beq.n	8001d0e <_vfiprintf_r+0x176>
 8001d82:	9105      	str	r1, [sp, #20]
 8001d84:	e7c3      	b.n	8001d0e <_vfiprintf_r+0x176>
 8001d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e7f0      	b.n	8001d72 <_vfiprintf_r+0x1da>
 8001d90:	ab03      	add	r3, sp, #12
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	462a      	mov	r2, r5
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <_vfiprintf_r+0x258>)
 8001d98:	a904      	add	r1, sp, #16
 8001d9a:	4630      	mov	r0, r6
 8001d9c:	f3af 8000 	nop.w
 8001da0:	4607      	mov	r7, r0
 8001da2:	1c78      	adds	r0, r7, #1
 8001da4:	d1d6      	bne.n	8001d54 <_vfiprintf_r+0x1bc>
 8001da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001da8:	07d9      	lsls	r1, r3, #31
 8001daa:	d405      	bmi.n	8001db8 <_vfiprintf_r+0x220>
 8001dac:	89ab      	ldrh	r3, [r5, #12]
 8001dae:	059a      	lsls	r2, r3, #22
 8001db0:	d402      	bmi.n	8001db8 <_vfiprintf_r+0x220>
 8001db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001db4:	f7ff fdaf 	bl	8001916 <__retarget_lock_release_recursive>
 8001db8:	89ab      	ldrh	r3, [r5, #12]
 8001dba:	065b      	lsls	r3, r3, #25
 8001dbc:	f53f af12 	bmi.w	8001be4 <_vfiprintf_r+0x4c>
 8001dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dc2:	e711      	b.n	8001be8 <_vfiprintf_r+0x50>
 8001dc4:	ab03      	add	r3, sp, #12
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	462a      	mov	r2, r5
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <_vfiprintf_r+0x258>)
 8001dcc:	a904      	add	r1, sp, #16
 8001dce:	4630      	mov	r0, r6
 8001dd0:	f000 f880 	bl	8001ed4 <_printf_i>
 8001dd4:	e7e4      	b.n	8001da0 <_vfiprintf_r+0x208>
 8001dd6:	bf00      	nop
 8001dd8:	080024f8 	.word	0x080024f8
 8001ddc:	08002518 	.word	0x08002518
 8001de0:	080024d8 	.word	0x080024d8
 8001de4:	08002538 	.word	0x08002538
 8001de8:	08002542 	.word	0x08002542
 8001dec:	00000000 	.word	0x00000000
 8001df0:	08001b73 	.word	0x08001b73
 8001df4:	0800253e 	.word	0x0800253e

08001df8 <_printf_common>:
 8001df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dfc:	4616      	mov	r6, r2
 8001dfe:	4699      	mov	r9, r3
 8001e00:	688a      	ldr	r2, [r1, #8]
 8001e02:	690b      	ldr	r3, [r1, #16]
 8001e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	bfb8      	it	lt
 8001e0c:	4613      	movlt	r3, r2
 8001e0e:	6033      	str	r3, [r6, #0]
 8001e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e14:	4607      	mov	r7, r0
 8001e16:	460c      	mov	r4, r1
 8001e18:	b10a      	cbz	r2, 8001e1e <_printf_common+0x26>
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	6033      	str	r3, [r6, #0]
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	0699      	lsls	r1, r3, #26
 8001e22:	bf42      	ittt	mi
 8001e24:	6833      	ldrmi	r3, [r6, #0]
 8001e26:	3302      	addmi	r3, #2
 8001e28:	6033      	strmi	r3, [r6, #0]
 8001e2a:	6825      	ldr	r5, [r4, #0]
 8001e2c:	f015 0506 	ands.w	r5, r5, #6
 8001e30:	d106      	bne.n	8001e40 <_printf_common+0x48>
 8001e32:	f104 0a19 	add.w	sl, r4, #25
 8001e36:	68e3      	ldr	r3, [r4, #12]
 8001e38:	6832      	ldr	r2, [r6, #0]
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	42ab      	cmp	r3, r5
 8001e3e:	dc26      	bgt.n	8001e8e <_printf_common+0x96>
 8001e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e44:	1e13      	subs	r3, r2, #0
 8001e46:	6822      	ldr	r2, [r4, #0]
 8001e48:	bf18      	it	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	0692      	lsls	r2, r2, #26
 8001e4e:	d42b      	bmi.n	8001ea8 <_printf_common+0xb0>
 8001e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e54:	4649      	mov	r1, r9
 8001e56:	4638      	mov	r0, r7
 8001e58:	47c0      	blx	r8
 8001e5a:	3001      	adds	r0, #1
 8001e5c:	d01e      	beq.n	8001e9c <_printf_common+0xa4>
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	68e5      	ldr	r5, [r4, #12]
 8001e62:	6832      	ldr	r2, [r6, #0]
 8001e64:	f003 0306 	and.w	r3, r3, #6
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	bf08      	it	eq
 8001e6c:	1aad      	subeq	r5, r5, r2
 8001e6e:	68a3      	ldr	r3, [r4, #8]
 8001e70:	6922      	ldr	r2, [r4, #16]
 8001e72:	bf0c      	ite	eq
 8001e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e78:	2500      	movne	r5, #0
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	bfc4      	itt	gt
 8001e7e:	1a9b      	subgt	r3, r3, r2
 8001e80:	18ed      	addgt	r5, r5, r3
 8001e82:	2600      	movs	r6, #0
 8001e84:	341a      	adds	r4, #26
 8001e86:	42b5      	cmp	r5, r6
 8001e88:	d11a      	bne.n	8001ec0 <_printf_common+0xc8>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	e008      	b.n	8001ea0 <_printf_common+0xa8>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4652      	mov	r2, sl
 8001e92:	4649      	mov	r1, r9
 8001e94:	4638      	mov	r0, r7
 8001e96:	47c0      	blx	r8
 8001e98:	3001      	adds	r0, #1
 8001e9a:	d103      	bne.n	8001ea4 <_printf_common+0xac>
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ea4:	3501      	adds	r5, #1
 8001ea6:	e7c6      	b.n	8001e36 <_printf_common+0x3e>
 8001ea8:	18e1      	adds	r1, r4, r3
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	2030      	movs	r0, #48	; 0x30
 8001eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001eb2:	4422      	add	r2, r4
 8001eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	e7c7      	b.n	8001e50 <_printf_common+0x58>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	47c0      	blx	r8
 8001eca:	3001      	adds	r0, #1
 8001ecc:	d0e6      	beq.n	8001e9c <_printf_common+0xa4>
 8001ece:	3601      	adds	r6, #1
 8001ed0:	e7d9      	b.n	8001e86 <_printf_common+0x8e>
	...

08001ed4 <_printf_i>:
 8001ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed8:	460c      	mov	r4, r1
 8001eda:	4691      	mov	r9, r2
 8001edc:	7e27      	ldrb	r7, [r4, #24]
 8001ede:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001ee0:	2f78      	cmp	r7, #120	; 0x78
 8001ee2:	4680      	mov	r8, r0
 8001ee4:	469a      	mov	sl, r3
 8001ee6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001eea:	d807      	bhi.n	8001efc <_printf_i+0x28>
 8001eec:	2f62      	cmp	r7, #98	; 0x62
 8001eee:	d80a      	bhi.n	8001f06 <_printf_i+0x32>
 8001ef0:	2f00      	cmp	r7, #0
 8001ef2:	f000 80d8 	beq.w	80020a6 <_printf_i+0x1d2>
 8001ef6:	2f58      	cmp	r7, #88	; 0x58
 8001ef8:	f000 80a3 	beq.w	8002042 <_printf_i+0x16e>
 8001efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f04:	e03a      	b.n	8001f7c <_printf_i+0xa8>
 8001f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f0a:	2b15      	cmp	r3, #21
 8001f0c:	d8f6      	bhi.n	8001efc <_printf_i+0x28>
 8001f0e:	a001      	add	r0, pc, #4	; (adr r0, 8001f14 <_printf_i+0x40>)
 8001f10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001f14:	08001f6d 	.word	0x08001f6d
 8001f18:	08001f81 	.word	0x08001f81
 8001f1c:	08001efd 	.word	0x08001efd
 8001f20:	08001efd 	.word	0x08001efd
 8001f24:	08001efd 	.word	0x08001efd
 8001f28:	08001efd 	.word	0x08001efd
 8001f2c:	08001f81 	.word	0x08001f81
 8001f30:	08001efd 	.word	0x08001efd
 8001f34:	08001efd 	.word	0x08001efd
 8001f38:	08001efd 	.word	0x08001efd
 8001f3c:	08001efd 	.word	0x08001efd
 8001f40:	0800208d 	.word	0x0800208d
 8001f44:	08001fb1 	.word	0x08001fb1
 8001f48:	0800206f 	.word	0x0800206f
 8001f4c:	08001efd 	.word	0x08001efd
 8001f50:	08001efd 	.word	0x08001efd
 8001f54:	080020af 	.word	0x080020af
 8001f58:	08001efd 	.word	0x08001efd
 8001f5c:	08001fb1 	.word	0x08001fb1
 8001f60:	08001efd 	.word	0x08001efd
 8001f64:	08001efd 	.word	0x08001efd
 8001f68:	08002077 	.word	0x08002077
 8001f6c:	680b      	ldr	r3, [r1, #0]
 8001f6e:	1d1a      	adds	r2, r3, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	600a      	str	r2, [r1, #0]
 8001f74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0a3      	b.n	80020c8 <_printf_i+0x1f4>
 8001f80:	6825      	ldr	r5, [r4, #0]
 8001f82:	6808      	ldr	r0, [r1, #0]
 8001f84:	062e      	lsls	r6, r5, #24
 8001f86:	f100 0304 	add.w	r3, r0, #4
 8001f8a:	d50a      	bpl.n	8001fa2 <_printf_i+0xce>
 8001f8c:	6805      	ldr	r5, [r0, #0]
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	2d00      	cmp	r5, #0
 8001f92:	da03      	bge.n	8001f9c <_printf_i+0xc8>
 8001f94:	232d      	movs	r3, #45	; 0x2d
 8001f96:	426d      	negs	r5, r5
 8001f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f9c:	485e      	ldr	r0, [pc, #376]	; (8002118 <_printf_i+0x244>)
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	e019      	b.n	8001fd6 <_printf_i+0x102>
 8001fa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001fa6:	6805      	ldr	r5, [r0, #0]
 8001fa8:	600b      	str	r3, [r1, #0]
 8001faa:	bf18      	it	ne
 8001fac:	b22d      	sxthne	r5, r5
 8001fae:	e7ef      	b.n	8001f90 <_printf_i+0xbc>
 8001fb0:	680b      	ldr	r3, [r1, #0]
 8001fb2:	6825      	ldr	r5, [r4, #0]
 8001fb4:	1d18      	adds	r0, r3, #4
 8001fb6:	6008      	str	r0, [r1, #0]
 8001fb8:	0628      	lsls	r0, r5, #24
 8001fba:	d501      	bpl.n	8001fc0 <_printf_i+0xec>
 8001fbc:	681d      	ldr	r5, [r3, #0]
 8001fbe:	e002      	b.n	8001fc6 <_printf_i+0xf2>
 8001fc0:	0669      	lsls	r1, r5, #25
 8001fc2:	d5fb      	bpl.n	8001fbc <_printf_i+0xe8>
 8001fc4:	881d      	ldrh	r5, [r3, #0]
 8001fc6:	4854      	ldr	r0, [pc, #336]	; (8002118 <_printf_i+0x244>)
 8001fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8001fca:	bf0c      	ite	eq
 8001fcc:	2308      	moveq	r3, #8
 8001fce:	230a      	movne	r3, #10
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fd6:	6866      	ldr	r6, [r4, #4]
 8001fd8:	60a6      	str	r6, [r4, #8]
 8001fda:	2e00      	cmp	r6, #0
 8001fdc:	bfa2      	ittt	ge
 8001fde:	6821      	ldrge	r1, [r4, #0]
 8001fe0:	f021 0104 	bicge.w	r1, r1, #4
 8001fe4:	6021      	strge	r1, [r4, #0]
 8001fe6:	b90d      	cbnz	r5, 8001fec <_printf_i+0x118>
 8001fe8:	2e00      	cmp	r6, #0
 8001fea:	d04d      	beq.n	8002088 <_printf_i+0x1b4>
 8001fec:	4616      	mov	r6, r2
 8001fee:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ff2:	fb03 5711 	mls	r7, r3, r1, r5
 8001ff6:	5dc7      	ldrb	r7, [r0, r7]
 8001ff8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ffc:	462f      	mov	r7, r5
 8001ffe:	42bb      	cmp	r3, r7
 8002000:	460d      	mov	r5, r1
 8002002:	d9f4      	bls.n	8001fee <_printf_i+0x11a>
 8002004:	2b08      	cmp	r3, #8
 8002006:	d10b      	bne.n	8002020 <_printf_i+0x14c>
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	07df      	lsls	r7, r3, #31
 800200c:	d508      	bpl.n	8002020 <_printf_i+0x14c>
 800200e:	6923      	ldr	r3, [r4, #16]
 8002010:	6861      	ldr	r1, [r4, #4]
 8002012:	4299      	cmp	r1, r3
 8002014:	bfde      	ittt	le
 8002016:	2330      	movle	r3, #48	; 0x30
 8002018:	f806 3c01 	strble.w	r3, [r6, #-1]
 800201c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002020:	1b92      	subs	r2, r2, r6
 8002022:	6122      	str	r2, [r4, #16]
 8002024:	f8cd a000 	str.w	sl, [sp]
 8002028:	464b      	mov	r3, r9
 800202a:	aa03      	add	r2, sp, #12
 800202c:	4621      	mov	r1, r4
 800202e:	4640      	mov	r0, r8
 8002030:	f7ff fee2 	bl	8001df8 <_printf_common>
 8002034:	3001      	adds	r0, #1
 8002036:	d14c      	bne.n	80020d2 <_printf_i+0x1fe>
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	b004      	add	sp, #16
 800203e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002042:	4835      	ldr	r0, [pc, #212]	; (8002118 <_printf_i+0x244>)
 8002044:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002048:	6823      	ldr	r3, [r4, #0]
 800204a:	680e      	ldr	r6, [r1, #0]
 800204c:	061f      	lsls	r7, r3, #24
 800204e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002052:	600e      	str	r6, [r1, #0]
 8002054:	d514      	bpl.n	8002080 <_printf_i+0x1ac>
 8002056:	07d9      	lsls	r1, r3, #31
 8002058:	bf44      	itt	mi
 800205a:	f043 0320 	orrmi.w	r3, r3, #32
 800205e:	6023      	strmi	r3, [r4, #0]
 8002060:	b91d      	cbnz	r5, 800206a <_printf_i+0x196>
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	f023 0320 	bic.w	r3, r3, #32
 8002068:	6023      	str	r3, [r4, #0]
 800206a:	2310      	movs	r3, #16
 800206c:	e7b0      	b.n	8001fd0 <_printf_i+0xfc>
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	f043 0320 	orr.w	r3, r3, #32
 8002074:	6023      	str	r3, [r4, #0]
 8002076:	2378      	movs	r3, #120	; 0x78
 8002078:	4828      	ldr	r0, [pc, #160]	; (800211c <_printf_i+0x248>)
 800207a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800207e:	e7e3      	b.n	8002048 <_printf_i+0x174>
 8002080:	065e      	lsls	r6, r3, #25
 8002082:	bf48      	it	mi
 8002084:	b2ad      	uxthmi	r5, r5
 8002086:	e7e6      	b.n	8002056 <_printf_i+0x182>
 8002088:	4616      	mov	r6, r2
 800208a:	e7bb      	b.n	8002004 <_printf_i+0x130>
 800208c:	680b      	ldr	r3, [r1, #0]
 800208e:	6826      	ldr	r6, [r4, #0]
 8002090:	6960      	ldr	r0, [r4, #20]
 8002092:	1d1d      	adds	r5, r3, #4
 8002094:	600d      	str	r5, [r1, #0]
 8002096:	0635      	lsls	r5, r6, #24
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	d501      	bpl.n	80020a0 <_printf_i+0x1cc>
 800209c:	6018      	str	r0, [r3, #0]
 800209e:	e002      	b.n	80020a6 <_printf_i+0x1d2>
 80020a0:	0671      	lsls	r1, r6, #25
 80020a2:	d5fb      	bpl.n	800209c <_printf_i+0x1c8>
 80020a4:	8018      	strh	r0, [r3, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	6123      	str	r3, [r4, #16]
 80020aa:	4616      	mov	r6, r2
 80020ac:	e7ba      	b.n	8002024 <_printf_i+0x150>
 80020ae:	680b      	ldr	r3, [r1, #0]
 80020b0:	1d1a      	adds	r2, r3, #4
 80020b2:	600a      	str	r2, [r1, #0]
 80020b4:	681e      	ldr	r6, [r3, #0]
 80020b6:	6862      	ldr	r2, [r4, #4]
 80020b8:	2100      	movs	r1, #0
 80020ba:	4630      	mov	r0, r6
 80020bc:	f7fe f888 	bl	80001d0 <memchr>
 80020c0:	b108      	cbz	r0, 80020c6 <_printf_i+0x1f2>
 80020c2:	1b80      	subs	r0, r0, r6
 80020c4:	6060      	str	r0, [r4, #4]
 80020c6:	6863      	ldr	r3, [r4, #4]
 80020c8:	6123      	str	r3, [r4, #16]
 80020ca:	2300      	movs	r3, #0
 80020cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020d0:	e7a8      	b.n	8002024 <_printf_i+0x150>
 80020d2:	6923      	ldr	r3, [r4, #16]
 80020d4:	4632      	mov	r2, r6
 80020d6:	4649      	mov	r1, r9
 80020d8:	4640      	mov	r0, r8
 80020da:	47d0      	blx	sl
 80020dc:	3001      	adds	r0, #1
 80020de:	d0ab      	beq.n	8002038 <_printf_i+0x164>
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	079b      	lsls	r3, r3, #30
 80020e4:	d413      	bmi.n	800210e <_printf_i+0x23a>
 80020e6:	68e0      	ldr	r0, [r4, #12]
 80020e8:	9b03      	ldr	r3, [sp, #12]
 80020ea:	4298      	cmp	r0, r3
 80020ec:	bfb8      	it	lt
 80020ee:	4618      	movlt	r0, r3
 80020f0:	e7a4      	b.n	800203c <_printf_i+0x168>
 80020f2:	2301      	movs	r3, #1
 80020f4:	4632      	mov	r2, r6
 80020f6:	4649      	mov	r1, r9
 80020f8:	4640      	mov	r0, r8
 80020fa:	47d0      	blx	sl
 80020fc:	3001      	adds	r0, #1
 80020fe:	d09b      	beq.n	8002038 <_printf_i+0x164>
 8002100:	3501      	adds	r5, #1
 8002102:	68e3      	ldr	r3, [r4, #12]
 8002104:	9903      	ldr	r1, [sp, #12]
 8002106:	1a5b      	subs	r3, r3, r1
 8002108:	42ab      	cmp	r3, r5
 800210a:	dcf2      	bgt.n	80020f2 <_printf_i+0x21e>
 800210c:	e7eb      	b.n	80020e6 <_printf_i+0x212>
 800210e:	2500      	movs	r5, #0
 8002110:	f104 0619 	add.w	r6, r4, #25
 8002114:	e7f5      	b.n	8002102 <_printf_i+0x22e>
 8002116:	bf00      	nop
 8002118:	08002549 	.word	0x08002549
 800211c:	0800255a 	.word	0x0800255a

08002120 <_sbrk_r>:
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	4d06      	ldr	r5, [pc, #24]	; (800213c <_sbrk_r+0x1c>)
 8002124:	2300      	movs	r3, #0
 8002126:	4604      	mov	r4, r0
 8002128:	4608      	mov	r0, r1
 800212a:	602b      	str	r3, [r5, #0]
 800212c:	f7ff f838 	bl	80011a0 <_sbrk>
 8002130:	1c43      	adds	r3, r0, #1
 8002132:	d102      	bne.n	800213a <_sbrk_r+0x1a>
 8002134:	682b      	ldr	r3, [r5, #0]
 8002136:	b103      	cbz	r3, 800213a <_sbrk_r+0x1a>
 8002138:	6023      	str	r3, [r4, #0]
 800213a:	bd38      	pop	{r3, r4, r5, pc}
 800213c:	200001c8 	.word	0x200001c8

08002140 <__sread>:
 8002140:	b510      	push	{r4, lr}
 8002142:	460c      	mov	r4, r1
 8002144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002148:	f000 f94e 	bl	80023e8 <_read_r>
 800214c:	2800      	cmp	r0, #0
 800214e:	bfab      	itete	ge
 8002150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002152:	89a3      	ldrhlt	r3, [r4, #12]
 8002154:	181b      	addge	r3, r3, r0
 8002156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800215a:	bfac      	ite	ge
 800215c:	6563      	strge	r3, [r4, #84]	; 0x54
 800215e:	81a3      	strhlt	r3, [r4, #12]
 8002160:	bd10      	pop	{r4, pc}

08002162 <__swrite>:
 8002162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002166:	461f      	mov	r7, r3
 8002168:	898b      	ldrh	r3, [r1, #12]
 800216a:	05db      	lsls	r3, r3, #23
 800216c:	4605      	mov	r5, r0
 800216e:	460c      	mov	r4, r1
 8002170:	4616      	mov	r6, r2
 8002172:	d505      	bpl.n	8002180 <__swrite+0x1e>
 8002174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002178:	2302      	movs	r3, #2
 800217a:	2200      	movs	r2, #0
 800217c:	f000 f916 	bl	80023ac <_lseek_r>
 8002180:	89a3      	ldrh	r3, [r4, #12]
 8002182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800218a:	81a3      	strh	r3, [r4, #12]
 800218c:	4632      	mov	r2, r6
 800218e:	463b      	mov	r3, r7
 8002190:	4628      	mov	r0, r5
 8002192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002196:	f7fe bb71 	b.w	800087c <_write_r>

0800219a <__sseek>:
 800219a:	b510      	push	{r4, lr}
 800219c:	460c      	mov	r4, r1
 800219e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a2:	f000 f903 	bl	80023ac <_lseek_r>
 80021a6:	1c43      	adds	r3, r0, #1
 80021a8:	89a3      	ldrh	r3, [r4, #12]
 80021aa:	bf15      	itete	ne
 80021ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80021ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021b6:	81a3      	strheq	r3, [r4, #12]
 80021b8:	bf18      	it	ne
 80021ba:	81a3      	strhne	r3, [r4, #12]
 80021bc:	bd10      	pop	{r4, pc}

080021be <__sclose>:
 80021be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021c2:	f000 b8c1 	b.w	8002348 <_close_r>
	...

080021c8 <__swbuf_r>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	460e      	mov	r6, r1
 80021cc:	4614      	mov	r4, r2
 80021ce:	4605      	mov	r5, r0
 80021d0:	b118      	cbz	r0, 80021da <__swbuf_r+0x12>
 80021d2:	6983      	ldr	r3, [r0, #24]
 80021d4:	b90b      	cbnz	r3, 80021da <__swbuf_r+0x12>
 80021d6:	f7ff faff 	bl	80017d8 <__sinit>
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <__swbuf_r+0x98>)
 80021dc:	429c      	cmp	r4, r3
 80021de:	d12b      	bne.n	8002238 <__swbuf_r+0x70>
 80021e0:	686c      	ldr	r4, [r5, #4]
 80021e2:	69a3      	ldr	r3, [r4, #24]
 80021e4:	60a3      	str	r3, [r4, #8]
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	071a      	lsls	r2, r3, #28
 80021ea:	d52f      	bpl.n	800224c <__swbuf_r+0x84>
 80021ec:	6923      	ldr	r3, [r4, #16]
 80021ee:	b36b      	cbz	r3, 800224c <__swbuf_r+0x84>
 80021f0:	6923      	ldr	r3, [r4, #16]
 80021f2:	6820      	ldr	r0, [r4, #0]
 80021f4:	1ac0      	subs	r0, r0, r3
 80021f6:	6963      	ldr	r3, [r4, #20]
 80021f8:	b2f6      	uxtb	r6, r6
 80021fa:	4283      	cmp	r3, r0
 80021fc:	4637      	mov	r7, r6
 80021fe:	dc04      	bgt.n	800220a <__swbuf_r+0x42>
 8002200:	4621      	mov	r1, r4
 8002202:	4628      	mov	r0, r5
 8002204:	f7ff fa54 	bl	80016b0 <_fflush_r>
 8002208:	bb30      	cbnz	r0, 8002258 <__swbuf_r+0x90>
 800220a:	68a3      	ldr	r3, [r4, #8]
 800220c:	3b01      	subs	r3, #1
 800220e:	60a3      	str	r3, [r4, #8]
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	6022      	str	r2, [r4, #0]
 8002216:	701e      	strb	r6, [r3, #0]
 8002218:	6963      	ldr	r3, [r4, #20]
 800221a:	3001      	adds	r0, #1
 800221c:	4283      	cmp	r3, r0
 800221e:	d004      	beq.n	800222a <__swbuf_r+0x62>
 8002220:	89a3      	ldrh	r3, [r4, #12]
 8002222:	07db      	lsls	r3, r3, #31
 8002224:	d506      	bpl.n	8002234 <__swbuf_r+0x6c>
 8002226:	2e0a      	cmp	r6, #10
 8002228:	d104      	bne.n	8002234 <__swbuf_r+0x6c>
 800222a:	4621      	mov	r1, r4
 800222c:	4628      	mov	r0, r5
 800222e:	f7ff fa3f 	bl	80016b0 <_fflush_r>
 8002232:	b988      	cbnz	r0, 8002258 <__swbuf_r+0x90>
 8002234:	4638      	mov	r0, r7
 8002236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <__swbuf_r+0x9c>)
 800223a:	429c      	cmp	r4, r3
 800223c:	d101      	bne.n	8002242 <__swbuf_r+0x7a>
 800223e:	68ac      	ldr	r4, [r5, #8]
 8002240:	e7cf      	b.n	80021e2 <__swbuf_r+0x1a>
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <__swbuf_r+0xa0>)
 8002244:	429c      	cmp	r4, r3
 8002246:	bf08      	it	eq
 8002248:	68ec      	ldreq	r4, [r5, #12]
 800224a:	e7ca      	b.n	80021e2 <__swbuf_r+0x1a>
 800224c:	4621      	mov	r1, r4
 800224e:	4628      	mov	r0, r5
 8002250:	f000 f80c 	bl	800226c <__swsetup_r>
 8002254:	2800      	cmp	r0, #0
 8002256:	d0cb      	beq.n	80021f0 <__swbuf_r+0x28>
 8002258:	f04f 37ff 	mov.w	r7, #4294967295
 800225c:	e7ea      	b.n	8002234 <__swbuf_r+0x6c>
 800225e:	bf00      	nop
 8002260:	080024f8 	.word	0x080024f8
 8002264:	08002518 	.word	0x08002518
 8002268:	080024d8 	.word	0x080024d8

0800226c <__swsetup_r>:
 800226c:	4b32      	ldr	r3, [pc, #200]	; (8002338 <__swsetup_r+0xcc>)
 800226e:	b570      	push	{r4, r5, r6, lr}
 8002270:	681d      	ldr	r5, [r3, #0]
 8002272:	4606      	mov	r6, r0
 8002274:	460c      	mov	r4, r1
 8002276:	b125      	cbz	r5, 8002282 <__swsetup_r+0x16>
 8002278:	69ab      	ldr	r3, [r5, #24]
 800227a:	b913      	cbnz	r3, 8002282 <__swsetup_r+0x16>
 800227c:	4628      	mov	r0, r5
 800227e:	f7ff faab 	bl	80017d8 <__sinit>
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <__swsetup_r+0xd0>)
 8002284:	429c      	cmp	r4, r3
 8002286:	d10f      	bne.n	80022a8 <__swsetup_r+0x3c>
 8002288:	686c      	ldr	r4, [r5, #4]
 800228a:	89a3      	ldrh	r3, [r4, #12]
 800228c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002290:	0719      	lsls	r1, r3, #28
 8002292:	d42c      	bmi.n	80022ee <__swsetup_r+0x82>
 8002294:	06dd      	lsls	r5, r3, #27
 8002296:	d411      	bmi.n	80022bc <__swsetup_r+0x50>
 8002298:	2309      	movs	r3, #9
 800229a:	6033      	str	r3, [r6, #0]
 800229c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022a0:	81a3      	strh	r3, [r4, #12]
 80022a2:	f04f 30ff 	mov.w	r0, #4294967295
 80022a6:	e03e      	b.n	8002326 <__swsetup_r+0xba>
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <__swsetup_r+0xd4>)
 80022aa:	429c      	cmp	r4, r3
 80022ac:	d101      	bne.n	80022b2 <__swsetup_r+0x46>
 80022ae:	68ac      	ldr	r4, [r5, #8]
 80022b0:	e7eb      	b.n	800228a <__swsetup_r+0x1e>
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <__swsetup_r+0xd8>)
 80022b4:	429c      	cmp	r4, r3
 80022b6:	bf08      	it	eq
 80022b8:	68ec      	ldreq	r4, [r5, #12]
 80022ba:	e7e6      	b.n	800228a <__swsetup_r+0x1e>
 80022bc:	0758      	lsls	r0, r3, #29
 80022be:	d512      	bpl.n	80022e6 <__swsetup_r+0x7a>
 80022c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022c2:	b141      	cbz	r1, 80022d6 <__swsetup_r+0x6a>
 80022c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022c8:	4299      	cmp	r1, r3
 80022ca:	d002      	beq.n	80022d2 <__swsetup_r+0x66>
 80022cc:	4630      	mov	r0, r6
 80022ce:	f7ff fb8f 	bl	80019f0 <_free_r>
 80022d2:	2300      	movs	r3, #0
 80022d4:	6363      	str	r3, [r4, #52]	; 0x34
 80022d6:	89a3      	ldrh	r3, [r4, #12]
 80022d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022dc:	81a3      	strh	r3, [r4, #12]
 80022de:	2300      	movs	r3, #0
 80022e0:	6063      	str	r3, [r4, #4]
 80022e2:	6923      	ldr	r3, [r4, #16]
 80022e4:	6023      	str	r3, [r4, #0]
 80022e6:	89a3      	ldrh	r3, [r4, #12]
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	81a3      	strh	r3, [r4, #12]
 80022ee:	6923      	ldr	r3, [r4, #16]
 80022f0:	b94b      	cbnz	r3, 8002306 <__swsetup_r+0x9a>
 80022f2:	89a3      	ldrh	r3, [r4, #12]
 80022f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80022f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022fc:	d003      	beq.n	8002306 <__swsetup_r+0x9a>
 80022fe:	4621      	mov	r1, r4
 8002300:	4630      	mov	r0, r6
 8002302:	f7ff fb2d 	bl	8001960 <__smakebuf_r>
 8002306:	89a0      	ldrh	r0, [r4, #12]
 8002308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800230c:	f010 0301 	ands.w	r3, r0, #1
 8002310:	d00a      	beq.n	8002328 <__swsetup_r+0xbc>
 8002312:	2300      	movs	r3, #0
 8002314:	60a3      	str	r3, [r4, #8]
 8002316:	6963      	ldr	r3, [r4, #20]
 8002318:	425b      	negs	r3, r3
 800231a:	61a3      	str	r3, [r4, #24]
 800231c:	6923      	ldr	r3, [r4, #16]
 800231e:	b943      	cbnz	r3, 8002332 <__swsetup_r+0xc6>
 8002320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002324:	d1ba      	bne.n	800229c <__swsetup_r+0x30>
 8002326:	bd70      	pop	{r4, r5, r6, pc}
 8002328:	0781      	lsls	r1, r0, #30
 800232a:	bf58      	it	pl
 800232c:	6963      	ldrpl	r3, [r4, #20]
 800232e:	60a3      	str	r3, [r4, #8]
 8002330:	e7f4      	b.n	800231c <__swsetup_r+0xb0>
 8002332:	2000      	movs	r0, #0
 8002334:	e7f7      	b.n	8002326 <__swsetup_r+0xba>
 8002336:	bf00      	nop
 8002338:	2000002c 	.word	0x2000002c
 800233c:	080024f8 	.word	0x080024f8
 8002340:	08002518 	.word	0x08002518
 8002344:	080024d8 	.word	0x080024d8

08002348 <_close_r>:
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4d06      	ldr	r5, [pc, #24]	; (8002364 <_close_r+0x1c>)
 800234c:	2300      	movs	r3, #0
 800234e:	4604      	mov	r4, r0
 8002350:	4608      	mov	r0, r1
 8002352:	602b      	str	r3, [r5, #0]
 8002354:	f7fe fef0 	bl	8001138 <_close>
 8002358:	1c43      	adds	r3, r0, #1
 800235a:	d102      	bne.n	8002362 <_close_r+0x1a>
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	b103      	cbz	r3, 8002362 <_close_r+0x1a>
 8002360:	6023      	str	r3, [r4, #0]
 8002362:	bd38      	pop	{r3, r4, r5, pc}
 8002364:	200001c8 	.word	0x200001c8

08002368 <_fstat_r>:
 8002368:	b538      	push	{r3, r4, r5, lr}
 800236a:	4d07      	ldr	r5, [pc, #28]	; (8002388 <_fstat_r+0x20>)
 800236c:	2300      	movs	r3, #0
 800236e:	4604      	mov	r4, r0
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	602b      	str	r3, [r5, #0]
 8002376:	f7fe feeb 	bl	8001150 <_fstat>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	d102      	bne.n	8002384 <_fstat_r+0x1c>
 800237e:	682b      	ldr	r3, [r5, #0]
 8002380:	b103      	cbz	r3, 8002384 <_fstat_r+0x1c>
 8002382:	6023      	str	r3, [r4, #0]
 8002384:	bd38      	pop	{r3, r4, r5, pc}
 8002386:	bf00      	nop
 8002388:	200001c8 	.word	0x200001c8

0800238c <_isatty_r>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4d06      	ldr	r5, [pc, #24]	; (80023a8 <_isatty_r+0x1c>)
 8002390:	2300      	movs	r3, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	602b      	str	r3, [r5, #0]
 8002398:	f7fe feea 	bl	8001170 <_isatty>
 800239c:	1c43      	adds	r3, r0, #1
 800239e:	d102      	bne.n	80023a6 <_isatty_r+0x1a>
 80023a0:	682b      	ldr	r3, [r5, #0]
 80023a2:	b103      	cbz	r3, 80023a6 <_isatty_r+0x1a>
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
 80023a8:	200001c8 	.word	0x200001c8

080023ac <_lseek_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4d07      	ldr	r5, [pc, #28]	; (80023cc <_lseek_r+0x20>)
 80023b0:	4604      	mov	r4, r0
 80023b2:	4608      	mov	r0, r1
 80023b4:	4611      	mov	r1, r2
 80023b6:	2200      	movs	r2, #0
 80023b8:	602a      	str	r2, [r5, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7fe fee3 	bl	8001186 <_lseek>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_lseek_r+0x1e>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_lseek_r+0x1e>
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	200001c8 	.word	0x200001c8

080023d0 <__malloc_lock>:
 80023d0:	4801      	ldr	r0, [pc, #4]	; (80023d8 <__malloc_lock+0x8>)
 80023d2:	f7ff ba9f 	b.w	8001914 <__retarget_lock_acquire_recursive>
 80023d6:	bf00      	nop
 80023d8:	200001c0 	.word	0x200001c0

080023dc <__malloc_unlock>:
 80023dc:	4801      	ldr	r0, [pc, #4]	; (80023e4 <__malloc_unlock+0x8>)
 80023de:	f7ff ba9a 	b.w	8001916 <__retarget_lock_release_recursive>
 80023e2:	bf00      	nop
 80023e4:	200001c0 	.word	0x200001c0

080023e8 <_read_r>:
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	4d07      	ldr	r5, [pc, #28]	; (8002408 <_read_r+0x20>)
 80023ec:	4604      	mov	r4, r0
 80023ee:	4608      	mov	r0, r1
 80023f0:	4611      	mov	r1, r2
 80023f2:	2200      	movs	r2, #0
 80023f4:	602a      	str	r2, [r5, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f7fe fe81 	bl	80010fe <_read>
 80023fc:	1c43      	adds	r3, r0, #1
 80023fe:	d102      	bne.n	8002406 <_read_r+0x1e>
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	b103      	cbz	r3, 8002406 <_read_r+0x1e>
 8002404:	6023      	str	r3, [r4, #0]
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	200001c8 	.word	0x200001c8

0800240c <_init>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr

08002418 <_fini>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	bf00      	nop
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr
