
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002248  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  080023d8  080023d8  000123d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002988  08002988  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002988  08002988  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002988  08002988  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000090  08002a20  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002a20  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066f5  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000120d  00000000  00000000  000267b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  000279c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004d0  00000000  00000000  00027f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032c9  00000000  00000000  00028408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004fe6  00000000  00000000  0002b6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a08c  00000000  00000000  000306b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008a743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed8  00000000  00000000  0008a798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080023c0 	.word	0x080023c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080023c0 	.word	0x080023c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000270:	b480      	push	{r7}
 8000272:	b08b      	sub	sp, #44	; 0x2c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000298:	4b91      	ldr	r3, [pc, #580]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	2b08      	cmp	r3, #8
 80002a6:	d011      	beq.n	80002cc <RCC_GetClocksFreq+0x5c>
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	2b08      	cmp	r3, #8
 80002ac:	d837      	bhi.n	800031e <RCC_GetClocksFreq+0xae>
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <RCC_GetClocksFreq+0x4c>
 80002b4:	6a3b      	ldr	r3, [r7, #32]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d004      	beq.n	80002c4 <RCC_GetClocksFreq+0x54>
 80002ba:	e030      	b.n	800031e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a89      	ldr	r2, [pc, #548]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c0:	601a      	str	r2, [r3, #0]
      break;
 80002c2:	e030      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a87      	ldr	r2, [pc, #540]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c8:	601a      	str	r2, [r3, #0]
      break;
 80002ca:	e02c      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002cc:	4b84      	ldr	r3, [pc, #528]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002d4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002d6:	4b82      	ldr	r3, [pc, #520]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	0c9b      	lsrs	r3, r3, #18
 80002e4:	3302      	adds	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4a7d      	ldr	r2, [pc, #500]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e00d      	b.n	8000316 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002fa:	4b79      	ldr	r3, [pc, #484]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000306:	4a77      	ldr	r2, [pc, #476]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fbb2 f2f3 	udiv	r2, r2, r3
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	fb02 f303 	mul.w	r3, r2, r3
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031a:	601a      	str	r2, [r3, #0]
      break;
 800031c:	e003      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a70      	ldr	r2, [pc, #448]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000322:	601a      	str	r2, [r3, #0]
      break;
 8000324:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000326:	4b6e      	ldr	r3, [pc, #440]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800032e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000336:	4a6d      	ldr	r2, [pc, #436]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	40da      	lsrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800034e:	4b64      	ldr	r3, [pc, #400]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000356:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000358:	6a3b      	ldr	r3, [r7, #32]
 800035a:	0a1b      	lsrs	r3, r3, #8
 800035c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800035e:	4a63      	ldr	r2, [pc, #396]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	40da      	lsrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000376:	4b5a      	ldr	r3, [pc, #360]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800037e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	0adb      	lsrs	r3, r3, #11
 8000384:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000386:	4a59      	ldr	r2, [pc, #356]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000388:	6a3b      	ldr	r3, [r7, #32]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	40da      	lsrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800039e:	4b50      	ldr	r3, [pc, #320]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003a8:	6a3b      	ldr	r3, [r7, #32]
 80003aa:	091b      	lsrs	r3, r3, #4
 80003ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ae:	4a50      	ldr	r2, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d006      	beq.n	80003d2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	e003      	b.n	80003da <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003da:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003de:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	0a5b      	lsrs	r3, r3, #9
 80003e8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ea:	4a41      	ldr	r2, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	fbb2 f2f3 	udiv	r2, r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	e003      	b.n	8000416 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000416:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	f003 0310 	and.w	r3, r3, #16
 800041e:	2b10      	cmp	r3, #16
 8000420:	d003      	beq.n	800042a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	e003      	b.n	8000432 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	2b20      	cmp	r3, #32
 800043c:	d003      	beq.n	8000446 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a28      	ldr	r2, [pc, #160]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000442:	61da      	str	r2, [r3, #28]
 8000444:	e003      	b.n	800044e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045a:	d10d      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000462:	429a      	cmp	r2, r3
 8000464:	d108      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	429a      	cmp	r2, r3
 800046c:	d104      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	005a      	lsls	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	e003      	b.n	8000480 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048c:	d10d      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000494:	429a      	cmp	r2, r3
 8000496:	d108      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	d104      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	005a      	lsls	r2, r3, #1
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
 80004a8:	e003      	b.n	80004b2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d104      	bne.n	80004c8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
 80004c6:	e029      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d10f      	bne.n	80004f4 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
 80004dc:	e01e      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	007a1200 	.word	0x007a1200
 80004e8:	003d0900 	.word	0x003d0900
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80004f4:	4b66      	ldr	r3, [pc, #408]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f003 0303 	and.w	r3, r3, #3
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d104      	bne.n	800050a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
 8000508:	e008      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800050a:	4b61      	ldr	r3, [pc, #388]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	2b03      	cmp	r3, #3
 8000514:	d102      	bne.n	800051c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a5e      	ldr	r2, [pc, #376]	; (8000694 <RCC_GetClocksFreq+0x424>)
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689a      	ldr	r2, [r3, #8]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000530:	e021      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000532:	4b57      	ldr	r3, [pc, #348]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800053a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053e:	d104      	bne.n	800054a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
 8000548:	e015      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800054a:	4b51      	ldr	r3, [pc, #324]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000556:	d104      	bne.n	8000562 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000560:	e009      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800056a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800056e:	d102      	bne.n	8000576 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a48      	ldr	r2, [pc, #288]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d104      	bne.n	800058c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
 800058a:	e021      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000598:	d104      	bne.n	80005a4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	631a      	str	r2, [r3, #48]	; 0x30
 80005a2:	e015      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005b0:	d104      	bne.n	80005bc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ba:	e009      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005c8:	d102      	bne.n	80005d0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a31      	ldr	r2, [pc, #196]	; (8000694 <RCC_GetClocksFreq+0x424>)
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
 80005e4:	e021      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80005f2:	d104      	bne.n	80005fe <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
 80005fc:	e015      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800060a:	d104      	bne.n	8000616 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
 8000614:	e009      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800061e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000622:	d102      	bne.n	800062a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d104      	bne.n	8000640 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800063e:	e021      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800064c:	d104      	bne.n	8000658 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000656:	e015      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000664:	d104      	bne.n	8000670 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800066e:	e009      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000678:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800067c:	d102      	bne.n	8000684 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000682:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000684:	bf00      	nop
 8000686:	372c      	adds	r7, #44	; 0x2c
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	007a1200 	.word	0x007a1200

08000698 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006ee:	2201      	movs	r2, #1
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d103      	bne.n	8000706 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e005      	b.n	8000712 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d102      	bne.n	8000712 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3308      	adds	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000724:	e006      	b.n	8000734 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43da      	mvns	r2, r3
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3724      	adds	r7, #36	; 0x24
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000772:	b480      	push	{r7}
 8000774:	b087      	sub	sp, #28
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b29b      	uxth	r3, r3
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800079c:	2201      	movs	r2, #1
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d105      	bne.n	80007b8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	4013      	ands	r3, r2
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e00d      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d105      	bne.n	80007ca <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4013      	ands	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e004      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4013      	ands	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007da:	2201      	movs	r2, #1
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <USART_GetITStatus+0x8e>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80007fa:	2301      	movs	r3, #1
 80007fc:	74fb      	strb	r3, [r7, #19]
 80007fe:	e001      	b.n	8000804 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000804:	7cfb      	ldrb	r3, [r7, #19]
}
 8000806:	4618      	mov	r0, r3
 8000808:	371c      	adds	r7, #28
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2201      	movs	r2, #1
 8000826:	fa02 f103 	lsl.w	r1, r2, r3
 800082a:	4a06      	ldr	r2, [pc, #24]	; (8000844 <NVIC_EnableIRQ+0x30>)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	095b      	lsrs	r3, r3, #5
 8000832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	b29b      	uxth	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <uart_put_char+0x30>)
 800085a:	f7ff ff1d 	bl	8000698 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800085e:	bf00      	nop
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <uart_put_char+0x30>)
 8000864:	f7ff ff6c 	bl	8000740 <USART_GetFlagStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f8      	beq.n	8000860 <uart_put_char+0x18>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40004400 	.word	0x40004400

0800087c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e012      	b.n	80008b6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b0a      	cmp	r3, #10
 800089a:	d102      	bne.n	80008a2 <_write_r+0x26>
            uart_put_char('\r');
 800089c:	200d      	movs	r0, #13
 800089e:	f7ff ffd3 	bl	8000848 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffcc 	bl	8000848 <uart_put_char>
    for (n = 0; n < len; n++) {
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	3301      	adds	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	dbe8      	blt.n	8000890 <_write_r+0x14>
    }

    return len;
 80008be:	683b      	ldr	r3, [r7, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80008cc:	4915      	ldr	r1, [pc, #84]	; (8000924 <USART2_IRQHandler+0x5c>)
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <USART2_IRQHandler+0x60>)
 80008d0:	f7ff ff4f 	bl	8000772 <USART_GetITStatus>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d021      	beq.n	800091e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <USART2_IRQHandler+0x60>)
 80008dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008de:	b299      	uxth	r1, r3
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <USART2_IRQHandler+0x64>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	b2d0      	uxtb	r0, r2
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <USART2_IRQHandler+0x64>)
 80008ec:	7010      	strb	r0, [r2, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	b2c9      	uxtb	r1, r1
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <USART2_IRQHandler+0x68>)
 80008f4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <USART2_IRQHandler+0x6c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d107      	bne.n	8000910 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <USART2_IRQHandler+0x70>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	3301      	adds	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <USART2_IRQHandler+0x70>)
 800090c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800090e:	e006      	b.n	800091e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <USART2_IRQHandler+0x6c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <USART2_IRQHandler+0x6c>)
 800091c:	701a      	strb	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	00050105 	.word	0x00050105
 8000928:	40004400 	.word	0x40004400
 800092c:	200001ac 	.word	0x200001ac
 8000930:	200000ac 	.word	0x200000ac
 8000934:	200001ae 	.word	0x200001ae
 8000938:	200001ad 	.word	0x200001ad

0800093c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000944:	4b86      	ldr	r3, [pc, #536]	; (8000b60 <uart_init+0x224>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fced 	bl	800132c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000952:	4b83      	ldr	r3, [pc, #524]	; (8000b60 <uart_init+0x224>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fce6 	bl	800132c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000960:	4b80      	ldr	r3, [pc, #512]	; (8000b64 <uart_init+0x228>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	4a7f      	ldr	r2, [pc, #508]	; (8000b64 <uart_init+0x228>)
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800096c:	4b7d      	ldr	r3, [pc, #500]	; (8000b64 <uart_init+0x228>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a7c      	ldr	r2, [pc, #496]	; (8000b64 <uart_init+0x228>)
 8000972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000976:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800097c:	6a1b      	ldr	r3, [r3, #32]
 800097e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000986:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000996:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80009a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80009a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ac:	6a1b      	ldr	r3, [r3, #32]
 80009ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009b2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80009b6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80009b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009c6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80009c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009d2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009d6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80009d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009dc:	889b      	ldrh	r3, [r3, #4]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e4:	f023 030c 	bic.w	r3, r3, #12
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80009ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f4:	8892      	ldrh	r2, [r2, #4]
 80009f6:	b292      	uxth	r2, r2
 80009f8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80009fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a08:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a14:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a18:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a28:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a34:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a38:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a3a:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <uart_init+0x22c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a4a      	ldr	r2, [pc, #296]	; (8000b68 <uart_init+0x22c>)
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000a46:	4b48      	ldr	r3, [pc, #288]	; (8000b68 <uart_init+0x22c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4a47      	ldr	r2, [pc, #284]	; (8000b68 <uart_init+0x22c>)
 8000a4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a50:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000a52:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <uart_init+0x22c>)
 8000a54:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <uart_init+0x22c>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <uart_init+0x22c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a42      	ldr	r2, [pc, #264]	; (8000b68 <uart_init+0x22c>)
 8000a60:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a64:	f023 030c 	bic.w	r3, r3, #12
 8000a68:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <uart_init+0x22c>)
 8000a6c:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <uart_init+0x22c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <uart_init+0x22c>)
 8000a74:	4a3c      	ldr	r2, [pc, #240]	; (8000b68 <uart_init+0x22c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <uart_init+0x22c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <uart_init+0x22c>)
 8000a80:	f043 030c 	orr.w	r3, r3, #12
 8000a84:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <uart_init+0x22c>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	4a37      	ldr	r2, [pc, #220]	; (8000b68 <uart_init+0x22c>)
 8000a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a90:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <uart_init+0x22c>)
 8000a94:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <uart_init+0x22c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fbe0 	bl	8000270 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <uart_init+0x22c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d010      	beq.n	8000ae2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ac2:	005a      	lsls	r2, r3, #1
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	fb01 f202 	mul.w	r2, r1, r2
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ae0:	e00d      	b.n	8000afe <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	fb01 f202 	mul.w	r2, r1, r2
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d302      	bcc.n	8000b0e <uart_init+0x1d2>
        divider++;
 8000b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <uart_init+0x22c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00b      	beq.n	8000b32 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b26:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <uart_init+0x22c>)
 8000b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b36:	b292      	uxth	r2, r2
 8000b38:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <uart_init+0x22c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <uart_init+0x22c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b46:	2201      	movs	r2, #1
 8000b48:	4908      	ldr	r1, [pc, #32]	; (8000b6c <uart_init+0x230>)
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <uart_init+0x22c>)
 8000b4c:	f7ff fdb6 	bl	80006bc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000b50:	2026      	movs	r0, #38	; 0x26
 8000b52:	f7ff fe5f 	bl	8000814 <NVIC_EnableIRQ>
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000002c 	.word	0x2000002c
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	00050105 	.word	0x00050105

08000b70 <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
}

void clrscr() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <clrscr+0x1c>)
 8000b76:	211b      	movs	r1, #27
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <clrscr+0x20>)
 8000b7a:	f000 fb33 	bl	80011e4 <iprintf>
	printf("%c[%s", ESC, "3J");
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <clrscr+0x24>)
 8000b80:	211b      	movs	r1, #27
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <clrscr+0x20>)
 8000b84:	f000 fb2e 	bl	80011e4 <iprintf>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08002404 	.word	0x08002404
 8000b90:	08002408 	.word	0x08002408
 8000b94:	08002410 	.word	0x08002410

08000b98 <printFix>:
		printf("%c", btt);
	}
	printf("%c\n", br);
}

void printFix(int32_t i) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
// Prints a signed 16.16 fixed point number
if ((i & 0x80000000) != 0) { // Handle negative numbers
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	da05      	bge.n	8000bb2 <printFix+0x1a>
printf("-");
 8000ba6:	202d      	movs	r0, #45	; 0x2d
 8000ba8:	f000 fb34 	bl	8001214 <putchar>
i = ~i + 1;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	425b      	negs	r3, r3
 8000bb0:	607b      	str	r3, [r7, #4]
}
printf("%ld.%04ld", i >> 16, 10000 * (uint32_t)(i & 0xFFFF) >> 16);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	1419      	asrs	r1, r3, #16
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bbe:	fb02 f303 	mul.w	r3, r2, r3
 8000bc2:	0c1b      	lsrs	r3, r3, #16
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <printFix+0x3c>)
 8000bc8:	f000 fb0c 	bl	80011e4 <iprintf>
// Print a maximum of 4 decimal digits to avoid overflow
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08002470 	.word	0x08002470

08000bd8 <expand>:

int32_t expand(int32_t i) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
// Converts an 18.14 fixed point number to 16.16
return i << 2;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	009b      	lsls	r3, r3, #2
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <sinus>:

int32_t sinus(int32_t i) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	//input int i out 16.16 tal/fixpoint
	if (i < 0) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da0c      	bge.n	8000c18 <sinus+0x28>
		return expand(-SIN[-i & 0x1FF]);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	425b      	negs	r3, r3
 8000c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <sinus+0x44>)
 8000c08:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ffe2 	bl	8000bd8 <expand>
 8000c14:	4603      	mov	r3, r0
 8000c16:	e009      	b.n	8000c2c <sinus+0x3c>
	}
	else {
		return expand(SIN[i & 0x1FF]);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <sinus+0x44>)
 8000c20:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ffd7 	bl	8000bd8 <expand>
 8000c2a:	4603      	mov	r3, r0
	}
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	080024f0 	.word	0x080024f0

08000c38 <cosinus>:

int32_t cosinus(int32_t i) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	i += 128;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3380      	adds	r3, #128	; 0x80
 8000c44:	607b      	str	r3, [r7, #4]
	//input int i out 16.16 tal/fixpoint
	if (i < 0) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	da0c      	bge.n	8000c66 <cosinus+0x2e>
		return expand(-SIN[-i & 0x1FF]);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	425b      	negs	r3, r3
 8000c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <cosinus+0x4c>)
 8000c56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c5a:	425b      	negs	r3, r3
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ffbb 	bl	8000bd8 <expand>
 8000c62:	4603      	mov	r3, r0
 8000c64:	e009      	b.n	8000c7a <cosinus+0x42>
	}
	else {
		return expand(SIN[i & 0x1FF]);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c6c:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <cosinus+0x4c>)
 8000c6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ffb0 	bl	8000bd8 <expand>
 8000c78:	4603      	mov	r3, r0
	}
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	080024f0 	.word	0x080024f0

08000c88 <printSin>:

int32_t printSin(int32_t x){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	printf("Sin(%d%c): ",x,248);
 8000c90:	22f8      	movs	r2, #248	; 0xf8
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <printSin+0x30>)
 8000c96:	f000 faa5 	bl	80011e4 <iprintf>
	printFix(sinus(x));
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa8 	bl	8000bf0 <sinus>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff78 	bl	8000b98 <printFix>
	printf("\n");
 8000ca8:	200a      	movs	r0, #10
 8000caa:	f000 fab3 	bl	8001214 <putchar>
 }
 8000cae:	bf00      	nop
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	0800247c 	.word	0x0800247c

08000cbc <printCos>:


int32_t printCos(int32_t x){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	printf("Cos(%d%c): ",x,248);
 8000cc4:	22f8      	movs	r2, #248	; 0xf8
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <printCos+0x34>)
 8000cca:	f000 fa8b 	bl	80011e4 <iprintf>
	printFix(sinus(x+128));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3380      	adds	r3, #128	; 0x80
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff8c 	bl	8000bf0 <sinus>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff5c 	bl	8000b98 <printFix>
	printf("\n");
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f000 fa97 	bl	8001214 <putchar>
 }
 8000ce6:	bf00      	nop
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08002488 	.word	0x08002488

08000cf4 <rotateVector>:
void initVector(vector_t* v){
	v -> x = 10;
	v -> y = 20;
}

void rotateVector(vector_t *vec, int32_t angle){
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	int32_t x = vec->x;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	60fb      	str	r3, [r7, #12]
	int32_t y = vec->y;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	60bb      	str	r3, [r7, #8]

	vec->x = x * cosinus(angle) - y * sinus(angle);
 8000d0a:	6838      	ldr	r0, [r7, #0]
 8000d0c:	f7ff ff94 	bl	8000c38 <cosinus>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	fb03 f402 	mul.w	r4, r3, r2
 8000d18:	6838      	ldr	r0, [r7, #0]
 8000d1a:	f7ff ff69 	bl	8000bf0 <sinus>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	fb03 f302 	mul.w	r3, r3, r2
 8000d26:	1ae2      	subs	r2, r4, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]
	vec->y = x * sinus(angle) + y * cosinus(angle);
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f7ff ff5f 	bl	8000bf0 <sinus>
 8000d32:	4602      	mov	r2, r0
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	fb03 f402 	mul.w	r4, r3, r2
 8000d3a:	6838      	ldr	r0, [r7, #0]
 8000d3c:	f7ff ff7c 	bl	8000c38 <cosinus>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	fb03 f302 	mul.w	r3, r3, r2
 8000d48:	18e2      	adds	r2, r4, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	605a      	str	r2, [r3, #4]

}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
	...

08000d58 <printVec>:

void printVec(vector_t v, int32_t angle){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d66:	607a      	str	r2, [r7, #4]
	//printf("Original: (%l, %l)\n",printFix(expand(v.x)),printFix(expand(v.y)));

	printf("Rotated Vector: (");
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <printVec+0x40>)
 8000d6a:	f000 fa3b 	bl	80011e4 <iprintf>
	printFix(v.x);
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff11 	bl	8000b98 <printFix>
	printf(",");
 8000d76:	202c      	movs	r0, #44	; 0x2c
 8000d78:	f000 fa4c 	bl	8001214 <putchar>
	printFix(v.y);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff0a 	bl	8000b98 <printFix>
	printf("),%d%c\n",angle,248);
 8000d84:	22f8      	movs	r2, #248	; 0xf8
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <printVec+0x44>)
 8000d8a:	f000 fa2b 	bl	80011e4 <iprintf>
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08002494 	.word	0x08002494
 8000d9c:	080024a8 	.word	0x080024a8

08000da0 <main>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "ansi.h"


int main(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0

	// Setup communication with the PC
	uart_init(9600);
 8000da6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000daa:	f7ff fdc7 	bl	800093c <uart_init>
	 window(0,0,10,2,"Hello Wolrd",1);
	 window(2,2,20,5,"Hello Wolrd2",2);
	 window(5,5,30,10,"Hello Wolrd3",1);
	 window(0,0,20,20,"Window Panel",2);
	 */
	clrscr();
 8000dae:	f7ff fedf 	bl	8000b70 <clrscr>
	printf("\n\n===========\n");
 8000db2:	484e      	ldr	r0, [pc, #312]	; (8000eec <main+0x14c>)
 8000db4:	f000 fab2 	bl	800131c <puts>

	printSin(0);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff ff65 	bl	8000c88 <printSin>

	//printSin(45);
	printSin(64); // 45
 8000dbe:	2040      	movs	r0, #64	; 0x40
 8000dc0:	f7ff ff62 	bl	8000c88 <printSin>

	//printSin(-78);
	printSin(-111);
 8000dc4:	f06f 006e 	mvn.w	r0, #110	; 0x6e
 8000dc8:	f7ff ff5e 	bl	8000c88 <printSin>


	//printSin(649);
	printSin(923);
 8000dcc:	f240 309b 	movw	r0, #923	; 0x39b
 8000dd0:	f7ff ff5a 	bl	8000c88 <printSin>

	printf("\n-------\n\n");
 8000dd4:	4846      	ldr	r0, [pc, #280]	; (8000ef0 <main+0x150>)
 8000dd6:	f000 faa1 	bl	800131c <puts>

	printCos(0);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff ff6e 	bl	8000cbc <printCos>

	//printCos(45);
	printCos(64);
 8000de0:	2040      	movs	r0, #64	; 0x40
 8000de2:	f7ff ff6b 	bl	8000cbc <printCos>

	//printCos(-78);
	printCos(-111);
 8000de6:	f06f 006e 	mvn.w	r0, #110	; 0x6e
 8000dea:	f7ff ff67 	bl	8000cbc <printCos>

	//printCos(649);
	printCos(923);
 8000dee:	f240 309b 	movw	r0, #923	; 0x39b
 8000df2:	f7ff ff63 	bl	8000cbc <printCos>

	printf("\n-------\n\n");
 8000df6:	483e      	ldr	r0, [pc, #248]	; (8000ef0 <main+0x150>)
 8000df8:	f000 fa90 	bl	800131c <puts>

	printf("%l\n",printFix(sinus(256)));
 8000dfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e00:	f7ff fef6 	bl	8000bf0 <sinus>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fec6 	bl	8000b98 <printFix>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4838      	ldr	r0, [pc, #224]	; (8000ef4 <main+0x154>)
 8000e12:	f000 f9e7 	bl	80011e4 <iprintf>
	printf("%l\n",printFix(cosinus(256)));
 8000e16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e1a:	f7ff ff0d 	bl	8000c38 <cosinus>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff feb9 	bl	8000b98 <printFix>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4832      	ldr	r0, [pc, #200]	; (8000ef4 <main+0x154>)
 8000e2c:	f000 f9da 	bl	80011e4 <iprintf>

	printf("\n-------\n\n");
 8000e30:	482f      	ldr	r0, [pc, #188]	; (8000ef0 <main+0x150>)
 8000e32:	f000 fa73 	bl	800131c <puts>

	vector_t v = {1, 2};
 8000e36:	4a30      	ldr	r2, [pc, #192]	; (8000ef8 <main+0x158>)
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e40:	e883 0003 	stmia.w	r3, {r0, r1}
	int32_t angle = 256;
 8000e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
	rotateVector(&v, angle);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff4f 	bl	8000cf4 <rotateVector>
	printVec(v, angle);
 8000e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e60:	f7ff ff7a 	bl	8000d58 <printVec>

	vector_t a = {6, 4};
 8000e64:	4a25      	ldr	r2, [pc, #148]	; (8000efc <main+0x15c>)
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e6e:	e883 0003 	stmia.w	r3, {r0, r1}
	angle = -14;
 8000e72:	f06f 030d 	mvn.w	r3, #13
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
	rotateVector(&a, angle);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff38 	bl	8000cf4 <rotateVector>
	printVec(a, angle);
 8000e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e8e:	f7ff ff63 	bl	8000d58 <printVec>

	vector_t b = {-4, -4};
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <main+0x160>)
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9c:	e883 0003 	stmia.w	r3, {r0, r1}
	angle = 1280;
 8000ea0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
	rotateVector(&b, angle);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff21 	bl	8000cf4 <rotateVector>
	printVec(b, angle);
 8000eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ebc:	f7ff ff4c 	bl	8000d58 <printVec>

	vector_t c = {-4, 2};
 8000ec0:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <main+0x164>)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec8:	e883 0003 	stmia.w	r3, {r0, r1}
	angle = -50;
 8000ecc:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
	rotateVector(&c, angle);
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff0c 	bl	8000cf4 <rotateVector>
	printVec(c, angle);
 8000edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ee4:	f7ff ff38 	bl	8000d58 <printVec>




	while (1) {
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x148>
 8000eea:	bf00      	nop
 8000eec:	080024b0 	.word	0x080024b0
 8000ef0:	080024c0 	.word	0x080024c0
 8000ef4:	080024cc 	.word	0x080024cc
 8000ef8:	080024d0 	.word	0x080024d0
 8000efc:	080024d8 	.word	0x080024d8
 8000f00:	080024e0 	.word	0x080024e0
 8000f04:	080024e8 	.word	0x080024e8

08000f08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
	}

return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	return -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_isatty>:

int _isatty(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	return 1;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x50>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x16>
		heap_end = &end;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <_sbrk+0x50>)
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <_sbrk+0x54>)
 8000fc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <_sbrk+0x50>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <_sbrk+0x50>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	466a      	mov	r2, sp
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d907      	bls.n	8000fe6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fd6:	f000 f8d3 	bl	8001180 <__errno>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	220c      	movs	r2, #12
 8000fde:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <_sbrk+0x50>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <_sbrk+0x50>)
 8000ff0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200001b0 	.word	0x200001b0
 8001000:	200001d0 	.word	0x200001d0

08001004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <SystemInit+0x84>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <SystemInit+0x84>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <SystemInit+0x88>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <SystemInit+0x88>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <SystemInit+0x88>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4918      	ldr	r1, [pc, #96]	; (800108c <SystemInit+0x88>)
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <SystemInit+0x8c>)
 800102c:	4013      	ands	r3, r2
 800102e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <SystemInit+0x88>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a15      	ldr	r2, [pc, #84]	; (800108c <SystemInit+0x88>)
 8001036:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800103a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <SystemInit+0x88>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <SystemInit+0x88>)
 8001046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <SystemInit+0x88>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <SystemInit+0x88>)
 8001052:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001056:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <SystemInit+0x88>)
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <SystemInit+0x88>)
 800105e:	f023 030f 	bic.w	r3, r3, #15
 8001062:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <SystemInit+0x88>)
 8001066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001068:	4908      	ldr	r1, [pc, #32]	; (800108c <SystemInit+0x88>)
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <SystemInit+0x90>)
 800106c:	4013      	ands	r3, r2
 800106e:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SystemInit+0x88>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001076:	f000 f80f 	bl	8001098 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <SystemInit+0x84>)
 800107c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001080:	609a      	str	r2, [r3, #8]
#endif  
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	40021000 	.word	0x40021000
 8001090:	f87fc00c 	.word	0xf87fc00c
 8001094:	ff00fccc 	.word	0xff00fccc

08001098 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <SetSysClock+0x8c>)
 800109e:	2212      	movs	r2, #18
 80010a0:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <SetSysClock+0x90>)
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <SetSysClock+0x90>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <SetSysClock+0x90>)
 80010ac:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <SetSysClock+0x90>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <SetSysClock+0x90>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <SetSysClock+0x90>)
 80010b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010bc:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <SetSysClock+0x90>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a19      	ldr	r2, [pc, #100]	; (8001128 <SetSysClock+0x90>)
 80010c4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80010c8:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <SetSysClock+0x90>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a16      	ldr	r2, [pc, #88]	; (8001128 <SetSysClock+0x90>)
 80010d0:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80010d4:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <SetSysClock+0x90>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <SetSysClock+0x90>)
 80010dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010e0:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80010e2:	bf00      	nop
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <SetSysClock+0x90>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f9      	beq.n	80010e4 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <SetSysClock+0x90>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <SetSysClock+0x90>)
 80010f6:	f023 0303 	bic.w	r3, r3, #3
 80010fa:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <SetSysClock+0x90>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <SetSysClock+0x90>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001108:	bf00      	nop
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <SetSysClock+0x90>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b08      	cmp	r3, #8
 8001114:	d1f9      	bne.n	800110a <SetSysClock+0x72>
  {
  }
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40022000 	.word	0x40022000
 8001128:	40021000 	.word	0x40021000

0800112c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800112e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <LoopForever+0x6>)
  ldr r1, =_edata
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <LoopForever+0xe>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001148:	4c0b      	ldr	r4, [pc, #44]	; (8001178 <LoopForever+0x16>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001156:	f7ff ff55 	bl	8001004 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800115a:	f000 f817 	bl	800118c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800115e:	f7ff fe1f 	bl	8000da0 <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   r0, =_estack
 8001164:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001170:	08002990 	.word	0x08002990
  ldr r2, =_sbss
 8001174:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001178:	200001cc 	.word	0x200001cc

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <__errno>:
 8001180:	4b01      	ldr	r3, [pc, #4]	; (8001188 <__errno+0x8>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000002c 	.word	0x2000002c

0800118c <__libc_init_array>:
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	4d0d      	ldr	r5, [pc, #52]	; (80011c4 <__libc_init_array+0x38>)
 8001190:	4c0d      	ldr	r4, [pc, #52]	; (80011c8 <__libc_init_array+0x3c>)
 8001192:	1b64      	subs	r4, r4, r5
 8001194:	10a4      	asrs	r4, r4, #2
 8001196:	2600      	movs	r6, #0
 8001198:	42a6      	cmp	r6, r4
 800119a:	d109      	bne.n	80011b0 <__libc_init_array+0x24>
 800119c:	4d0b      	ldr	r5, [pc, #44]	; (80011cc <__libc_init_array+0x40>)
 800119e:	4c0c      	ldr	r4, [pc, #48]	; (80011d0 <__libc_init_array+0x44>)
 80011a0:	f001 f90e 	bl	80023c0 <_init>
 80011a4:	1b64      	subs	r4, r4, r5
 80011a6:	10a4      	asrs	r4, r4, #2
 80011a8:	2600      	movs	r6, #0
 80011aa:	42a6      	cmp	r6, r4
 80011ac:	d105      	bne.n	80011ba <__libc_init_array+0x2e>
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
 80011b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b4:	4798      	blx	r3
 80011b6:	3601      	adds	r6, #1
 80011b8:	e7ee      	b.n	8001198 <__libc_init_array+0xc>
 80011ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80011be:	4798      	blx	r3
 80011c0:	3601      	adds	r6, #1
 80011c2:	e7f2      	b.n	80011aa <__libc_init_array+0x1e>
 80011c4:	08002988 	.word	0x08002988
 80011c8:	08002988 	.word	0x08002988
 80011cc:	08002988 	.word	0x08002988
 80011d0:	0800298c 	.word	0x0800298c

080011d4 <memset>:
 80011d4:	4402      	add	r2, r0
 80011d6:	4603      	mov	r3, r0
 80011d8:	4293      	cmp	r3, r2
 80011da:	d100      	bne.n	80011de <memset+0xa>
 80011dc:	4770      	bx	lr
 80011de:	f803 1b01 	strb.w	r1, [r3], #1
 80011e2:	e7f9      	b.n	80011d8 <memset+0x4>

080011e4 <iprintf>:
 80011e4:	b40f      	push	{r0, r1, r2, r3}
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <iprintf+0x2c>)
 80011e8:	b513      	push	{r0, r1, r4, lr}
 80011ea:	681c      	ldr	r4, [r3, #0]
 80011ec:	b124      	cbz	r4, 80011f8 <iprintf+0x14>
 80011ee:	69a3      	ldr	r3, [r4, #24]
 80011f0:	b913      	cbnz	r3, 80011f8 <iprintf+0x14>
 80011f2:	4620      	mov	r0, r4
 80011f4:	f000 fb42 	bl	800187c <__sinit>
 80011f8:	ab05      	add	r3, sp, #20
 80011fa:	9a04      	ldr	r2, [sp, #16]
 80011fc:	68a1      	ldr	r1, [r4, #8]
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	4620      	mov	r0, r4
 8001202:	f000 fd1b 	bl	8001c3c <_vfiprintf_r>
 8001206:	b002      	add	sp, #8
 8001208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800120c:	b004      	add	sp, #16
 800120e:	4770      	bx	lr
 8001210:	2000002c 	.word	0x2000002c

08001214 <putchar>:
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <putchar+0x28>)
 8001216:	b513      	push	{r0, r1, r4, lr}
 8001218:	681c      	ldr	r4, [r3, #0]
 800121a:	4601      	mov	r1, r0
 800121c:	b134      	cbz	r4, 800122c <putchar+0x18>
 800121e:	69a3      	ldr	r3, [r4, #24]
 8001220:	b923      	cbnz	r3, 800122c <putchar+0x18>
 8001222:	9001      	str	r0, [sp, #4]
 8001224:	4620      	mov	r0, r4
 8001226:	f000 fb29 	bl	800187c <__sinit>
 800122a:	9901      	ldr	r1, [sp, #4]
 800122c:	68a2      	ldr	r2, [r4, #8]
 800122e:	4620      	mov	r0, r4
 8001230:	b002      	add	sp, #8
 8001232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001236:	f000 bfc5 	b.w	80021c4 <_putc_r>
 800123a:	bf00      	nop
 800123c:	2000002c 	.word	0x2000002c

08001240 <_puts_r>:
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	460e      	mov	r6, r1
 8001244:	4605      	mov	r5, r0
 8001246:	b118      	cbz	r0, 8001250 <_puts_r+0x10>
 8001248:	6983      	ldr	r3, [r0, #24]
 800124a:	b90b      	cbnz	r3, 8001250 <_puts_r+0x10>
 800124c:	f000 fb16 	bl	800187c <__sinit>
 8001250:	69ab      	ldr	r3, [r5, #24]
 8001252:	68ac      	ldr	r4, [r5, #8]
 8001254:	b913      	cbnz	r3, 800125c <_puts_r+0x1c>
 8001256:	4628      	mov	r0, r5
 8001258:	f000 fb10 	bl	800187c <__sinit>
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <_puts_r+0xd0>)
 800125e:	429c      	cmp	r4, r3
 8001260:	d120      	bne.n	80012a4 <_puts_r+0x64>
 8001262:	686c      	ldr	r4, [r5, #4]
 8001264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001266:	07db      	lsls	r3, r3, #31
 8001268:	d405      	bmi.n	8001276 <_puts_r+0x36>
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	0598      	lsls	r0, r3, #22
 800126e:	d402      	bmi.n	8001276 <_puts_r+0x36>
 8001270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001272:	f000 fba1 	bl	80019b8 <__retarget_lock_acquire_recursive>
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	0719      	lsls	r1, r3, #28
 800127a:	d51d      	bpl.n	80012b8 <_puts_r+0x78>
 800127c:	6923      	ldr	r3, [r4, #16]
 800127e:	b1db      	cbz	r3, 80012b8 <_puts_r+0x78>
 8001280:	3e01      	subs	r6, #1
 8001282:	68a3      	ldr	r3, [r4, #8]
 8001284:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001288:	3b01      	subs	r3, #1
 800128a:	60a3      	str	r3, [r4, #8]
 800128c:	bb39      	cbnz	r1, 80012de <_puts_r+0x9e>
 800128e:	2b00      	cmp	r3, #0
 8001290:	da38      	bge.n	8001304 <_puts_r+0xc4>
 8001292:	4622      	mov	r2, r4
 8001294:	210a      	movs	r1, #10
 8001296:	4628      	mov	r0, r5
 8001298:	f000 f916 	bl	80014c8 <__swbuf_r>
 800129c:	3001      	adds	r0, #1
 800129e:	d011      	beq.n	80012c4 <_puts_r+0x84>
 80012a0:	250a      	movs	r5, #10
 80012a2:	e011      	b.n	80012c8 <_puts_r+0x88>
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <_puts_r+0xd4>)
 80012a6:	429c      	cmp	r4, r3
 80012a8:	d101      	bne.n	80012ae <_puts_r+0x6e>
 80012aa:	68ac      	ldr	r4, [r5, #8]
 80012ac:	e7da      	b.n	8001264 <_puts_r+0x24>
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <_puts_r+0xd8>)
 80012b0:	429c      	cmp	r4, r3
 80012b2:	bf08      	it	eq
 80012b4:	68ec      	ldreq	r4, [r5, #12]
 80012b6:	e7d5      	b.n	8001264 <_puts_r+0x24>
 80012b8:	4621      	mov	r1, r4
 80012ba:	4628      	mov	r0, r5
 80012bc:	f000 f956 	bl	800156c <__swsetup_r>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d0dd      	beq.n	8001280 <_puts_r+0x40>
 80012c4:	f04f 35ff 	mov.w	r5, #4294967295
 80012c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012ca:	07da      	lsls	r2, r3, #31
 80012cc:	d405      	bmi.n	80012da <_puts_r+0x9a>
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	059b      	lsls	r3, r3, #22
 80012d2:	d402      	bmi.n	80012da <_puts_r+0x9a>
 80012d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012d6:	f000 fb70 	bl	80019ba <__retarget_lock_release_recursive>
 80012da:	4628      	mov	r0, r5
 80012dc:	bd70      	pop	{r4, r5, r6, pc}
 80012de:	2b00      	cmp	r3, #0
 80012e0:	da04      	bge.n	80012ec <_puts_r+0xac>
 80012e2:	69a2      	ldr	r2, [r4, #24]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dc06      	bgt.n	80012f6 <_puts_r+0xb6>
 80012e8:	290a      	cmp	r1, #10
 80012ea:	d004      	beq.n	80012f6 <_puts_r+0xb6>
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	6022      	str	r2, [r4, #0]
 80012f2:	7019      	strb	r1, [r3, #0]
 80012f4:	e7c5      	b.n	8001282 <_puts_r+0x42>
 80012f6:	4622      	mov	r2, r4
 80012f8:	4628      	mov	r0, r5
 80012fa:	f000 f8e5 	bl	80014c8 <__swbuf_r>
 80012fe:	3001      	adds	r0, #1
 8001300:	d1bf      	bne.n	8001282 <_puts_r+0x42>
 8001302:	e7df      	b.n	80012c4 <_puts_r+0x84>
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	250a      	movs	r5, #10
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	6022      	str	r2, [r4, #0]
 800130c:	701d      	strb	r5, [r3, #0]
 800130e:	e7db      	b.n	80012c8 <_puts_r+0x88>
 8001310:	08002914 	.word	0x08002914
 8001314:	08002934 	.word	0x08002934
 8001318:	080028f4 	.word	0x080028f4

0800131c <puts>:
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <puts+0xc>)
 800131e:	4601      	mov	r1, r0
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	f7ff bf8d 	b.w	8001240 <_puts_r>
 8001326:	bf00      	nop
 8001328:	2000002c 	.word	0x2000002c

0800132c <setbuf>:
 800132c:	2900      	cmp	r1, #0
 800132e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001332:	bf0c      	ite	eq
 8001334:	2202      	moveq	r2, #2
 8001336:	2200      	movne	r2, #0
 8001338:	f000 b800 	b.w	800133c <setvbuf>

0800133c <setvbuf>:
 800133c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001340:	461d      	mov	r5, r3
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <setvbuf+0x17c>)
 8001344:	681f      	ldr	r7, [r3, #0]
 8001346:	4604      	mov	r4, r0
 8001348:	460e      	mov	r6, r1
 800134a:	4690      	mov	r8, r2
 800134c:	b127      	cbz	r7, 8001358 <setvbuf+0x1c>
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	b913      	cbnz	r3, 8001358 <setvbuf+0x1c>
 8001352:	4638      	mov	r0, r7
 8001354:	f000 fa92 	bl	800187c <__sinit>
 8001358:	4b58      	ldr	r3, [pc, #352]	; (80014bc <setvbuf+0x180>)
 800135a:	429c      	cmp	r4, r3
 800135c:	d167      	bne.n	800142e <setvbuf+0xf2>
 800135e:	687c      	ldr	r4, [r7, #4]
 8001360:	f1b8 0f02 	cmp.w	r8, #2
 8001364:	d006      	beq.n	8001374 <setvbuf+0x38>
 8001366:	f1b8 0f01 	cmp.w	r8, #1
 800136a:	f200 809f 	bhi.w	80014ac <setvbuf+0x170>
 800136e:	2d00      	cmp	r5, #0
 8001370:	f2c0 809c 	blt.w	80014ac <setvbuf+0x170>
 8001374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001376:	07db      	lsls	r3, r3, #31
 8001378:	d405      	bmi.n	8001386 <setvbuf+0x4a>
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	0598      	lsls	r0, r3, #22
 800137e:	d402      	bmi.n	8001386 <setvbuf+0x4a>
 8001380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001382:	f000 fb19 	bl	80019b8 <__retarget_lock_acquire_recursive>
 8001386:	4621      	mov	r1, r4
 8001388:	4638      	mov	r0, r7
 800138a:	f000 f9e3 	bl	8001754 <_fflush_r>
 800138e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001390:	b141      	cbz	r1, 80013a4 <setvbuf+0x68>
 8001392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001396:	4299      	cmp	r1, r3
 8001398:	d002      	beq.n	80013a0 <setvbuf+0x64>
 800139a:	4638      	mov	r0, r7
 800139c:	f000 fb7a 	bl	8001a94 <_free_r>
 80013a0:	2300      	movs	r3, #0
 80013a2:	6363      	str	r3, [r4, #52]	; 0x34
 80013a4:	2300      	movs	r3, #0
 80013a6:	61a3      	str	r3, [r4, #24]
 80013a8:	6063      	str	r3, [r4, #4]
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	0619      	lsls	r1, r3, #24
 80013ae:	d503      	bpl.n	80013b8 <setvbuf+0x7c>
 80013b0:	6921      	ldr	r1, [r4, #16]
 80013b2:	4638      	mov	r0, r7
 80013b4:	f000 fb6e 	bl	8001a94 <_free_r>
 80013b8:	89a3      	ldrh	r3, [r4, #12]
 80013ba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	f1b8 0f02 	cmp.w	r8, #2
 80013c6:	81a3      	strh	r3, [r4, #12]
 80013c8:	d06c      	beq.n	80014a4 <setvbuf+0x168>
 80013ca:	ab01      	add	r3, sp, #4
 80013cc:	466a      	mov	r2, sp
 80013ce:	4621      	mov	r1, r4
 80013d0:	4638      	mov	r0, r7
 80013d2:	f000 faf3 	bl	80019bc <__swhatbuf_r>
 80013d6:	89a3      	ldrh	r3, [r4, #12]
 80013d8:	4318      	orrs	r0, r3
 80013da:	81a0      	strh	r0, [r4, #12]
 80013dc:	2d00      	cmp	r5, #0
 80013de:	d130      	bne.n	8001442 <setvbuf+0x106>
 80013e0:	9d00      	ldr	r5, [sp, #0]
 80013e2:	4628      	mov	r0, r5
 80013e4:	f000 fb4e 	bl	8001a84 <malloc>
 80013e8:	4606      	mov	r6, r0
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d155      	bne.n	800149a <setvbuf+0x15e>
 80013ee:	f8dd 9000 	ldr.w	r9, [sp]
 80013f2:	45a9      	cmp	r9, r5
 80013f4:	d14a      	bne.n	800148c <setvbuf+0x150>
 80013f6:	f04f 35ff 	mov.w	r5, #4294967295
 80013fa:	2200      	movs	r2, #0
 80013fc:	60a2      	str	r2, [r4, #8]
 80013fe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001402:	6022      	str	r2, [r4, #0]
 8001404:	6122      	str	r2, [r4, #16]
 8001406:	2201      	movs	r2, #1
 8001408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800140c:	6162      	str	r2, [r4, #20]
 800140e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	07d2      	lsls	r2, r2, #31
 8001416:	81a3      	strh	r3, [r4, #12]
 8001418:	d405      	bmi.n	8001426 <setvbuf+0xea>
 800141a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800141e:	d102      	bne.n	8001426 <setvbuf+0xea>
 8001420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001422:	f000 faca 	bl	80019ba <__retarget_lock_release_recursive>
 8001426:	4628      	mov	r0, r5
 8001428:	b003      	add	sp, #12
 800142a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <setvbuf+0x184>)
 8001430:	429c      	cmp	r4, r3
 8001432:	d101      	bne.n	8001438 <setvbuf+0xfc>
 8001434:	68bc      	ldr	r4, [r7, #8]
 8001436:	e793      	b.n	8001360 <setvbuf+0x24>
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <setvbuf+0x188>)
 800143a:	429c      	cmp	r4, r3
 800143c:	bf08      	it	eq
 800143e:	68fc      	ldreq	r4, [r7, #12]
 8001440:	e78e      	b.n	8001360 <setvbuf+0x24>
 8001442:	2e00      	cmp	r6, #0
 8001444:	d0cd      	beq.n	80013e2 <setvbuf+0xa6>
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	b913      	cbnz	r3, 8001450 <setvbuf+0x114>
 800144a:	4638      	mov	r0, r7
 800144c:	f000 fa16 	bl	800187c <__sinit>
 8001450:	f1b8 0f01 	cmp.w	r8, #1
 8001454:	bf08      	it	eq
 8001456:	89a3      	ldrheq	r3, [r4, #12]
 8001458:	6026      	str	r6, [r4, #0]
 800145a:	bf04      	itt	eq
 800145c:	f043 0301 	orreq.w	r3, r3, #1
 8001460:	81a3      	strheq	r3, [r4, #12]
 8001462:	89a2      	ldrh	r2, [r4, #12]
 8001464:	f012 0308 	ands.w	r3, r2, #8
 8001468:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800146c:	d01c      	beq.n	80014a8 <setvbuf+0x16c>
 800146e:	07d3      	lsls	r3, r2, #31
 8001470:	bf41      	itttt	mi
 8001472:	2300      	movmi	r3, #0
 8001474:	426d      	negmi	r5, r5
 8001476:	60a3      	strmi	r3, [r4, #8]
 8001478:	61a5      	strmi	r5, [r4, #24]
 800147a:	bf58      	it	pl
 800147c:	60a5      	strpl	r5, [r4, #8]
 800147e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001480:	f015 0501 	ands.w	r5, r5, #1
 8001484:	d115      	bne.n	80014b2 <setvbuf+0x176>
 8001486:	f412 7f00 	tst.w	r2, #512	; 0x200
 800148a:	e7c8      	b.n	800141e <setvbuf+0xe2>
 800148c:	4648      	mov	r0, r9
 800148e:	f000 faf9 	bl	8001a84 <malloc>
 8001492:	4606      	mov	r6, r0
 8001494:	2800      	cmp	r0, #0
 8001496:	d0ae      	beq.n	80013f6 <setvbuf+0xba>
 8001498:	464d      	mov	r5, r9
 800149a:	89a3      	ldrh	r3, [r4, #12]
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	81a3      	strh	r3, [r4, #12]
 80014a2:	e7d0      	b.n	8001446 <setvbuf+0x10a>
 80014a4:	2500      	movs	r5, #0
 80014a6:	e7a8      	b.n	80013fa <setvbuf+0xbe>
 80014a8:	60a3      	str	r3, [r4, #8]
 80014aa:	e7e8      	b.n	800147e <setvbuf+0x142>
 80014ac:	f04f 35ff 	mov.w	r5, #4294967295
 80014b0:	e7b9      	b.n	8001426 <setvbuf+0xea>
 80014b2:	2500      	movs	r5, #0
 80014b4:	e7b7      	b.n	8001426 <setvbuf+0xea>
 80014b6:	bf00      	nop
 80014b8:	2000002c 	.word	0x2000002c
 80014bc:	08002914 	.word	0x08002914
 80014c0:	08002934 	.word	0x08002934
 80014c4:	080028f4 	.word	0x080028f4

080014c8 <__swbuf_r>:
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	460e      	mov	r6, r1
 80014cc:	4614      	mov	r4, r2
 80014ce:	4605      	mov	r5, r0
 80014d0:	b118      	cbz	r0, 80014da <__swbuf_r+0x12>
 80014d2:	6983      	ldr	r3, [r0, #24]
 80014d4:	b90b      	cbnz	r3, 80014da <__swbuf_r+0x12>
 80014d6:	f000 f9d1 	bl	800187c <__sinit>
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <__swbuf_r+0x98>)
 80014dc:	429c      	cmp	r4, r3
 80014de:	d12b      	bne.n	8001538 <__swbuf_r+0x70>
 80014e0:	686c      	ldr	r4, [r5, #4]
 80014e2:	69a3      	ldr	r3, [r4, #24]
 80014e4:	60a3      	str	r3, [r4, #8]
 80014e6:	89a3      	ldrh	r3, [r4, #12]
 80014e8:	071a      	lsls	r2, r3, #28
 80014ea:	d52f      	bpl.n	800154c <__swbuf_r+0x84>
 80014ec:	6923      	ldr	r3, [r4, #16]
 80014ee:	b36b      	cbz	r3, 800154c <__swbuf_r+0x84>
 80014f0:	6923      	ldr	r3, [r4, #16]
 80014f2:	6820      	ldr	r0, [r4, #0]
 80014f4:	1ac0      	subs	r0, r0, r3
 80014f6:	6963      	ldr	r3, [r4, #20]
 80014f8:	b2f6      	uxtb	r6, r6
 80014fa:	4283      	cmp	r3, r0
 80014fc:	4637      	mov	r7, r6
 80014fe:	dc04      	bgt.n	800150a <__swbuf_r+0x42>
 8001500:	4621      	mov	r1, r4
 8001502:	4628      	mov	r0, r5
 8001504:	f000 f926 	bl	8001754 <_fflush_r>
 8001508:	bb30      	cbnz	r0, 8001558 <__swbuf_r+0x90>
 800150a:	68a3      	ldr	r3, [r4, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60a3      	str	r3, [r4, #8]
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	6022      	str	r2, [r4, #0]
 8001516:	701e      	strb	r6, [r3, #0]
 8001518:	6963      	ldr	r3, [r4, #20]
 800151a:	3001      	adds	r0, #1
 800151c:	4283      	cmp	r3, r0
 800151e:	d004      	beq.n	800152a <__swbuf_r+0x62>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	07db      	lsls	r3, r3, #31
 8001524:	d506      	bpl.n	8001534 <__swbuf_r+0x6c>
 8001526:	2e0a      	cmp	r6, #10
 8001528:	d104      	bne.n	8001534 <__swbuf_r+0x6c>
 800152a:	4621      	mov	r1, r4
 800152c:	4628      	mov	r0, r5
 800152e:	f000 f911 	bl	8001754 <_fflush_r>
 8001532:	b988      	cbnz	r0, 8001558 <__swbuf_r+0x90>
 8001534:	4638      	mov	r0, r7
 8001536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <__swbuf_r+0x9c>)
 800153a:	429c      	cmp	r4, r3
 800153c:	d101      	bne.n	8001542 <__swbuf_r+0x7a>
 800153e:	68ac      	ldr	r4, [r5, #8]
 8001540:	e7cf      	b.n	80014e2 <__swbuf_r+0x1a>
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <__swbuf_r+0xa0>)
 8001544:	429c      	cmp	r4, r3
 8001546:	bf08      	it	eq
 8001548:	68ec      	ldreq	r4, [r5, #12]
 800154a:	e7ca      	b.n	80014e2 <__swbuf_r+0x1a>
 800154c:	4621      	mov	r1, r4
 800154e:	4628      	mov	r0, r5
 8001550:	f000 f80c 	bl	800156c <__swsetup_r>
 8001554:	2800      	cmp	r0, #0
 8001556:	d0cb      	beq.n	80014f0 <__swbuf_r+0x28>
 8001558:	f04f 37ff 	mov.w	r7, #4294967295
 800155c:	e7ea      	b.n	8001534 <__swbuf_r+0x6c>
 800155e:	bf00      	nop
 8001560:	08002914 	.word	0x08002914
 8001564:	08002934 	.word	0x08002934
 8001568:	080028f4 	.word	0x080028f4

0800156c <__swsetup_r>:
 800156c:	4b32      	ldr	r3, [pc, #200]	; (8001638 <__swsetup_r+0xcc>)
 800156e:	b570      	push	{r4, r5, r6, lr}
 8001570:	681d      	ldr	r5, [r3, #0]
 8001572:	4606      	mov	r6, r0
 8001574:	460c      	mov	r4, r1
 8001576:	b125      	cbz	r5, 8001582 <__swsetup_r+0x16>
 8001578:	69ab      	ldr	r3, [r5, #24]
 800157a:	b913      	cbnz	r3, 8001582 <__swsetup_r+0x16>
 800157c:	4628      	mov	r0, r5
 800157e:	f000 f97d 	bl	800187c <__sinit>
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <__swsetup_r+0xd0>)
 8001584:	429c      	cmp	r4, r3
 8001586:	d10f      	bne.n	80015a8 <__swsetup_r+0x3c>
 8001588:	686c      	ldr	r4, [r5, #4]
 800158a:	89a3      	ldrh	r3, [r4, #12]
 800158c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001590:	0719      	lsls	r1, r3, #28
 8001592:	d42c      	bmi.n	80015ee <__swsetup_r+0x82>
 8001594:	06dd      	lsls	r5, r3, #27
 8001596:	d411      	bmi.n	80015bc <__swsetup_r+0x50>
 8001598:	2309      	movs	r3, #9
 800159a:	6033      	str	r3, [r6, #0]
 800159c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80015a0:	81a3      	strh	r3, [r4, #12]
 80015a2:	f04f 30ff 	mov.w	r0, #4294967295
 80015a6:	e03e      	b.n	8001626 <__swsetup_r+0xba>
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <__swsetup_r+0xd4>)
 80015aa:	429c      	cmp	r4, r3
 80015ac:	d101      	bne.n	80015b2 <__swsetup_r+0x46>
 80015ae:	68ac      	ldr	r4, [r5, #8]
 80015b0:	e7eb      	b.n	800158a <__swsetup_r+0x1e>
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <__swsetup_r+0xd8>)
 80015b4:	429c      	cmp	r4, r3
 80015b6:	bf08      	it	eq
 80015b8:	68ec      	ldreq	r4, [r5, #12]
 80015ba:	e7e6      	b.n	800158a <__swsetup_r+0x1e>
 80015bc:	0758      	lsls	r0, r3, #29
 80015be:	d512      	bpl.n	80015e6 <__swsetup_r+0x7a>
 80015c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015c2:	b141      	cbz	r1, 80015d6 <__swsetup_r+0x6a>
 80015c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015c8:	4299      	cmp	r1, r3
 80015ca:	d002      	beq.n	80015d2 <__swsetup_r+0x66>
 80015cc:	4630      	mov	r0, r6
 80015ce:	f000 fa61 	bl	8001a94 <_free_r>
 80015d2:	2300      	movs	r3, #0
 80015d4:	6363      	str	r3, [r4, #52]	; 0x34
 80015d6:	89a3      	ldrh	r3, [r4, #12]
 80015d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80015dc:	81a3      	strh	r3, [r4, #12]
 80015de:	2300      	movs	r3, #0
 80015e0:	6063      	str	r3, [r4, #4]
 80015e2:	6923      	ldr	r3, [r4, #16]
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	89a3      	ldrh	r3, [r4, #12]
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	81a3      	strh	r3, [r4, #12]
 80015ee:	6923      	ldr	r3, [r4, #16]
 80015f0:	b94b      	cbnz	r3, 8001606 <__swsetup_r+0x9a>
 80015f2:	89a3      	ldrh	r3, [r4, #12]
 80015f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015fc:	d003      	beq.n	8001606 <__swsetup_r+0x9a>
 80015fe:	4621      	mov	r1, r4
 8001600:	4630      	mov	r0, r6
 8001602:	f000 f9ff 	bl	8001a04 <__smakebuf_r>
 8001606:	89a0      	ldrh	r0, [r4, #12]
 8001608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800160c:	f010 0301 	ands.w	r3, r0, #1
 8001610:	d00a      	beq.n	8001628 <__swsetup_r+0xbc>
 8001612:	2300      	movs	r3, #0
 8001614:	60a3      	str	r3, [r4, #8]
 8001616:	6963      	ldr	r3, [r4, #20]
 8001618:	425b      	negs	r3, r3
 800161a:	61a3      	str	r3, [r4, #24]
 800161c:	6923      	ldr	r3, [r4, #16]
 800161e:	b943      	cbnz	r3, 8001632 <__swsetup_r+0xc6>
 8001620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001624:	d1ba      	bne.n	800159c <__swsetup_r+0x30>
 8001626:	bd70      	pop	{r4, r5, r6, pc}
 8001628:	0781      	lsls	r1, r0, #30
 800162a:	bf58      	it	pl
 800162c:	6963      	ldrpl	r3, [r4, #20]
 800162e:	60a3      	str	r3, [r4, #8]
 8001630:	e7f4      	b.n	800161c <__swsetup_r+0xb0>
 8001632:	2000      	movs	r0, #0
 8001634:	e7f7      	b.n	8001626 <__swsetup_r+0xba>
 8001636:	bf00      	nop
 8001638:	2000002c 	.word	0x2000002c
 800163c:	08002914 	.word	0x08002914
 8001640:	08002934 	.word	0x08002934
 8001644:	080028f4 	.word	0x080028f4

08001648 <__sflush_r>:
 8001648:	898a      	ldrh	r2, [r1, #12]
 800164a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800164e:	4605      	mov	r5, r0
 8001650:	0710      	lsls	r0, r2, #28
 8001652:	460c      	mov	r4, r1
 8001654:	d458      	bmi.n	8001708 <__sflush_r+0xc0>
 8001656:	684b      	ldr	r3, [r1, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dc05      	bgt.n	8001668 <__sflush_r+0x20>
 800165c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	dc02      	bgt.n	8001668 <__sflush_r+0x20>
 8001662:	2000      	movs	r0, #0
 8001664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800166a:	2e00      	cmp	r6, #0
 800166c:	d0f9      	beq.n	8001662 <__sflush_r+0x1a>
 800166e:	2300      	movs	r3, #0
 8001670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001674:	682f      	ldr	r7, [r5, #0]
 8001676:	602b      	str	r3, [r5, #0]
 8001678:	d032      	beq.n	80016e0 <__sflush_r+0x98>
 800167a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	075a      	lsls	r2, r3, #29
 8001680:	d505      	bpl.n	800168e <__sflush_r+0x46>
 8001682:	6863      	ldr	r3, [r4, #4]
 8001684:	1ac0      	subs	r0, r0, r3
 8001686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001688:	b10b      	cbz	r3, 800168e <__sflush_r+0x46>
 800168a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800168c:	1ac0      	subs	r0, r0, r3
 800168e:	2300      	movs	r3, #0
 8001690:	4602      	mov	r2, r0
 8001692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001694:	6a21      	ldr	r1, [r4, #32]
 8001696:	4628      	mov	r0, r5
 8001698:	47b0      	blx	r6
 800169a:	1c43      	adds	r3, r0, #1
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	d106      	bne.n	80016ae <__sflush_r+0x66>
 80016a0:	6829      	ldr	r1, [r5, #0]
 80016a2:	291d      	cmp	r1, #29
 80016a4:	d82c      	bhi.n	8001700 <__sflush_r+0xb8>
 80016a6:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <__sflush_r+0x108>)
 80016a8:	40ca      	lsrs	r2, r1
 80016aa:	07d6      	lsls	r6, r2, #31
 80016ac:	d528      	bpl.n	8001700 <__sflush_r+0xb8>
 80016ae:	2200      	movs	r2, #0
 80016b0:	6062      	str	r2, [r4, #4]
 80016b2:	04d9      	lsls	r1, r3, #19
 80016b4:	6922      	ldr	r2, [r4, #16]
 80016b6:	6022      	str	r2, [r4, #0]
 80016b8:	d504      	bpl.n	80016c4 <__sflush_r+0x7c>
 80016ba:	1c42      	adds	r2, r0, #1
 80016bc:	d101      	bne.n	80016c2 <__sflush_r+0x7a>
 80016be:	682b      	ldr	r3, [r5, #0]
 80016c0:	b903      	cbnz	r3, 80016c4 <__sflush_r+0x7c>
 80016c2:	6560      	str	r0, [r4, #84]	; 0x54
 80016c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016c6:	602f      	str	r7, [r5, #0]
 80016c8:	2900      	cmp	r1, #0
 80016ca:	d0ca      	beq.n	8001662 <__sflush_r+0x1a>
 80016cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016d0:	4299      	cmp	r1, r3
 80016d2:	d002      	beq.n	80016da <__sflush_r+0x92>
 80016d4:	4628      	mov	r0, r5
 80016d6:	f000 f9dd 	bl	8001a94 <_free_r>
 80016da:	2000      	movs	r0, #0
 80016dc:	6360      	str	r0, [r4, #52]	; 0x34
 80016de:	e7c1      	b.n	8001664 <__sflush_r+0x1c>
 80016e0:	6a21      	ldr	r1, [r4, #32]
 80016e2:	2301      	movs	r3, #1
 80016e4:	4628      	mov	r0, r5
 80016e6:	47b0      	blx	r6
 80016e8:	1c41      	adds	r1, r0, #1
 80016ea:	d1c7      	bne.n	800167c <__sflush_r+0x34>
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0c4      	beq.n	800167c <__sflush_r+0x34>
 80016f2:	2b1d      	cmp	r3, #29
 80016f4:	d001      	beq.n	80016fa <__sflush_r+0xb2>
 80016f6:	2b16      	cmp	r3, #22
 80016f8:	d101      	bne.n	80016fe <__sflush_r+0xb6>
 80016fa:	602f      	str	r7, [r5, #0]
 80016fc:	e7b1      	b.n	8001662 <__sflush_r+0x1a>
 80016fe:	89a3      	ldrh	r3, [r4, #12]
 8001700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001704:	81a3      	strh	r3, [r4, #12]
 8001706:	e7ad      	b.n	8001664 <__sflush_r+0x1c>
 8001708:	690f      	ldr	r7, [r1, #16]
 800170a:	2f00      	cmp	r7, #0
 800170c:	d0a9      	beq.n	8001662 <__sflush_r+0x1a>
 800170e:	0793      	lsls	r3, r2, #30
 8001710:	680e      	ldr	r6, [r1, #0]
 8001712:	bf08      	it	eq
 8001714:	694b      	ldreq	r3, [r1, #20]
 8001716:	600f      	str	r7, [r1, #0]
 8001718:	bf18      	it	ne
 800171a:	2300      	movne	r3, #0
 800171c:	eba6 0807 	sub.w	r8, r6, r7
 8001720:	608b      	str	r3, [r1, #8]
 8001722:	f1b8 0f00 	cmp.w	r8, #0
 8001726:	dd9c      	ble.n	8001662 <__sflush_r+0x1a>
 8001728:	6a21      	ldr	r1, [r4, #32]
 800172a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800172c:	4643      	mov	r3, r8
 800172e:	463a      	mov	r2, r7
 8001730:	4628      	mov	r0, r5
 8001732:	47b0      	blx	r6
 8001734:	2800      	cmp	r0, #0
 8001736:	dc06      	bgt.n	8001746 <__sflush_r+0xfe>
 8001738:	89a3      	ldrh	r3, [r4, #12]
 800173a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173e:	81a3      	strh	r3, [r4, #12]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	e78e      	b.n	8001664 <__sflush_r+0x1c>
 8001746:	4407      	add	r7, r0
 8001748:	eba8 0800 	sub.w	r8, r8, r0
 800174c:	e7e9      	b.n	8001722 <__sflush_r+0xda>
 800174e:	bf00      	nop
 8001750:	20400001 	.word	0x20400001

08001754 <_fflush_r>:
 8001754:	b538      	push	{r3, r4, r5, lr}
 8001756:	690b      	ldr	r3, [r1, #16]
 8001758:	4605      	mov	r5, r0
 800175a:	460c      	mov	r4, r1
 800175c:	b913      	cbnz	r3, 8001764 <_fflush_r+0x10>
 800175e:	2500      	movs	r5, #0
 8001760:	4628      	mov	r0, r5
 8001762:	bd38      	pop	{r3, r4, r5, pc}
 8001764:	b118      	cbz	r0, 800176e <_fflush_r+0x1a>
 8001766:	6983      	ldr	r3, [r0, #24]
 8001768:	b90b      	cbnz	r3, 800176e <_fflush_r+0x1a>
 800176a:	f000 f887 	bl	800187c <__sinit>
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <_fflush_r+0x6c>)
 8001770:	429c      	cmp	r4, r3
 8001772:	d11b      	bne.n	80017ac <_fflush_r+0x58>
 8001774:	686c      	ldr	r4, [r5, #4]
 8001776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ef      	beq.n	800175e <_fflush_r+0xa>
 800177e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001780:	07d0      	lsls	r0, r2, #31
 8001782:	d404      	bmi.n	800178e <_fflush_r+0x3a>
 8001784:	0599      	lsls	r1, r3, #22
 8001786:	d402      	bmi.n	800178e <_fflush_r+0x3a>
 8001788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800178a:	f000 f915 	bl	80019b8 <__retarget_lock_acquire_recursive>
 800178e:	4628      	mov	r0, r5
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff ff59 	bl	8001648 <__sflush_r>
 8001796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001798:	07da      	lsls	r2, r3, #31
 800179a:	4605      	mov	r5, r0
 800179c:	d4e0      	bmi.n	8001760 <_fflush_r+0xc>
 800179e:	89a3      	ldrh	r3, [r4, #12]
 80017a0:	059b      	lsls	r3, r3, #22
 80017a2:	d4dd      	bmi.n	8001760 <_fflush_r+0xc>
 80017a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017a6:	f000 f908 	bl	80019ba <__retarget_lock_release_recursive>
 80017aa:	e7d9      	b.n	8001760 <_fflush_r+0xc>
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <_fflush_r+0x70>)
 80017ae:	429c      	cmp	r4, r3
 80017b0:	d101      	bne.n	80017b6 <_fflush_r+0x62>
 80017b2:	68ac      	ldr	r4, [r5, #8]
 80017b4:	e7df      	b.n	8001776 <_fflush_r+0x22>
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <_fflush_r+0x74>)
 80017b8:	429c      	cmp	r4, r3
 80017ba:	bf08      	it	eq
 80017bc:	68ec      	ldreq	r4, [r5, #12]
 80017be:	e7da      	b.n	8001776 <_fflush_r+0x22>
 80017c0:	08002914 	.word	0x08002914
 80017c4:	08002934 	.word	0x08002934
 80017c8:	080028f4 	.word	0x080028f4

080017cc <std>:
 80017cc:	2300      	movs	r3, #0
 80017ce:	b510      	push	{r4, lr}
 80017d0:	4604      	mov	r4, r0
 80017d2:	e9c0 3300 	strd	r3, r3, [r0]
 80017d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017da:	6083      	str	r3, [r0, #8]
 80017dc:	8181      	strh	r1, [r0, #12]
 80017de:	6643      	str	r3, [r0, #100]	; 0x64
 80017e0:	81c2      	strh	r2, [r0, #14]
 80017e2:	6183      	str	r3, [r0, #24]
 80017e4:	4619      	mov	r1, r3
 80017e6:	2208      	movs	r2, #8
 80017e8:	305c      	adds	r0, #92	; 0x5c
 80017ea:	f7ff fcf3 	bl	80011d4 <memset>
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <std+0x38>)
 80017f0:	6263      	str	r3, [r4, #36]	; 0x24
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <std+0x3c>)
 80017f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <std+0x40>)
 80017f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <std+0x44>)
 80017fc:	6224      	str	r4, [r4, #32]
 80017fe:	6323      	str	r3, [r4, #48]	; 0x30
 8001800:	bd10      	pop	{r4, pc}
 8001802:	bf00      	nop
 8001804:	08002275 	.word	0x08002275
 8001808:	08002297 	.word	0x08002297
 800180c:	080022cf 	.word	0x080022cf
 8001810:	080022f3 	.word	0x080022f3

08001814 <_cleanup_r>:
 8001814:	4901      	ldr	r1, [pc, #4]	; (800181c <_cleanup_r+0x8>)
 8001816:	f000 b8af 	b.w	8001978 <_fwalk_reent>
 800181a:	bf00      	nop
 800181c:	08001755 	.word	0x08001755

08001820 <__sfmoreglue>:
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	1e4a      	subs	r2, r1, #1
 8001824:	2568      	movs	r5, #104	; 0x68
 8001826:	4355      	muls	r5, r2
 8001828:	460e      	mov	r6, r1
 800182a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800182e:	f000 f981 	bl	8001b34 <_malloc_r>
 8001832:	4604      	mov	r4, r0
 8001834:	b140      	cbz	r0, 8001848 <__sfmoreglue+0x28>
 8001836:	2100      	movs	r1, #0
 8001838:	e9c0 1600 	strd	r1, r6, [r0]
 800183c:	300c      	adds	r0, #12
 800183e:	60a0      	str	r0, [r4, #8]
 8001840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001844:	f7ff fcc6 	bl	80011d4 <memset>
 8001848:	4620      	mov	r0, r4
 800184a:	bd70      	pop	{r4, r5, r6, pc}

0800184c <__sfp_lock_acquire>:
 800184c:	4801      	ldr	r0, [pc, #4]	; (8001854 <__sfp_lock_acquire+0x8>)
 800184e:	f000 b8b3 	b.w	80019b8 <__retarget_lock_acquire_recursive>
 8001852:	bf00      	nop
 8001854:	200001c4 	.word	0x200001c4

08001858 <__sfp_lock_release>:
 8001858:	4801      	ldr	r0, [pc, #4]	; (8001860 <__sfp_lock_release+0x8>)
 800185a:	f000 b8ae 	b.w	80019ba <__retarget_lock_release_recursive>
 800185e:	bf00      	nop
 8001860:	200001c4 	.word	0x200001c4

08001864 <__sinit_lock_acquire>:
 8001864:	4801      	ldr	r0, [pc, #4]	; (800186c <__sinit_lock_acquire+0x8>)
 8001866:	f000 b8a7 	b.w	80019b8 <__retarget_lock_acquire_recursive>
 800186a:	bf00      	nop
 800186c:	200001bf 	.word	0x200001bf

08001870 <__sinit_lock_release>:
 8001870:	4801      	ldr	r0, [pc, #4]	; (8001878 <__sinit_lock_release+0x8>)
 8001872:	f000 b8a2 	b.w	80019ba <__retarget_lock_release_recursive>
 8001876:	bf00      	nop
 8001878:	200001bf 	.word	0x200001bf

0800187c <__sinit>:
 800187c:	b510      	push	{r4, lr}
 800187e:	4604      	mov	r4, r0
 8001880:	f7ff fff0 	bl	8001864 <__sinit_lock_acquire>
 8001884:	69a3      	ldr	r3, [r4, #24]
 8001886:	b11b      	cbz	r3, 8001890 <__sinit+0x14>
 8001888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800188c:	f7ff bff0 	b.w	8001870 <__sinit_lock_release>
 8001890:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001894:	6523      	str	r3, [r4, #80]	; 0x50
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <__sinit+0x68>)
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <__sinit+0x6c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	62a2      	str	r2, [r4, #40]	; 0x28
 800189e:	42a3      	cmp	r3, r4
 80018a0:	bf04      	itt	eq
 80018a2:	2301      	moveq	r3, #1
 80018a4:	61a3      	streq	r3, [r4, #24]
 80018a6:	4620      	mov	r0, r4
 80018a8:	f000 f820 	bl	80018ec <__sfp>
 80018ac:	6060      	str	r0, [r4, #4]
 80018ae:	4620      	mov	r0, r4
 80018b0:	f000 f81c 	bl	80018ec <__sfp>
 80018b4:	60a0      	str	r0, [r4, #8]
 80018b6:	4620      	mov	r0, r4
 80018b8:	f000 f818 	bl	80018ec <__sfp>
 80018bc:	2200      	movs	r2, #0
 80018be:	60e0      	str	r0, [r4, #12]
 80018c0:	2104      	movs	r1, #4
 80018c2:	6860      	ldr	r0, [r4, #4]
 80018c4:	f7ff ff82 	bl	80017cc <std>
 80018c8:	68a0      	ldr	r0, [r4, #8]
 80018ca:	2201      	movs	r2, #1
 80018cc:	2109      	movs	r1, #9
 80018ce:	f7ff ff7d 	bl	80017cc <std>
 80018d2:	68e0      	ldr	r0, [r4, #12]
 80018d4:	2202      	movs	r2, #2
 80018d6:	2112      	movs	r1, #18
 80018d8:	f7ff ff78 	bl	80017cc <std>
 80018dc:	2301      	movs	r3, #1
 80018de:	61a3      	str	r3, [r4, #24]
 80018e0:	e7d2      	b.n	8001888 <__sinit+0xc>
 80018e2:	bf00      	nop
 80018e4:	080028f0 	.word	0x080028f0
 80018e8:	08001815 	.word	0x08001815

080018ec <__sfp>:
 80018ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ee:	4607      	mov	r7, r0
 80018f0:	f7ff ffac 	bl	800184c <__sfp_lock_acquire>
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <__sfp+0x84>)
 80018f6:	681e      	ldr	r6, [r3, #0]
 80018f8:	69b3      	ldr	r3, [r6, #24]
 80018fa:	b913      	cbnz	r3, 8001902 <__sfp+0x16>
 80018fc:	4630      	mov	r0, r6
 80018fe:	f7ff ffbd 	bl	800187c <__sinit>
 8001902:	3648      	adds	r6, #72	; 0x48
 8001904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001908:	3b01      	subs	r3, #1
 800190a:	d503      	bpl.n	8001914 <__sfp+0x28>
 800190c:	6833      	ldr	r3, [r6, #0]
 800190e:	b30b      	cbz	r3, 8001954 <__sfp+0x68>
 8001910:	6836      	ldr	r6, [r6, #0]
 8001912:	e7f7      	b.n	8001904 <__sfp+0x18>
 8001914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001918:	b9d5      	cbnz	r5, 8001950 <__sfp+0x64>
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <__sfp+0x88>)
 800191c:	60e3      	str	r3, [r4, #12]
 800191e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001922:	6665      	str	r5, [r4, #100]	; 0x64
 8001924:	f000 f847 	bl	80019b6 <__retarget_lock_init_recursive>
 8001928:	f7ff ff96 	bl	8001858 <__sfp_lock_release>
 800192c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001930:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001934:	6025      	str	r5, [r4, #0]
 8001936:	61a5      	str	r5, [r4, #24]
 8001938:	2208      	movs	r2, #8
 800193a:	4629      	mov	r1, r5
 800193c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001940:	f7ff fc48 	bl	80011d4 <memset>
 8001944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800194c:	4620      	mov	r0, r4
 800194e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001950:	3468      	adds	r4, #104	; 0x68
 8001952:	e7d9      	b.n	8001908 <__sfp+0x1c>
 8001954:	2104      	movs	r1, #4
 8001956:	4638      	mov	r0, r7
 8001958:	f7ff ff62 	bl	8001820 <__sfmoreglue>
 800195c:	4604      	mov	r4, r0
 800195e:	6030      	str	r0, [r6, #0]
 8001960:	2800      	cmp	r0, #0
 8001962:	d1d5      	bne.n	8001910 <__sfp+0x24>
 8001964:	f7ff ff78 	bl	8001858 <__sfp_lock_release>
 8001968:	230c      	movs	r3, #12
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	e7ee      	b.n	800194c <__sfp+0x60>
 800196e:	bf00      	nop
 8001970:	080028f0 	.word	0x080028f0
 8001974:	ffff0001 	.word	0xffff0001

08001978 <_fwalk_reent>:
 8001978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800197c:	4606      	mov	r6, r0
 800197e:	4688      	mov	r8, r1
 8001980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001984:	2700      	movs	r7, #0
 8001986:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800198a:	f1b9 0901 	subs.w	r9, r9, #1
 800198e:	d505      	bpl.n	800199c <_fwalk_reent+0x24>
 8001990:	6824      	ldr	r4, [r4, #0]
 8001992:	2c00      	cmp	r4, #0
 8001994:	d1f7      	bne.n	8001986 <_fwalk_reent+0xe>
 8001996:	4638      	mov	r0, r7
 8001998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800199c:	89ab      	ldrh	r3, [r5, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d907      	bls.n	80019b2 <_fwalk_reent+0x3a>
 80019a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019a6:	3301      	adds	r3, #1
 80019a8:	d003      	beq.n	80019b2 <_fwalk_reent+0x3a>
 80019aa:	4629      	mov	r1, r5
 80019ac:	4630      	mov	r0, r6
 80019ae:	47c0      	blx	r8
 80019b0:	4307      	orrs	r7, r0
 80019b2:	3568      	adds	r5, #104	; 0x68
 80019b4:	e7e9      	b.n	800198a <_fwalk_reent+0x12>

080019b6 <__retarget_lock_init_recursive>:
 80019b6:	4770      	bx	lr

080019b8 <__retarget_lock_acquire_recursive>:
 80019b8:	4770      	bx	lr

080019ba <__retarget_lock_release_recursive>:
 80019ba:	4770      	bx	lr

080019bc <__swhatbuf_r>:
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	460e      	mov	r6, r1
 80019c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c4:	2900      	cmp	r1, #0
 80019c6:	b096      	sub	sp, #88	; 0x58
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
 80019cc:	da07      	bge.n	80019de <__swhatbuf_r+0x22>
 80019ce:	2300      	movs	r3, #0
 80019d0:	602b      	str	r3, [r5, #0]
 80019d2:	89b3      	ldrh	r3, [r6, #12]
 80019d4:	061a      	lsls	r2, r3, #24
 80019d6:	d410      	bmi.n	80019fa <__swhatbuf_r+0x3e>
 80019d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019dc:	e00e      	b.n	80019fc <__swhatbuf_r+0x40>
 80019de:	466a      	mov	r2, sp
 80019e0:	f000 fc9c 	bl	800231c <_fstat_r>
 80019e4:	2800      	cmp	r0, #0
 80019e6:	dbf2      	blt.n	80019ce <__swhatbuf_r+0x12>
 80019e8:	9a01      	ldr	r2, [sp, #4]
 80019ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019f2:	425a      	negs	r2, r3
 80019f4:	415a      	adcs	r2, r3
 80019f6:	602a      	str	r2, [r5, #0]
 80019f8:	e7ee      	b.n	80019d8 <__swhatbuf_r+0x1c>
 80019fa:	2340      	movs	r3, #64	; 0x40
 80019fc:	2000      	movs	r0, #0
 80019fe:	6023      	str	r3, [r4, #0]
 8001a00:	b016      	add	sp, #88	; 0x58
 8001a02:	bd70      	pop	{r4, r5, r6, pc}

08001a04 <__smakebuf_r>:
 8001a04:	898b      	ldrh	r3, [r1, #12]
 8001a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a08:	079d      	lsls	r5, r3, #30
 8001a0a:	4606      	mov	r6, r0
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	d507      	bpl.n	8001a20 <__smakebuf_r+0x1c>
 8001a10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	6123      	str	r3, [r4, #16]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	6163      	str	r3, [r4, #20]
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd70      	pop	{r4, r5, r6, pc}
 8001a20:	ab01      	add	r3, sp, #4
 8001a22:	466a      	mov	r2, sp
 8001a24:	f7ff ffca 	bl	80019bc <__swhatbuf_r>
 8001a28:	9900      	ldr	r1, [sp, #0]
 8001a2a:	4605      	mov	r5, r0
 8001a2c:	4630      	mov	r0, r6
 8001a2e:	f000 f881 	bl	8001b34 <_malloc_r>
 8001a32:	b948      	cbnz	r0, 8001a48 <__smakebuf_r+0x44>
 8001a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a38:	059a      	lsls	r2, r3, #22
 8001a3a:	d4ef      	bmi.n	8001a1c <__smakebuf_r+0x18>
 8001a3c:	f023 0303 	bic.w	r3, r3, #3
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	81a3      	strh	r3, [r4, #12]
 8001a46:	e7e3      	b.n	8001a10 <__smakebuf_r+0xc>
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <__smakebuf_r+0x7c>)
 8001a4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a4c:	89a3      	ldrh	r3, [r4, #12]
 8001a4e:	6020      	str	r0, [r4, #0]
 8001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a54:	81a3      	strh	r3, [r4, #12]
 8001a56:	9b00      	ldr	r3, [sp, #0]
 8001a58:	6163      	str	r3, [r4, #20]
 8001a5a:	9b01      	ldr	r3, [sp, #4]
 8001a5c:	6120      	str	r0, [r4, #16]
 8001a5e:	b15b      	cbz	r3, 8001a78 <__smakebuf_r+0x74>
 8001a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a64:	4630      	mov	r0, r6
 8001a66:	f000 fc6b 	bl	8002340 <_isatty_r>
 8001a6a:	b128      	cbz	r0, 8001a78 <__smakebuf_r+0x74>
 8001a6c:	89a3      	ldrh	r3, [r4, #12]
 8001a6e:	f023 0303 	bic.w	r3, r3, #3
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	81a3      	strh	r3, [r4, #12]
 8001a78:	89a0      	ldrh	r0, [r4, #12]
 8001a7a:	4305      	orrs	r5, r0
 8001a7c:	81a5      	strh	r5, [r4, #12]
 8001a7e:	e7cd      	b.n	8001a1c <__smakebuf_r+0x18>
 8001a80:	08001815 	.word	0x08001815

08001a84 <malloc>:
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <malloc+0xc>)
 8001a86:	4601      	mov	r1, r0
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	f000 b853 	b.w	8001b34 <_malloc_r>
 8001a8e:	bf00      	nop
 8001a90:	2000002c 	.word	0x2000002c

08001a94 <_free_r>:
 8001a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a96:	2900      	cmp	r1, #0
 8001a98:	d048      	beq.n	8001b2c <_free_r+0x98>
 8001a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a9e:	9001      	str	r0, [sp, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8001aa6:	bfb8      	it	lt
 8001aa8:	18e4      	addlt	r4, r4, r3
 8001aaa:	f000 fc6b 	bl	8002384 <__malloc_lock>
 8001aae:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <_free_r+0x9c>)
 8001ab0:	9801      	ldr	r0, [sp, #4]
 8001ab2:	6813      	ldr	r3, [r2, #0]
 8001ab4:	4615      	mov	r5, r2
 8001ab6:	b933      	cbnz	r3, 8001ac6 <_free_r+0x32>
 8001ab8:	6063      	str	r3, [r4, #4]
 8001aba:	6014      	str	r4, [r2, #0]
 8001abc:	b003      	add	sp, #12
 8001abe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ac2:	f000 bc65 	b.w	8002390 <__malloc_unlock>
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	d90b      	bls.n	8001ae2 <_free_r+0x4e>
 8001aca:	6821      	ldr	r1, [r4, #0]
 8001acc:	1862      	adds	r2, r4, r1
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	bf04      	itt	eq
 8001ad2:	681a      	ldreq	r2, [r3, #0]
 8001ad4:	685b      	ldreq	r3, [r3, #4]
 8001ad6:	6063      	str	r3, [r4, #4]
 8001ad8:	bf04      	itt	eq
 8001ada:	1852      	addeq	r2, r2, r1
 8001adc:	6022      	streq	r2, [r4, #0]
 8001ade:	602c      	str	r4, [r5, #0]
 8001ae0:	e7ec      	b.n	8001abc <_free_r+0x28>
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	b10b      	cbz	r3, 8001aec <_free_r+0x58>
 8001ae8:	42a3      	cmp	r3, r4
 8001aea:	d9fa      	bls.n	8001ae2 <_free_r+0x4e>
 8001aec:	6811      	ldr	r1, [r2, #0]
 8001aee:	1855      	adds	r5, r2, r1
 8001af0:	42a5      	cmp	r5, r4
 8001af2:	d10b      	bne.n	8001b0c <_free_r+0x78>
 8001af4:	6824      	ldr	r4, [r4, #0]
 8001af6:	4421      	add	r1, r4
 8001af8:	1854      	adds	r4, r2, r1
 8001afa:	42a3      	cmp	r3, r4
 8001afc:	6011      	str	r1, [r2, #0]
 8001afe:	d1dd      	bne.n	8001abc <_free_r+0x28>
 8001b00:	681c      	ldr	r4, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	6053      	str	r3, [r2, #4]
 8001b06:	4421      	add	r1, r4
 8001b08:	6011      	str	r1, [r2, #0]
 8001b0a:	e7d7      	b.n	8001abc <_free_r+0x28>
 8001b0c:	d902      	bls.n	8001b14 <_free_r+0x80>
 8001b0e:	230c      	movs	r3, #12
 8001b10:	6003      	str	r3, [r0, #0]
 8001b12:	e7d3      	b.n	8001abc <_free_r+0x28>
 8001b14:	6825      	ldr	r5, [r4, #0]
 8001b16:	1961      	adds	r1, r4, r5
 8001b18:	428b      	cmp	r3, r1
 8001b1a:	bf04      	itt	eq
 8001b1c:	6819      	ldreq	r1, [r3, #0]
 8001b1e:	685b      	ldreq	r3, [r3, #4]
 8001b20:	6063      	str	r3, [r4, #4]
 8001b22:	bf04      	itt	eq
 8001b24:	1949      	addeq	r1, r1, r5
 8001b26:	6021      	streq	r1, [r4, #0]
 8001b28:	6054      	str	r4, [r2, #4]
 8001b2a:	e7c7      	b.n	8001abc <_free_r+0x28>
 8001b2c:	b003      	add	sp, #12
 8001b2e:	bd30      	pop	{r4, r5, pc}
 8001b30:	200001b4 	.word	0x200001b4

08001b34 <_malloc_r>:
 8001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b36:	1ccd      	adds	r5, r1, #3
 8001b38:	f025 0503 	bic.w	r5, r5, #3
 8001b3c:	3508      	adds	r5, #8
 8001b3e:	2d0c      	cmp	r5, #12
 8001b40:	bf38      	it	cc
 8001b42:	250c      	movcc	r5, #12
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	4606      	mov	r6, r0
 8001b48:	db01      	blt.n	8001b4e <_malloc_r+0x1a>
 8001b4a:	42a9      	cmp	r1, r5
 8001b4c:	d903      	bls.n	8001b56 <_malloc_r+0x22>
 8001b4e:	230c      	movs	r3, #12
 8001b50:	6033      	str	r3, [r6, #0]
 8001b52:	2000      	movs	r0, #0
 8001b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b56:	f000 fc15 	bl	8002384 <__malloc_lock>
 8001b5a:	4921      	ldr	r1, [pc, #132]	; (8001be0 <_malloc_r+0xac>)
 8001b5c:	680a      	ldr	r2, [r1, #0]
 8001b5e:	4614      	mov	r4, r2
 8001b60:	b99c      	cbnz	r4, 8001b8a <_malloc_r+0x56>
 8001b62:	4f20      	ldr	r7, [pc, #128]	; (8001be4 <_malloc_r+0xb0>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b923      	cbnz	r3, 8001b72 <_malloc_r+0x3e>
 8001b68:	4621      	mov	r1, r4
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	f000 fb72 	bl	8002254 <_sbrk_r>
 8001b70:	6038      	str	r0, [r7, #0]
 8001b72:	4629      	mov	r1, r5
 8001b74:	4630      	mov	r0, r6
 8001b76:	f000 fb6d 	bl	8002254 <_sbrk_r>
 8001b7a:	1c43      	adds	r3, r0, #1
 8001b7c:	d123      	bne.n	8001bc6 <_malloc_r+0x92>
 8001b7e:	230c      	movs	r3, #12
 8001b80:	6033      	str	r3, [r6, #0]
 8001b82:	4630      	mov	r0, r6
 8001b84:	f000 fc04 	bl	8002390 <__malloc_unlock>
 8001b88:	e7e3      	b.n	8001b52 <_malloc_r+0x1e>
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	1b5b      	subs	r3, r3, r5
 8001b8e:	d417      	bmi.n	8001bc0 <_malloc_r+0x8c>
 8001b90:	2b0b      	cmp	r3, #11
 8001b92:	d903      	bls.n	8001b9c <_malloc_r+0x68>
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	441c      	add	r4, r3
 8001b98:	6025      	str	r5, [r4, #0]
 8001b9a:	e004      	b.n	8001ba6 <_malloc_r+0x72>
 8001b9c:	6863      	ldr	r3, [r4, #4]
 8001b9e:	42a2      	cmp	r2, r4
 8001ba0:	bf0c      	ite	eq
 8001ba2:	600b      	streq	r3, [r1, #0]
 8001ba4:	6053      	strne	r3, [r2, #4]
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	f000 fbf2 	bl	8002390 <__malloc_unlock>
 8001bac:	f104 000b 	add.w	r0, r4, #11
 8001bb0:	1d23      	adds	r3, r4, #4
 8001bb2:	f020 0007 	bic.w	r0, r0, #7
 8001bb6:	1ac2      	subs	r2, r0, r3
 8001bb8:	d0cc      	beq.n	8001b54 <_malloc_r+0x20>
 8001bba:	1a1b      	subs	r3, r3, r0
 8001bbc:	50a3      	str	r3, [r4, r2]
 8001bbe:	e7c9      	b.n	8001b54 <_malloc_r+0x20>
 8001bc0:	4622      	mov	r2, r4
 8001bc2:	6864      	ldr	r4, [r4, #4]
 8001bc4:	e7cc      	b.n	8001b60 <_malloc_r+0x2c>
 8001bc6:	1cc4      	adds	r4, r0, #3
 8001bc8:	f024 0403 	bic.w	r4, r4, #3
 8001bcc:	42a0      	cmp	r0, r4
 8001bce:	d0e3      	beq.n	8001b98 <_malloc_r+0x64>
 8001bd0:	1a21      	subs	r1, r4, r0
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	f000 fb3e 	bl	8002254 <_sbrk_r>
 8001bd8:	3001      	adds	r0, #1
 8001bda:	d1dd      	bne.n	8001b98 <_malloc_r+0x64>
 8001bdc:	e7cf      	b.n	8001b7e <_malloc_r+0x4a>
 8001bde:	bf00      	nop
 8001be0:	200001b4 	.word	0x200001b4
 8001be4:	200001b8 	.word	0x200001b8

08001be8 <__sfputc_r>:
 8001be8:	6893      	ldr	r3, [r2, #8]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	b410      	push	{r4}
 8001bf0:	6093      	str	r3, [r2, #8]
 8001bf2:	da08      	bge.n	8001c06 <__sfputc_r+0x1e>
 8001bf4:	6994      	ldr	r4, [r2, #24]
 8001bf6:	42a3      	cmp	r3, r4
 8001bf8:	db01      	blt.n	8001bfe <__sfputc_r+0x16>
 8001bfa:	290a      	cmp	r1, #10
 8001bfc:	d103      	bne.n	8001c06 <__sfputc_r+0x1e>
 8001bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c02:	f7ff bc61 	b.w	80014c8 <__swbuf_r>
 8001c06:	6813      	ldr	r3, [r2, #0]
 8001c08:	1c58      	adds	r0, r3, #1
 8001c0a:	6010      	str	r0, [r2, #0]
 8001c0c:	7019      	strb	r1, [r3, #0]
 8001c0e:	4608      	mov	r0, r1
 8001c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <__sfputs_r>:
 8001c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c18:	4606      	mov	r6, r0
 8001c1a:	460f      	mov	r7, r1
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	18d5      	adds	r5, r2, r3
 8001c20:	42ac      	cmp	r4, r5
 8001c22:	d101      	bne.n	8001c28 <__sfputs_r+0x12>
 8001c24:	2000      	movs	r0, #0
 8001c26:	e007      	b.n	8001c38 <__sfputs_r+0x22>
 8001c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c2c:	463a      	mov	r2, r7
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff ffda 	bl	8001be8 <__sfputc_r>
 8001c34:	1c43      	adds	r3, r0, #1
 8001c36:	d1f3      	bne.n	8001c20 <__sfputs_r+0xa>
 8001c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c3c <_vfiprintf_r>:
 8001c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c40:	460d      	mov	r5, r1
 8001c42:	b09d      	sub	sp, #116	; 0x74
 8001c44:	4614      	mov	r4, r2
 8001c46:	4698      	mov	r8, r3
 8001c48:	4606      	mov	r6, r0
 8001c4a:	b118      	cbz	r0, 8001c54 <_vfiprintf_r+0x18>
 8001c4c:	6983      	ldr	r3, [r0, #24]
 8001c4e:	b90b      	cbnz	r3, 8001c54 <_vfiprintf_r+0x18>
 8001c50:	f7ff fe14 	bl	800187c <__sinit>
 8001c54:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <_vfiprintf_r+0x240>)
 8001c56:	429d      	cmp	r5, r3
 8001c58:	d11b      	bne.n	8001c92 <_vfiprintf_r+0x56>
 8001c5a:	6875      	ldr	r5, [r6, #4]
 8001c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c5e:	07d9      	lsls	r1, r3, #31
 8001c60:	d405      	bmi.n	8001c6e <_vfiprintf_r+0x32>
 8001c62:	89ab      	ldrh	r3, [r5, #12]
 8001c64:	059a      	lsls	r2, r3, #22
 8001c66:	d402      	bmi.n	8001c6e <_vfiprintf_r+0x32>
 8001c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c6a:	f7ff fea5 	bl	80019b8 <__retarget_lock_acquire_recursive>
 8001c6e:	89ab      	ldrh	r3, [r5, #12]
 8001c70:	071b      	lsls	r3, r3, #28
 8001c72:	d501      	bpl.n	8001c78 <_vfiprintf_r+0x3c>
 8001c74:	692b      	ldr	r3, [r5, #16]
 8001c76:	b9eb      	cbnz	r3, 8001cb4 <_vfiprintf_r+0x78>
 8001c78:	4629      	mov	r1, r5
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f7ff fc76 	bl	800156c <__swsetup_r>
 8001c80:	b1c0      	cbz	r0, 8001cb4 <_vfiprintf_r+0x78>
 8001c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c84:	07dc      	lsls	r4, r3, #31
 8001c86:	d50e      	bpl.n	8001ca6 <_vfiprintf_r+0x6a>
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	b01d      	add	sp, #116	; 0x74
 8001c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c92:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <_vfiprintf_r+0x244>)
 8001c94:	429d      	cmp	r5, r3
 8001c96:	d101      	bne.n	8001c9c <_vfiprintf_r+0x60>
 8001c98:	68b5      	ldr	r5, [r6, #8]
 8001c9a:	e7df      	b.n	8001c5c <_vfiprintf_r+0x20>
 8001c9c:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <_vfiprintf_r+0x248>)
 8001c9e:	429d      	cmp	r5, r3
 8001ca0:	bf08      	it	eq
 8001ca2:	68f5      	ldreq	r5, [r6, #12]
 8001ca4:	e7da      	b.n	8001c5c <_vfiprintf_r+0x20>
 8001ca6:	89ab      	ldrh	r3, [r5, #12]
 8001ca8:	0598      	lsls	r0, r3, #22
 8001caa:	d4ed      	bmi.n	8001c88 <_vfiprintf_r+0x4c>
 8001cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001cae:	f7ff fe84 	bl	80019ba <__retarget_lock_release_recursive>
 8001cb2:	e7e9      	b.n	8001c88 <_vfiprintf_r+0x4c>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8001cb8:	2320      	movs	r3, #32
 8001cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cc2:	2330      	movs	r3, #48	; 0x30
 8001cc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001e88 <_vfiprintf_r+0x24c>
 8001cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ccc:	f04f 0901 	mov.w	r9, #1
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	469a      	mov	sl, r3
 8001cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cd8:	b10a      	cbz	r2, 8001cde <_vfiprintf_r+0xa2>
 8001cda:	2a25      	cmp	r2, #37	; 0x25
 8001cdc:	d1f9      	bne.n	8001cd2 <_vfiprintf_r+0x96>
 8001cde:	ebba 0b04 	subs.w	fp, sl, r4
 8001ce2:	d00b      	beq.n	8001cfc <_vfiprintf_r+0xc0>
 8001ce4:	465b      	mov	r3, fp
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4630      	mov	r0, r6
 8001cec:	f7ff ff93 	bl	8001c16 <__sfputs_r>
 8001cf0:	3001      	adds	r0, #1
 8001cf2:	f000 80aa 	beq.w	8001e4a <_vfiprintf_r+0x20e>
 8001cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cf8:	445a      	add	r2, fp
 8001cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8001cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80a2 	beq.w	8001e4a <_vfiprintf_r+0x20e>
 8001d06:	2300      	movs	r3, #0
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d10:	f10a 0a01 	add.w	sl, sl, #1
 8001d14:	9304      	str	r3, [sp, #16]
 8001d16:	9307      	str	r3, [sp, #28]
 8001d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8001d1e:	4654      	mov	r4, sl
 8001d20:	2205      	movs	r2, #5
 8001d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d26:	4858      	ldr	r0, [pc, #352]	; (8001e88 <_vfiprintf_r+0x24c>)
 8001d28:	f7fe fa52 	bl	80001d0 <memchr>
 8001d2c:	9a04      	ldr	r2, [sp, #16]
 8001d2e:	b9d8      	cbnz	r0, 8001d68 <_vfiprintf_r+0x12c>
 8001d30:	06d1      	lsls	r1, r2, #27
 8001d32:	bf44      	itt	mi
 8001d34:	2320      	movmi	r3, #32
 8001d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d3a:	0713      	lsls	r3, r2, #28
 8001d3c:	bf44      	itt	mi
 8001d3e:	232b      	movmi	r3, #43	; 0x2b
 8001d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d44:	f89a 3000 	ldrb.w	r3, [sl]
 8001d48:	2b2a      	cmp	r3, #42	; 0x2a
 8001d4a:	d015      	beq.n	8001d78 <_vfiprintf_r+0x13c>
 8001d4c:	9a07      	ldr	r2, [sp, #28]
 8001d4e:	4654      	mov	r4, sl
 8001d50:	2000      	movs	r0, #0
 8001d52:	f04f 0c0a 	mov.w	ip, #10
 8001d56:	4621      	mov	r1, r4
 8001d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d5c:	3b30      	subs	r3, #48	; 0x30
 8001d5e:	2b09      	cmp	r3, #9
 8001d60:	d94e      	bls.n	8001e00 <_vfiprintf_r+0x1c4>
 8001d62:	b1b0      	cbz	r0, 8001d92 <_vfiprintf_r+0x156>
 8001d64:	9207      	str	r2, [sp, #28]
 8001d66:	e014      	b.n	8001d92 <_vfiprintf_r+0x156>
 8001d68:	eba0 0308 	sub.w	r3, r0, r8
 8001d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	9304      	str	r3, [sp, #16]
 8001d74:	46a2      	mov	sl, r4
 8001d76:	e7d2      	b.n	8001d1e <_vfiprintf_r+0xe2>
 8001d78:	9b03      	ldr	r3, [sp, #12]
 8001d7a:	1d19      	adds	r1, r3, #4
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	9103      	str	r1, [sp, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bfbb      	ittet	lt
 8001d84:	425b      	neglt	r3, r3
 8001d86:	f042 0202 	orrlt.w	r2, r2, #2
 8001d8a:	9307      	strge	r3, [sp, #28]
 8001d8c:	9307      	strlt	r3, [sp, #28]
 8001d8e:	bfb8      	it	lt
 8001d90:	9204      	strlt	r2, [sp, #16]
 8001d92:	7823      	ldrb	r3, [r4, #0]
 8001d94:	2b2e      	cmp	r3, #46	; 0x2e
 8001d96:	d10c      	bne.n	8001db2 <_vfiprintf_r+0x176>
 8001d98:	7863      	ldrb	r3, [r4, #1]
 8001d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8001d9c:	d135      	bne.n	8001e0a <_vfiprintf_r+0x1ce>
 8001d9e:	9b03      	ldr	r3, [sp, #12]
 8001da0:	1d1a      	adds	r2, r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	9203      	str	r2, [sp, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bfb8      	it	lt
 8001daa:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dae:	3402      	adds	r4, #2
 8001db0:	9305      	str	r3, [sp, #20]
 8001db2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001e98 <_vfiprintf_r+0x25c>
 8001db6:	7821      	ldrb	r1, [r4, #0]
 8001db8:	2203      	movs	r2, #3
 8001dba:	4650      	mov	r0, sl
 8001dbc:	f7fe fa08 	bl	80001d0 <memchr>
 8001dc0:	b140      	cbz	r0, 8001dd4 <_vfiprintf_r+0x198>
 8001dc2:	2340      	movs	r3, #64	; 0x40
 8001dc4:	eba0 000a 	sub.w	r0, r0, sl
 8001dc8:	fa03 f000 	lsl.w	r0, r3, r0
 8001dcc:	9b04      	ldr	r3, [sp, #16]
 8001dce:	4303      	orrs	r3, r0
 8001dd0:	3401      	adds	r4, #1
 8001dd2:	9304      	str	r3, [sp, #16]
 8001dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dd8:	482c      	ldr	r0, [pc, #176]	; (8001e8c <_vfiprintf_r+0x250>)
 8001dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dde:	2206      	movs	r2, #6
 8001de0:	f7fe f9f6 	bl	80001d0 <memchr>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d03f      	beq.n	8001e68 <_vfiprintf_r+0x22c>
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <_vfiprintf_r+0x254>)
 8001dea:	bb1b      	cbnz	r3, 8001e34 <_vfiprintf_r+0x1f8>
 8001dec:	9b03      	ldr	r3, [sp, #12]
 8001dee:	3307      	adds	r3, #7
 8001df0:	f023 0307 	bic.w	r3, r3, #7
 8001df4:	3308      	adds	r3, #8
 8001df6:	9303      	str	r3, [sp, #12]
 8001df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dfa:	443b      	add	r3, r7
 8001dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8001dfe:	e767      	b.n	8001cd0 <_vfiprintf_r+0x94>
 8001e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e04:	460c      	mov	r4, r1
 8001e06:	2001      	movs	r0, #1
 8001e08:	e7a5      	b.n	8001d56 <_vfiprintf_r+0x11a>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	3401      	adds	r4, #1
 8001e0e:	9305      	str	r3, [sp, #20]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 0c0a 	mov.w	ip, #10
 8001e16:	4620      	mov	r0, r4
 8001e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e1c:	3a30      	subs	r2, #48	; 0x30
 8001e1e:	2a09      	cmp	r2, #9
 8001e20:	d903      	bls.n	8001e2a <_vfiprintf_r+0x1ee>
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0c5      	beq.n	8001db2 <_vfiprintf_r+0x176>
 8001e26:	9105      	str	r1, [sp, #20]
 8001e28:	e7c3      	b.n	8001db2 <_vfiprintf_r+0x176>
 8001e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e2e:	4604      	mov	r4, r0
 8001e30:	2301      	movs	r3, #1
 8001e32:	e7f0      	b.n	8001e16 <_vfiprintf_r+0x1da>
 8001e34:	ab03      	add	r3, sp, #12
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	462a      	mov	r2, r5
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <_vfiprintf_r+0x258>)
 8001e3c:	a904      	add	r1, sp, #16
 8001e3e:	4630      	mov	r0, r6
 8001e40:	f3af 8000 	nop.w
 8001e44:	4607      	mov	r7, r0
 8001e46:	1c78      	adds	r0, r7, #1
 8001e48:	d1d6      	bne.n	8001df8 <_vfiprintf_r+0x1bc>
 8001e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e4c:	07d9      	lsls	r1, r3, #31
 8001e4e:	d405      	bmi.n	8001e5c <_vfiprintf_r+0x220>
 8001e50:	89ab      	ldrh	r3, [r5, #12]
 8001e52:	059a      	lsls	r2, r3, #22
 8001e54:	d402      	bmi.n	8001e5c <_vfiprintf_r+0x220>
 8001e56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e58:	f7ff fdaf 	bl	80019ba <__retarget_lock_release_recursive>
 8001e5c:	89ab      	ldrh	r3, [r5, #12]
 8001e5e:	065b      	lsls	r3, r3, #25
 8001e60:	f53f af12 	bmi.w	8001c88 <_vfiprintf_r+0x4c>
 8001e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e66:	e711      	b.n	8001c8c <_vfiprintf_r+0x50>
 8001e68:	ab03      	add	r3, sp, #12
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	462a      	mov	r2, r5
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <_vfiprintf_r+0x258>)
 8001e70:	a904      	add	r1, sp, #16
 8001e72:	4630      	mov	r0, r6
 8001e74:	f000 f880 	bl	8001f78 <_printf_i>
 8001e78:	e7e4      	b.n	8001e44 <_vfiprintf_r+0x208>
 8001e7a:	bf00      	nop
 8001e7c:	08002914 	.word	0x08002914
 8001e80:	08002934 	.word	0x08002934
 8001e84:	080028f4 	.word	0x080028f4
 8001e88:	08002954 	.word	0x08002954
 8001e8c:	0800295e 	.word	0x0800295e
 8001e90:	00000000 	.word	0x00000000
 8001e94:	08001c17 	.word	0x08001c17
 8001e98:	0800295a 	.word	0x0800295a

08001e9c <_printf_common>:
 8001e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea0:	4616      	mov	r6, r2
 8001ea2:	4699      	mov	r9, r3
 8001ea4:	688a      	ldr	r2, [r1, #8]
 8001ea6:	690b      	ldr	r3, [r1, #16]
 8001ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	bfb8      	it	lt
 8001eb0:	4613      	movlt	r3, r2
 8001eb2:	6033      	str	r3, [r6, #0]
 8001eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001eb8:	4607      	mov	r7, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	b10a      	cbz	r2, 8001ec2 <_printf_common+0x26>
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	6033      	str	r3, [r6, #0]
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	0699      	lsls	r1, r3, #26
 8001ec6:	bf42      	ittt	mi
 8001ec8:	6833      	ldrmi	r3, [r6, #0]
 8001eca:	3302      	addmi	r3, #2
 8001ecc:	6033      	strmi	r3, [r6, #0]
 8001ece:	6825      	ldr	r5, [r4, #0]
 8001ed0:	f015 0506 	ands.w	r5, r5, #6
 8001ed4:	d106      	bne.n	8001ee4 <_printf_common+0x48>
 8001ed6:	f104 0a19 	add.w	sl, r4, #25
 8001eda:	68e3      	ldr	r3, [r4, #12]
 8001edc:	6832      	ldr	r2, [r6, #0]
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	42ab      	cmp	r3, r5
 8001ee2:	dc26      	bgt.n	8001f32 <_printf_common+0x96>
 8001ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ee8:	1e13      	subs	r3, r2, #0
 8001eea:	6822      	ldr	r2, [r4, #0]
 8001eec:	bf18      	it	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	0692      	lsls	r2, r2, #26
 8001ef2:	d42b      	bmi.n	8001f4c <_printf_common+0xb0>
 8001ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ef8:	4649      	mov	r1, r9
 8001efa:	4638      	mov	r0, r7
 8001efc:	47c0      	blx	r8
 8001efe:	3001      	adds	r0, #1
 8001f00:	d01e      	beq.n	8001f40 <_printf_common+0xa4>
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	68e5      	ldr	r5, [r4, #12]
 8001f06:	6832      	ldr	r2, [r6, #0]
 8001f08:	f003 0306 	and.w	r3, r3, #6
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	bf08      	it	eq
 8001f10:	1aad      	subeq	r5, r5, r2
 8001f12:	68a3      	ldr	r3, [r4, #8]
 8001f14:	6922      	ldr	r2, [r4, #16]
 8001f16:	bf0c      	ite	eq
 8001f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f1c:	2500      	movne	r5, #0
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	bfc4      	itt	gt
 8001f22:	1a9b      	subgt	r3, r3, r2
 8001f24:	18ed      	addgt	r5, r5, r3
 8001f26:	2600      	movs	r6, #0
 8001f28:	341a      	adds	r4, #26
 8001f2a:	42b5      	cmp	r5, r6
 8001f2c:	d11a      	bne.n	8001f64 <_printf_common+0xc8>
 8001f2e:	2000      	movs	r0, #0
 8001f30:	e008      	b.n	8001f44 <_printf_common+0xa8>
 8001f32:	2301      	movs	r3, #1
 8001f34:	4652      	mov	r2, sl
 8001f36:	4649      	mov	r1, r9
 8001f38:	4638      	mov	r0, r7
 8001f3a:	47c0      	blx	r8
 8001f3c:	3001      	adds	r0, #1
 8001f3e:	d103      	bne.n	8001f48 <_printf_common+0xac>
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f48:	3501      	adds	r5, #1
 8001f4a:	e7c6      	b.n	8001eda <_printf_common+0x3e>
 8001f4c:	18e1      	adds	r1, r4, r3
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	2030      	movs	r0, #48	; 0x30
 8001f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f56:	4422      	add	r2, r4
 8001f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f60:	3302      	adds	r3, #2
 8001f62:	e7c7      	b.n	8001ef4 <_printf_common+0x58>
 8001f64:	2301      	movs	r3, #1
 8001f66:	4622      	mov	r2, r4
 8001f68:	4649      	mov	r1, r9
 8001f6a:	4638      	mov	r0, r7
 8001f6c:	47c0      	blx	r8
 8001f6e:	3001      	adds	r0, #1
 8001f70:	d0e6      	beq.n	8001f40 <_printf_common+0xa4>
 8001f72:	3601      	adds	r6, #1
 8001f74:	e7d9      	b.n	8001f2a <_printf_common+0x8e>
	...

08001f78 <_printf_i>:
 8001f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4691      	mov	r9, r2
 8001f80:	7e27      	ldrb	r7, [r4, #24]
 8001f82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f84:	2f78      	cmp	r7, #120	; 0x78
 8001f86:	4680      	mov	r8, r0
 8001f88:	469a      	mov	sl, r3
 8001f8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f8e:	d807      	bhi.n	8001fa0 <_printf_i+0x28>
 8001f90:	2f62      	cmp	r7, #98	; 0x62
 8001f92:	d80a      	bhi.n	8001faa <_printf_i+0x32>
 8001f94:	2f00      	cmp	r7, #0
 8001f96:	f000 80d8 	beq.w	800214a <_printf_i+0x1d2>
 8001f9a:	2f58      	cmp	r7, #88	; 0x58
 8001f9c:	f000 80a3 	beq.w	80020e6 <_printf_i+0x16e>
 8001fa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fa8:	e03a      	b.n	8002020 <_printf_i+0xa8>
 8001faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fae:	2b15      	cmp	r3, #21
 8001fb0:	d8f6      	bhi.n	8001fa0 <_printf_i+0x28>
 8001fb2:	a001      	add	r0, pc, #4	; (adr r0, 8001fb8 <_printf_i+0x40>)
 8001fb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001fb8:	08002011 	.word	0x08002011
 8001fbc:	08002025 	.word	0x08002025
 8001fc0:	08001fa1 	.word	0x08001fa1
 8001fc4:	08001fa1 	.word	0x08001fa1
 8001fc8:	08001fa1 	.word	0x08001fa1
 8001fcc:	08001fa1 	.word	0x08001fa1
 8001fd0:	08002025 	.word	0x08002025
 8001fd4:	08001fa1 	.word	0x08001fa1
 8001fd8:	08001fa1 	.word	0x08001fa1
 8001fdc:	08001fa1 	.word	0x08001fa1
 8001fe0:	08001fa1 	.word	0x08001fa1
 8001fe4:	08002131 	.word	0x08002131
 8001fe8:	08002055 	.word	0x08002055
 8001fec:	08002113 	.word	0x08002113
 8001ff0:	08001fa1 	.word	0x08001fa1
 8001ff4:	08001fa1 	.word	0x08001fa1
 8001ff8:	08002153 	.word	0x08002153
 8001ffc:	08001fa1 	.word	0x08001fa1
 8002000:	08002055 	.word	0x08002055
 8002004:	08001fa1 	.word	0x08001fa1
 8002008:	08001fa1 	.word	0x08001fa1
 800200c:	0800211b 	.word	0x0800211b
 8002010:	680b      	ldr	r3, [r1, #0]
 8002012:	1d1a      	adds	r2, r3, #4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	600a      	str	r2, [r1, #0]
 8002018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800201c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002020:	2301      	movs	r3, #1
 8002022:	e0a3      	b.n	800216c <_printf_i+0x1f4>
 8002024:	6825      	ldr	r5, [r4, #0]
 8002026:	6808      	ldr	r0, [r1, #0]
 8002028:	062e      	lsls	r6, r5, #24
 800202a:	f100 0304 	add.w	r3, r0, #4
 800202e:	d50a      	bpl.n	8002046 <_printf_i+0xce>
 8002030:	6805      	ldr	r5, [r0, #0]
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	2d00      	cmp	r5, #0
 8002036:	da03      	bge.n	8002040 <_printf_i+0xc8>
 8002038:	232d      	movs	r3, #45	; 0x2d
 800203a:	426d      	negs	r5, r5
 800203c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002040:	485e      	ldr	r0, [pc, #376]	; (80021bc <_printf_i+0x244>)
 8002042:	230a      	movs	r3, #10
 8002044:	e019      	b.n	800207a <_printf_i+0x102>
 8002046:	f015 0f40 	tst.w	r5, #64	; 0x40
 800204a:	6805      	ldr	r5, [r0, #0]
 800204c:	600b      	str	r3, [r1, #0]
 800204e:	bf18      	it	ne
 8002050:	b22d      	sxthne	r5, r5
 8002052:	e7ef      	b.n	8002034 <_printf_i+0xbc>
 8002054:	680b      	ldr	r3, [r1, #0]
 8002056:	6825      	ldr	r5, [r4, #0]
 8002058:	1d18      	adds	r0, r3, #4
 800205a:	6008      	str	r0, [r1, #0]
 800205c:	0628      	lsls	r0, r5, #24
 800205e:	d501      	bpl.n	8002064 <_printf_i+0xec>
 8002060:	681d      	ldr	r5, [r3, #0]
 8002062:	e002      	b.n	800206a <_printf_i+0xf2>
 8002064:	0669      	lsls	r1, r5, #25
 8002066:	d5fb      	bpl.n	8002060 <_printf_i+0xe8>
 8002068:	881d      	ldrh	r5, [r3, #0]
 800206a:	4854      	ldr	r0, [pc, #336]	; (80021bc <_printf_i+0x244>)
 800206c:	2f6f      	cmp	r7, #111	; 0x6f
 800206e:	bf0c      	ite	eq
 8002070:	2308      	moveq	r3, #8
 8002072:	230a      	movne	r3, #10
 8002074:	2100      	movs	r1, #0
 8002076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800207a:	6866      	ldr	r6, [r4, #4]
 800207c:	60a6      	str	r6, [r4, #8]
 800207e:	2e00      	cmp	r6, #0
 8002080:	bfa2      	ittt	ge
 8002082:	6821      	ldrge	r1, [r4, #0]
 8002084:	f021 0104 	bicge.w	r1, r1, #4
 8002088:	6021      	strge	r1, [r4, #0]
 800208a:	b90d      	cbnz	r5, 8002090 <_printf_i+0x118>
 800208c:	2e00      	cmp	r6, #0
 800208e:	d04d      	beq.n	800212c <_printf_i+0x1b4>
 8002090:	4616      	mov	r6, r2
 8002092:	fbb5 f1f3 	udiv	r1, r5, r3
 8002096:	fb03 5711 	mls	r7, r3, r1, r5
 800209a:	5dc7      	ldrb	r7, [r0, r7]
 800209c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020a0:	462f      	mov	r7, r5
 80020a2:	42bb      	cmp	r3, r7
 80020a4:	460d      	mov	r5, r1
 80020a6:	d9f4      	bls.n	8002092 <_printf_i+0x11a>
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d10b      	bne.n	80020c4 <_printf_i+0x14c>
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	07df      	lsls	r7, r3, #31
 80020b0:	d508      	bpl.n	80020c4 <_printf_i+0x14c>
 80020b2:	6923      	ldr	r3, [r4, #16]
 80020b4:	6861      	ldr	r1, [r4, #4]
 80020b6:	4299      	cmp	r1, r3
 80020b8:	bfde      	ittt	le
 80020ba:	2330      	movle	r3, #48	; 0x30
 80020bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020c4:	1b92      	subs	r2, r2, r6
 80020c6:	6122      	str	r2, [r4, #16]
 80020c8:	f8cd a000 	str.w	sl, [sp]
 80020cc:	464b      	mov	r3, r9
 80020ce:	aa03      	add	r2, sp, #12
 80020d0:	4621      	mov	r1, r4
 80020d2:	4640      	mov	r0, r8
 80020d4:	f7ff fee2 	bl	8001e9c <_printf_common>
 80020d8:	3001      	adds	r0, #1
 80020da:	d14c      	bne.n	8002176 <_printf_i+0x1fe>
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	b004      	add	sp, #16
 80020e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020e6:	4835      	ldr	r0, [pc, #212]	; (80021bc <_printf_i+0x244>)
 80020e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	680e      	ldr	r6, [r1, #0]
 80020f0:	061f      	lsls	r7, r3, #24
 80020f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80020f6:	600e      	str	r6, [r1, #0]
 80020f8:	d514      	bpl.n	8002124 <_printf_i+0x1ac>
 80020fa:	07d9      	lsls	r1, r3, #31
 80020fc:	bf44      	itt	mi
 80020fe:	f043 0320 	orrmi.w	r3, r3, #32
 8002102:	6023      	strmi	r3, [r4, #0]
 8002104:	b91d      	cbnz	r5, 800210e <_printf_i+0x196>
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	f023 0320 	bic.w	r3, r3, #32
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	2310      	movs	r3, #16
 8002110:	e7b0      	b.n	8002074 <_printf_i+0xfc>
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	f043 0320 	orr.w	r3, r3, #32
 8002118:	6023      	str	r3, [r4, #0]
 800211a:	2378      	movs	r3, #120	; 0x78
 800211c:	4828      	ldr	r0, [pc, #160]	; (80021c0 <_printf_i+0x248>)
 800211e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002122:	e7e3      	b.n	80020ec <_printf_i+0x174>
 8002124:	065e      	lsls	r6, r3, #25
 8002126:	bf48      	it	mi
 8002128:	b2ad      	uxthmi	r5, r5
 800212a:	e7e6      	b.n	80020fa <_printf_i+0x182>
 800212c:	4616      	mov	r6, r2
 800212e:	e7bb      	b.n	80020a8 <_printf_i+0x130>
 8002130:	680b      	ldr	r3, [r1, #0]
 8002132:	6826      	ldr	r6, [r4, #0]
 8002134:	6960      	ldr	r0, [r4, #20]
 8002136:	1d1d      	adds	r5, r3, #4
 8002138:	600d      	str	r5, [r1, #0]
 800213a:	0635      	lsls	r5, r6, #24
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	d501      	bpl.n	8002144 <_printf_i+0x1cc>
 8002140:	6018      	str	r0, [r3, #0]
 8002142:	e002      	b.n	800214a <_printf_i+0x1d2>
 8002144:	0671      	lsls	r1, r6, #25
 8002146:	d5fb      	bpl.n	8002140 <_printf_i+0x1c8>
 8002148:	8018      	strh	r0, [r3, #0]
 800214a:	2300      	movs	r3, #0
 800214c:	6123      	str	r3, [r4, #16]
 800214e:	4616      	mov	r6, r2
 8002150:	e7ba      	b.n	80020c8 <_printf_i+0x150>
 8002152:	680b      	ldr	r3, [r1, #0]
 8002154:	1d1a      	adds	r2, r3, #4
 8002156:	600a      	str	r2, [r1, #0]
 8002158:	681e      	ldr	r6, [r3, #0]
 800215a:	6862      	ldr	r2, [r4, #4]
 800215c:	2100      	movs	r1, #0
 800215e:	4630      	mov	r0, r6
 8002160:	f7fe f836 	bl	80001d0 <memchr>
 8002164:	b108      	cbz	r0, 800216a <_printf_i+0x1f2>
 8002166:	1b80      	subs	r0, r0, r6
 8002168:	6060      	str	r0, [r4, #4]
 800216a:	6863      	ldr	r3, [r4, #4]
 800216c:	6123      	str	r3, [r4, #16]
 800216e:	2300      	movs	r3, #0
 8002170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002174:	e7a8      	b.n	80020c8 <_printf_i+0x150>
 8002176:	6923      	ldr	r3, [r4, #16]
 8002178:	4632      	mov	r2, r6
 800217a:	4649      	mov	r1, r9
 800217c:	4640      	mov	r0, r8
 800217e:	47d0      	blx	sl
 8002180:	3001      	adds	r0, #1
 8002182:	d0ab      	beq.n	80020dc <_printf_i+0x164>
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	079b      	lsls	r3, r3, #30
 8002188:	d413      	bmi.n	80021b2 <_printf_i+0x23a>
 800218a:	68e0      	ldr	r0, [r4, #12]
 800218c:	9b03      	ldr	r3, [sp, #12]
 800218e:	4298      	cmp	r0, r3
 8002190:	bfb8      	it	lt
 8002192:	4618      	movlt	r0, r3
 8002194:	e7a4      	b.n	80020e0 <_printf_i+0x168>
 8002196:	2301      	movs	r3, #1
 8002198:	4632      	mov	r2, r6
 800219a:	4649      	mov	r1, r9
 800219c:	4640      	mov	r0, r8
 800219e:	47d0      	blx	sl
 80021a0:	3001      	adds	r0, #1
 80021a2:	d09b      	beq.n	80020dc <_printf_i+0x164>
 80021a4:	3501      	adds	r5, #1
 80021a6:	68e3      	ldr	r3, [r4, #12]
 80021a8:	9903      	ldr	r1, [sp, #12]
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	42ab      	cmp	r3, r5
 80021ae:	dcf2      	bgt.n	8002196 <_printf_i+0x21e>
 80021b0:	e7eb      	b.n	800218a <_printf_i+0x212>
 80021b2:	2500      	movs	r5, #0
 80021b4:	f104 0619 	add.w	r6, r4, #25
 80021b8:	e7f5      	b.n	80021a6 <_printf_i+0x22e>
 80021ba:	bf00      	nop
 80021bc:	08002965 	.word	0x08002965
 80021c0:	08002976 	.word	0x08002976

080021c4 <_putc_r>:
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	460d      	mov	r5, r1
 80021c8:	4614      	mov	r4, r2
 80021ca:	4606      	mov	r6, r0
 80021cc:	b118      	cbz	r0, 80021d6 <_putc_r+0x12>
 80021ce:	6983      	ldr	r3, [r0, #24]
 80021d0:	b90b      	cbnz	r3, 80021d6 <_putc_r+0x12>
 80021d2:	f7ff fb53 	bl	800187c <__sinit>
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <_putc_r+0x84>)
 80021d8:	429c      	cmp	r4, r3
 80021da:	d124      	bne.n	8002226 <_putc_r+0x62>
 80021dc:	6874      	ldr	r4, [r6, #4]
 80021de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021e0:	07d8      	lsls	r0, r3, #31
 80021e2:	d405      	bmi.n	80021f0 <_putc_r+0x2c>
 80021e4:	89a3      	ldrh	r3, [r4, #12]
 80021e6:	0599      	lsls	r1, r3, #22
 80021e8:	d402      	bmi.n	80021f0 <_putc_r+0x2c>
 80021ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ec:	f7ff fbe4 	bl	80019b8 <__retarget_lock_acquire_recursive>
 80021f0:	68a3      	ldr	r3, [r4, #8]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	60a3      	str	r3, [r4, #8]
 80021f8:	da05      	bge.n	8002206 <_putc_r+0x42>
 80021fa:	69a2      	ldr	r2, [r4, #24]
 80021fc:	4293      	cmp	r3, r2
 80021fe:	db1c      	blt.n	800223a <_putc_r+0x76>
 8002200:	b2eb      	uxtb	r3, r5
 8002202:	2b0a      	cmp	r3, #10
 8002204:	d019      	beq.n	800223a <_putc_r+0x76>
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	6022      	str	r2, [r4, #0]
 800220c:	701d      	strb	r5, [r3, #0]
 800220e:	b2ed      	uxtb	r5, r5
 8002210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002212:	07da      	lsls	r2, r3, #31
 8002214:	d405      	bmi.n	8002222 <_putc_r+0x5e>
 8002216:	89a3      	ldrh	r3, [r4, #12]
 8002218:	059b      	lsls	r3, r3, #22
 800221a:	d402      	bmi.n	8002222 <_putc_r+0x5e>
 800221c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800221e:	f7ff fbcc 	bl	80019ba <__retarget_lock_release_recursive>
 8002222:	4628      	mov	r0, r5
 8002224:	bd70      	pop	{r4, r5, r6, pc}
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <_putc_r+0x88>)
 8002228:	429c      	cmp	r4, r3
 800222a:	d101      	bne.n	8002230 <_putc_r+0x6c>
 800222c:	68b4      	ldr	r4, [r6, #8]
 800222e:	e7d6      	b.n	80021de <_putc_r+0x1a>
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_putc_r+0x8c>)
 8002232:	429c      	cmp	r4, r3
 8002234:	bf08      	it	eq
 8002236:	68f4      	ldreq	r4, [r6, #12]
 8002238:	e7d1      	b.n	80021de <_putc_r+0x1a>
 800223a:	4629      	mov	r1, r5
 800223c:	4622      	mov	r2, r4
 800223e:	4630      	mov	r0, r6
 8002240:	f7ff f942 	bl	80014c8 <__swbuf_r>
 8002244:	4605      	mov	r5, r0
 8002246:	e7e3      	b.n	8002210 <_putc_r+0x4c>
 8002248:	08002914 	.word	0x08002914
 800224c:	08002934 	.word	0x08002934
 8002250:	080028f4 	.word	0x080028f4

08002254 <_sbrk_r>:
 8002254:	b538      	push	{r3, r4, r5, lr}
 8002256:	4d06      	ldr	r5, [pc, #24]	; (8002270 <_sbrk_r+0x1c>)
 8002258:	2300      	movs	r3, #0
 800225a:	4604      	mov	r4, r0
 800225c:	4608      	mov	r0, r1
 800225e:	602b      	str	r3, [r5, #0]
 8002260:	f7fe fea4 	bl	8000fac <_sbrk>
 8002264:	1c43      	adds	r3, r0, #1
 8002266:	d102      	bne.n	800226e <_sbrk_r+0x1a>
 8002268:	682b      	ldr	r3, [r5, #0]
 800226a:	b103      	cbz	r3, 800226e <_sbrk_r+0x1a>
 800226c:	6023      	str	r3, [r4, #0]
 800226e:	bd38      	pop	{r3, r4, r5, pc}
 8002270:	200001c8 	.word	0x200001c8

08002274 <__sread>:
 8002274:	b510      	push	{r4, lr}
 8002276:	460c      	mov	r4, r1
 8002278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800227c:	f000 f88e 	bl	800239c <_read_r>
 8002280:	2800      	cmp	r0, #0
 8002282:	bfab      	itete	ge
 8002284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002286:	89a3      	ldrhlt	r3, [r4, #12]
 8002288:	181b      	addge	r3, r3, r0
 800228a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800228e:	bfac      	ite	ge
 8002290:	6563      	strge	r3, [r4, #84]	; 0x54
 8002292:	81a3      	strhlt	r3, [r4, #12]
 8002294:	bd10      	pop	{r4, pc}

08002296 <__swrite>:
 8002296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800229a:	461f      	mov	r7, r3
 800229c:	898b      	ldrh	r3, [r1, #12]
 800229e:	05db      	lsls	r3, r3, #23
 80022a0:	4605      	mov	r5, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	4616      	mov	r6, r2
 80022a6:	d505      	bpl.n	80022b4 <__swrite+0x1e>
 80022a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ac:	2302      	movs	r3, #2
 80022ae:	2200      	movs	r2, #0
 80022b0:	f000 f856 	bl	8002360 <_lseek_r>
 80022b4:	89a3      	ldrh	r3, [r4, #12]
 80022b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022be:	81a3      	strh	r3, [r4, #12]
 80022c0:	4632      	mov	r2, r6
 80022c2:	463b      	mov	r3, r7
 80022c4:	4628      	mov	r0, r5
 80022c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022ca:	f7fe bad7 	b.w	800087c <_write_r>

080022ce <__sseek>:
 80022ce:	b510      	push	{r4, lr}
 80022d0:	460c      	mov	r4, r1
 80022d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d6:	f000 f843 	bl	8002360 <_lseek_r>
 80022da:	1c43      	adds	r3, r0, #1
 80022dc:	89a3      	ldrh	r3, [r4, #12]
 80022de:	bf15      	itete	ne
 80022e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80022e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022ea:	81a3      	strheq	r3, [r4, #12]
 80022ec:	bf18      	it	ne
 80022ee:	81a3      	strhne	r3, [r4, #12]
 80022f0:	bd10      	pop	{r4, pc}

080022f2 <__sclose>:
 80022f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f6:	f000 b801 	b.w	80022fc <_close_r>
	...

080022fc <_close_r>:
 80022fc:	b538      	push	{r3, r4, r5, lr}
 80022fe:	4d06      	ldr	r5, [pc, #24]	; (8002318 <_close_r+0x1c>)
 8002300:	2300      	movs	r3, #0
 8002302:	4604      	mov	r4, r0
 8002304:	4608      	mov	r0, r1
 8002306:	602b      	str	r3, [r5, #0]
 8002308:	f7fe fe1b 	bl	8000f42 <_close>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d102      	bne.n	8002316 <_close_r+0x1a>
 8002310:	682b      	ldr	r3, [r5, #0]
 8002312:	b103      	cbz	r3, 8002316 <_close_r+0x1a>
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	bd38      	pop	{r3, r4, r5, pc}
 8002318:	200001c8 	.word	0x200001c8

0800231c <_fstat_r>:
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	4d07      	ldr	r5, [pc, #28]	; (800233c <_fstat_r+0x20>)
 8002320:	2300      	movs	r3, #0
 8002322:	4604      	mov	r4, r0
 8002324:	4608      	mov	r0, r1
 8002326:	4611      	mov	r1, r2
 8002328:	602b      	str	r3, [r5, #0]
 800232a:	f7fe fe16 	bl	8000f5a <_fstat>
 800232e:	1c43      	adds	r3, r0, #1
 8002330:	d102      	bne.n	8002338 <_fstat_r+0x1c>
 8002332:	682b      	ldr	r3, [r5, #0]
 8002334:	b103      	cbz	r3, 8002338 <_fstat_r+0x1c>
 8002336:	6023      	str	r3, [r4, #0]
 8002338:	bd38      	pop	{r3, r4, r5, pc}
 800233a:	bf00      	nop
 800233c:	200001c8 	.word	0x200001c8

08002340 <_isatty_r>:
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4d06      	ldr	r5, [pc, #24]	; (800235c <_isatty_r+0x1c>)
 8002344:	2300      	movs	r3, #0
 8002346:	4604      	mov	r4, r0
 8002348:	4608      	mov	r0, r1
 800234a:	602b      	str	r3, [r5, #0]
 800234c:	f7fe fe15 	bl	8000f7a <_isatty>
 8002350:	1c43      	adds	r3, r0, #1
 8002352:	d102      	bne.n	800235a <_isatty_r+0x1a>
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	b103      	cbz	r3, 800235a <_isatty_r+0x1a>
 8002358:	6023      	str	r3, [r4, #0]
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	200001c8 	.word	0x200001c8

08002360 <_lseek_r>:
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	4d07      	ldr	r5, [pc, #28]	; (8002380 <_lseek_r+0x20>)
 8002364:	4604      	mov	r4, r0
 8002366:	4608      	mov	r0, r1
 8002368:	4611      	mov	r1, r2
 800236a:	2200      	movs	r2, #0
 800236c:	602a      	str	r2, [r5, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f7fe fe0e 	bl	8000f90 <_lseek>
 8002374:	1c43      	adds	r3, r0, #1
 8002376:	d102      	bne.n	800237e <_lseek_r+0x1e>
 8002378:	682b      	ldr	r3, [r5, #0]
 800237a:	b103      	cbz	r3, 800237e <_lseek_r+0x1e>
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	bd38      	pop	{r3, r4, r5, pc}
 8002380:	200001c8 	.word	0x200001c8

08002384 <__malloc_lock>:
 8002384:	4801      	ldr	r0, [pc, #4]	; (800238c <__malloc_lock+0x8>)
 8002386:	f7ff bb17 	b.w	80019b8 <__retarget_lock_acquire_recursive>
 800238a:	bf00      	nop
 800238c:	200001c0 	.word	0x200001c0

08002390 <__malloc_unlock>:
 8002390:	4801      	ldr	r0, [pc, #4]	; (8002398 <__malloc_unlock+0x8>)
 8002392:	f7ff bb12 	b.w	80019ba <__retarget_lock_release_recursive>
 8002396:	bf00      	nop
 8002398:	200001c0 	.word	0x200001c0

0800239c <_read_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4d07      	ldr	r5, [pc, #28]	; (80023bc <_read_r+0x20>)
 80023a0:	4604      	mov	r4, r0
 80023a2:	4608      	mov	r0, r1
 80023a4:	4611      	mov	r1, r2
 80023a6:	2200      	movs	r2, #0
 80023a8:	602a      	str	r2, [r5, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7fe fdac 	bl	8000f08 <_read>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d102      	bne.n	80023ba <_read_r+0x1e>
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	b103      	cbz	r3, 80023ba <_read_r+0x1e>
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	200001c8 	.word	0x200001c8

080023c0 <_init>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	bf00      	nop
 80023c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c6:	bc08      	pop	{r3}
 80023c8:	469e      	mov	lr, r3
 80023ca:	4770      	bx	lr

080023cc <_fini>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	bf00      	nop
 80023d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d2:	bc08      	pop	{r3}
 80023d4:	469e      	mov	lr, r3
 80023d6:	4770      	bx	lr
