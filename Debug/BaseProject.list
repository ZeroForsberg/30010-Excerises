
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000250c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf4  08002bf4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf4  08002bf4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000090  08002c8c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002c8c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008983  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188b  00000000  00000000  00028a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  0002a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000528  00000000  00000000  0002a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000382d  00000000  00000000  0002adf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000640d  00000000  00000000  0002e61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a140  00000000  00000000  00034a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008eb6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002028  00000000  00000000  0008ebc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002684 	.word	0x08002684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08002684 	.word	0x08002684

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000280:	b480      	push	{r7}
 8000282:	b08b      	sub	sp, #44	; 0x2c
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a8:	4b91      	ldr	r3, [pc, #580]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
 80002b0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d011      	beq.n	80002dc <RCC_GetClocksFreq+0x5c>
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	d837      	bhi.n	800032e <RCC_GetClocksFreq+0xae>
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <RCC_GetClocksFreq+0x4c>
 80002c4:	6a3b      	ldr	r3, [r7, #32]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d004      	beq.n	80002d4 <RCC_GetClocksFreq+0x54>
 80002ca:	e030      	b.n	800032e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a89      	ldr	r2, [pc, #548]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d0:	601a      	str	r2, [r3, #0]
      break;
 80002d2:	e030      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a87      	ldr	r2, [pc, #540]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 80002d8:	601a      	str	r2, [r3, #0]
      break;
 80002da:	e02c      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002dc:	4b84      	ldr	r3, [pc, #528]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002e4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002e6:	4b82      	ldr	r3, [pc, #520]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ee:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	0c9b      	lsrs	r3, r3, #18
 80002f4:	3302      	adds	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	4a7d      	ldr	r2, [pc, #500]	; (80004f8 <RCC_GetClocksFreq+0x278>)
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	e00d      	b.n	8000326 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800030a:	4b79      	ldr	r3, [pc, #484]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 800030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000316:	4a77      	ldr	r2, [pc, #476]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800032a:	601a      	str	r2, [r3, #0]
      break;
 800032c:	e003      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a70      	ldr	r2, [pc, #448]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000332:	601a      	str	r2, [r3, #0]
      break;
 8000334:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000336:	4b6e      	ldr	r3, [pc, #440]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800033e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	091b      	lsrs	r3, r3, #4
 8000344:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000346:	4a6d      	ldr	r2, [pc, #436]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	40da      	lsrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800035e:	4b64      	ldr	r3, [pc, #400]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000366:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800036e:	4a63      	ldr	r2, [pc, #396]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	40da      	lsrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000386:	4b5a      	ldr	r3, [pc, #360]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800038e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000390:	6a3b      	ldr	r3, [r7, #32]
 8000392:	0adb      	lsrs	r3, r3, #11
 8000394:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000396:	4a59      	ldr	r2, [pc, #356]	; (80004fc <RCC_GetClocksFreq+0x27c>)
 8000398:	6a3b      	ldr	r3, [r7, #32]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80003ae:	4b50      	ldr	r3, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003b6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003b8:	6a3b      	ldr	r3, [r7, #32]
 80003ba:	091b      	lsrs	r3, r3, #4
 80003bc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003be:	4a50      	ldr	r2, [pc, #320]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003ea:	4b41      	ldr	r3, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003f4:	6a3b      	ldr	r3, [r7, #32]
 80003f6:	0a5b      	lsrs	r3, r3, #9
 80003f8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003fa:	4a41      	ldr	r2, [pc, #260]	; (8000500 <RCC_GetClocksFreq+0x280>)
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	b29b      	uxth	r3, r3
 8000404:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	fbb2 f2f3 	udiv	r2, r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	e003      	b.n	8000426 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000426:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0310 	and.w	r3, r3, #16
 800042e:	2b10      	cmp	r3, #16
 8000430:	d003      	beq.n	800043a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a2f      	ldr	r2, [pc, #188]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000436:	619a      	str	r2, [r3, #24]
 8000438:	e003      	b.n	8000442 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0320 	and.w	r3, r3, #32
 800044a:	2b20      	cmp	r3, #32
 800044c:	d003      	beq.n	8000456 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a28      	ldr	r2, [pc, #160]	; (80004f4 <RCC_GetClocksFreq+0x274>)
 8000452:	61da      	str	r2, [r3, #28]
 8000454:	e003      	b.n	800045e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800046a:	d10d      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000472:	429a      	cmp	r2, r3
 8000474:	d108      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d104      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	005a      	lsls	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	621a      	str	r2, [r3, #32]
 8000486:	e003      	b.n	8000490 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800049c:	d10d      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d108      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d104      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
 80004b8:	e003      	b.n	80004c2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d104      	bne.n	80004d8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68da      	ldr	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28
 80004d6:	e029      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <RCC_GetClocksFreq+0x270>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	f003 0303 	and.w	r3, r3, #3
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10f      	bne.n	8000504 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
 80004ec:	e01e      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	007a1200 	.word	0x007a1200
 80004f8:	003d0900 	.word	0x003d0900
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000504:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	2b02      	cmp	r3, #2
 800050e:	d104      	bne.n	800051a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
 8000518:	e008      	b.n	800052c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800051a:	4b61      	ldr	r3, [pc, #388]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	2b03      	cmp	r3, #3
 8000524:	d102      	bne.n	800052c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a5e      	ldr	r2, [pc, #376]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000534:	2b00      	cmp	r3, #0
 8000536:	d104      	bne.n	8000542 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000540:	e021      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000542:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800054a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800054e:	d104      	bne.n	800055a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
 8000558:	e015      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800055a:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000566:	d104      	bne.n	8000572 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000570:	e009      	b.n	8000586 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800057a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800057e:	d102      	bne.n	8000586 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000586:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d104      	bne.n	800059c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
 800059a:	e021      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800059c:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80005a8:	d104      	bne.n	80005b4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
 80005b2:	e015      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005c0:	d104      	bne.n	80005cc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ca:	e009      	b.n	80005e0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005d8:	d102      	bne.n	80005e0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a31      	ldr	r2, [pc, #196]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	635a      	str	r2, [r3, #52]	; 0x34
 80005f4:	e021      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000602:	d104      	bne.n	800060e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
 800060c:	e015      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800061a:	d104      	bne.n	8000626 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
 8000624:	e009      	b.n	800063a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800062e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000632:	d102      	bne.n	800063a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d104      	bne.n	8000650 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800064e:	e021      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800065c:	d104      	bne.n	8000668 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000666:	e015      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000674:	d104      	bne.n	8000680 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800067e:	e009      	b.n	8000694 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800068c:	d102      	bne.n	8000694 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000694:	bf00      	nop
 8000696:	372c      	adds	r7, #44	; 0x2c
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	007a1200 	.word	0x007a1200

080006a8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006fe:	2201      	movs	r2, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d103      	bne.n	8000716 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	e005      	b.n	8000722 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d102      	bne.n	8000722 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3308      	adds	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000734:	e006      	b.n	8000744 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	43da      	mvns	r2, r3
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	3724      	adds	r7, #36	; 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	4013      	ands	r3, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e001      	b.n	8000774 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000782:	b480      	push	{r7}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80007ac:	2201      	movs	r2, #1
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	4013      	ands	r3, r2
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00d      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d105      	bne.n	80007da <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4013      	ands	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e004      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4013      	ands	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007ea:	2201      	movs	r2, #1
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <USART_GetITStatus+0x8e>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	74fb      	strb	r3, [r7, #19]
 800080e:	e001      	b.n	8000814 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000814:	7cfb      	ldrb	r3, [r7, #19]
}
 8000816:	4618      	mov	r0, r3
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	2201      	movs	r2, #1
 8000836:	fa02 f103 	lsl.w	r1, r2, r3
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <NVIC_EnableIRQ+0x30>)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100

08000858 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	b29b      	uxth	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <uart_put_char+0x30>)
 800086a:	f7ff ff1d 	bl	80006a8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800086e:	bf00      	nop
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <uart_put_char+0x30>)
 8000874:	f7ff ff6c 	bl	8000750 <USART_GetFlagStatus>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f8      	beq.n	8000870 <uart_put_char+0x18>
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40004400 	.word	0x40004400

0800088c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	e012      	b.n	80008c6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b0a      	cmp	r3, #10
 80008aa:	d102      	bne.n	80008b2 <_write_r+0x26>
            uart_put_char('\r');
 80008ac:	200d      	movs	r0, #13
 80008ae:	f7ff ffd3 	bl	8000858 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffcc 	bl	8000858 <uart_put_char>
    for (n = 0; n < len; n++) {
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbe8      	blt.n	80008a0 <_write_r+0x14>
    }

    return len;
 80008ce:	683b      	ldr	r3, [r7, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80008dc:	4915      	ldr	r1, [pc, #84]	; (8000934 <USART2_IRQHandler+0x5c>)
 80008de:	4816      	ldr	r0, [pc, #88]	; (8000938 <USART2_IRQHandler+0x60>)
 80008e0:	f7ff ff4f 	bl	8000782 <USART_GetITStatus>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d021      	beq.n	800092e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <USART2_IRQHandler+0x60>)
 80008ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008ee:	b299      	uxth	r1, r3
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <USART2_IRQHandler+0x64>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	b2d0      	uxtb	r0, r2
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <USART2_IRQHandler+0x64>)
 80008fc:	7010      	strb	r0, [r2, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	b2c9      	uxtb	r1, r1
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <USART2_IRQHandler+0x68>)
 8000904:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <USART2_IRQHandler+0x6c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2bff      	cmp	r3, #255	; 0xff
 800090e:	d107      	bne.n	8000920 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <USART2_IRQHandler+0x70>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <USART2_IRQHandler+0x70>)
 800091c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800091e:	e006      	b.n	800092e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <USART2_IRQHandler+0x6c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	3301      	adds	r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <USART2_IRQHandler+0x6c>)
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	00050105 	.word	0x00050105
 8000938:	40004400 	.word	0x40004400
 800093c:	200001ac 	.word	0x200001ac
 8000940:	200000ac 	.word	0x200000ac
 8000944:	200001ae 	.word	0x200001ae
 8000948:	200001ad 	.word	0x200001ad

0800094c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000954:	4b86      	ldr	r3, [pc, #536]	; (8000b70 <uart_init+0x224>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fe47 	bl	80015f0 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000962:	4b83      	ldr	r3, [pc, #524]	; (8000b70 <uart_init+0x224>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fe40 	bl	80015f0 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000970:	4b80      	ldr	r3, [pc, #512]	; (8000b74 <uart_init+0x228>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a7f      	ldr	r2, [pc, #508]	; (8000b74 <uart_init+0x228>)
 8000976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800097c:	4b7d      	ldr	r3, [pc, #500]	; (8000b74 <uart_init+0x228>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	4a7c      	ldr	r2, [pc, #496]	; (8000b74 <uart_init+0x228>)
 8000982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000986:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000992:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000996:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80009a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80009a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ac:	6a1b      	ldr	r3, [r3, #32]
 80009ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80009b6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80009b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009bc:	6a1b      	ldr	r3, [r3, #32]
 80009be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009c2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80009c6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80009c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009d6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80009d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009e6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80009e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ec:	889b      	ldrh	r3, [r3, #4]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f4:	f023 030c 	bic.w	r3, r3, #12
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80009fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a04:	8892      	ldrh	r2, [r2, #4]
 8000a06:	b292      	uxth	r2, r2
 8000a08:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a18:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a24:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a28:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a38:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a44:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a48:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a4a:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <uart_init+0x22c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <uart_init+0x22c>)
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <uart_init+0x22c>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a47      	ldr	r2, [pc, #284]	; (8000b78 <uart_init+0x22c>)
 8000a5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a60:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000a62:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <uart_init+0x22c>)
 8000a64:	4a44      	ldr	r2, [pc, #272]	; (8000b78 <uart_init+0x22c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000a6a:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <uart_init+0x22c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a42      	ldr	r2, [pc, #264]	; (8000b78 <uart_init+0x22c>)
 8000a70:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a74:	f023 030c 	bic.w	r3, r3, #12
 8000a78:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <uart_init+0x22c>)
 8000a7c:	4a3e      	ldr	r2, [pc, #248]	; (8000b78 <uart_init+0x22c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <uart_init+0x22c>)
 8000a84:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <uart_init+0x22c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <uart_init+0x22c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a3a      	ldr	r2, [pc, #232]	; (8000b78 <uart_init+0x22c>)
 8000a90:	f043 030c 	orr.w	r3, r3, #12
 8000a94:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <uart_init+0x22c>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <uart_init+0x22c>)
 8000a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aa0:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000aa2:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <uart_init+0x22c>)
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <uart_init+0x22c>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000aae:	2300      	movs	r3, #0
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fbe0 	bl	8000280 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <uart_init+0x22c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d010      	beq.n	8000af2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ad2:	005a      	lsls	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	fb01 f202 	mul.w	r2, r1, r2
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8000af0:	e00d      	b.n	8000b0e <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	fb01 f202 	mul.w	r2, r1, r2
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d302      	bcc.n	8000b1e <uart_init+0x1d2>
        divider++;
 8000b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <uart_init+0x22c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00b      	beq.n	8000b42 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b36:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <uart_init+0x22c>)
 8000b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b46:	b292      	uxth	r2, r2
 8000b48:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <uart_init+0x22c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <uart_init+0x22c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b56:	2201      	movs	r2, #1
 8000b58:	4908      	ldr	r1, [pc, #32]	; (8000b7c <uart_init+0x230>)
 8000b5a:	4807      	ldr	r0, [pc, #28]	; (8000b78 <uart_init+0x22c>)
 8000b5c:	f7ff fdb6 	bl	80006cc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000b60:	2026      	movs	r0, #38	; 0x26
 8000b62:	f7ff fe5f 	bl	8000824 <NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	; 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000002c 	.word	0x2000002c
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	00050105 	.word	0x00050105

08000b80 <sinus>:
int32_t expand(int32_t i) {
// Converts an 18.14 fixed point number to 16.16
	return i << 2;
}

int32_t sinus(int32_t i) {
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	//input int i out 16.16 tal/fixpoint
	if (i < 0) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da08      	bge.n	8000ba0 <sinus+0x20>
		return -SIN[-i & 0x1FF];
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	425b      	negs	r3, r3
 8000b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <sinus+0x38>)
 8000b98:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	e005      	b.n	8000bac <sinus+0x2c>
	} else {
		return SIN[i & 0x1FF];
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <sinus+0x38>)
 8000ba8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
	}
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	0800275c 	.word	0x0800275c

08000bbc <cosinus>:

int32_t cosinus(int32_t i) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	i += 128;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3380      	adds	r3, #128	; 0x80
 8000bc8:	607b      	str	r3, [r7, #4]
	//input int i out 16.16 tal/fixpoint
	if (i < 0) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	da08      	bge.n	8000be2 <cosinus+0x26>
		return -SIN[-i & 0x1FF];
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	425b      	negs	r3, r3
 8000bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bd8:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <cosinus+0x40>)
 8000bda:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bde:	425b      	negs	r3, r3
 8000be0:	e005      	b.n	8000bee <cosinus+0x32>
	} else {
		return SIN[i & 0x1FF];
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <cosinus+0x40>)
 8000bea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
	}
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	0800275c 	.word	0x0800275c

08000c00 <windowSmp>:
		printf("%c", btt);
	}
	printf("%c\n", br);
}

void windowSmp(int x1, int y1, int x2, int y2) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	603b      	str	r3, [r7, #0]

		int tl = 218; 	// ┌
 8000c0e:	23da      	movs	r3, #218	; 0xda
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
		int lsd = 180; 	// ┤
 8000c12:	23b4      	movs	r3, #180	; 0xb4
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
		int bl = 192;	// └
 8000c16:	23c0      	movs	r3, #192	; 0xc0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
		int wll = 179;	// │
 8000c1a:	23b3      	movs	r3, #179	; 0xb3
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
		int btt = 196; 	// ─
 8000c1e:	23c4      	movs	r3, #196	; 0xc4
 8000c20:	623b      	str	r3, [r7, #32]
		int tr = 191; 	// ┐
 8000c22:	23bf      	movs	r3, #191	; 0xbf
 8000c24:	61fb      	str	r3, [r7, #28]
		int rsd = 195;	// ├
 8000c26:	23c3      	movs	r3, #195	; 0xc3
 8000c28:	61bb      	str	r3, [r7, #24]
		int br = 217;	// ┘
 8000c2a:	23d9      	movs	r3, #217	; 0xd9
 8000c2c:	617b      	str	r3, [r7, #20]

		//Top ┌──────┐
		gotoxy(x1, y1);
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f000 f925 	bl	8000e80 <gotoxy>
		printf("%c", tl);
 8000c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c38:	f000 fcc4 	bl	80015c4 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c42:	e005      	b.n	8000c50 <windowSmp+0x50>
			printf("%c",btt);
 8000c44:	6a38      	ldr	r0, [r7, #32]
 8000c46:	f000 fcbd 	bl	80015c4 <putchar>
		for (int i=x1+1;i<x2-1;i++){
 8000c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbf4      	blt.n	8000c44 <windowSmp+0x44>
		}


		printf("%c\n", tr);
 8000c5a:	69f9      	ldr	r1, [r7, #28]
 8000c5c:	481d      	ldr	r0, [pc, #116]	; (8000cd4 <windowSmp+0xd4>)
 8000c5e:	f000 fc99 	bl	8001594 <iprintf>

		//Mid │        │
		for (int i = y1+1; i < y2; i++) {
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	3301      	adds	r3, #1
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c68:	e012      	b.n	8000c90 <windowSmp+0x90>
			gotoxy(x1, i);
 8000c6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f000 f907 	bl	8000e80 <gotoxy>
			printf("%c", wll);
 8000c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c74:	f000 fca6 	bl	80015c4 <putchar>
			gotoxy(x2-1,i);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f8fe 	bl	8000e80 <gotoxy>
			printf("%c", wll);
 8000c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c86:	f000 fc9d 	bl	80015c4 <putchar>
		for (int i = y1+1; i < y2; i++) {
 8000c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbe8      	blt.n	8000c6a <windowSmp+0x6a>
		}

		//Bottom  └─────────┘
		gotoxy(x1,y2);
 8000c98:	6839      	ldr	r1, [r7, #0]
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 f8f0 	bl	8000e80 <gotoxy>
		printf("%c", bl);
 8000ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ca2:	f000 fc8f 	bl	80015c4 <putchar>
		for (int i=x1; i < x2-2; i++){
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8000caa:	e005      	b.n	8000cb8 <windowSmp+0xb8>
			printf("%c", btt);
 8000cac:	6a38      	ldr	r0, [r7, #32]
 8000cae:	f000 fc89 	bl	80015c4 <putchar>
		for (int i=x1; i < x2-2; i++){
 8000cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dbf4      	blt.n	8000cac <windowSmp+0xac>
		}
		printf("%c\n", br);
 8000cc2:	6979      	ldr	r1, [r7, #20]
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <windowSmp+0xd4>)
 8000cc6:	f000 fc65 	bl	8001594 <iprintf>
	}
 8000cca:	bf00      	nop
 8000ccc:	3740      	adds	r7, #64	; 0x40
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	080026b4 	.word	0x080026b4

08000cd8 <windowBall>:

void windowBall(boarder b, char s[], ball_st *o) {
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b097      	sub	sp, #92	; 0x5c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	463c      	mov	r4, r7
 8000ce0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int length = strlen(s);
 8000ce4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000ce6:	f7ff fa73 	bl	80001d0 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	643b      	str	r3, [r7, #64]	; 0x40
	int hit = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c

	int32_t x1 = b.x1;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t y1 = b.y1;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t x2 = b.x2;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	657b      	str	r3, [r7, #84]	; 0x54
	int32_t y2 = b.y2;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	653b      	str	r3, [r7, #80]	; 0x50


	int tl = 201; 	// ╔
 8000d02:	23c9      	movs	r3, #201	; 0xc9
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
	int lsd = 185; 	// ╣
 8000d06:	23b9      	movs	r3, #185	; 0xb9
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
	int bl = 200;	// ╚
 8000d0a:	23c8      	movs	r3, #200	; 0xc8
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	int wll = 186;	// ║
 8000d0e:	23ba      	movs	r3, #186	; 0xba
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
	int btt = 205; 	// ═
 8000d12:	23cd      	movs	r3, #205	; 0xcd
 8000d14:	623b      	str	r3, [r7, #32]
	int tr = 187; 	// ╗
 8000d16:	23bb      	movs	r3, #187	; 0xbb
 8000d18:	61fb      	str	r3, [r7, #28]
	int rsd = 204;	// ╠
 8000d1a:	23cc      	movs	r3, #204	; 0xcc
 8000d1c:	61bb      	str	r3, [r7, #24]
	int br = 188;	// ╝
 8000d1e:	23bc      	movs	r3, #188	; 0xbc
 8000d20:	617b      	str	r3, [r7, #20]


	if (x2 < length + 6 | x2 < y1) {
 8000d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d24:	3305      	adds	r3, #5
 8000d26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	bfd4      	ite	le
 8000d2c:	2301      	movle	r3, #1
 8000d2e:	2300      	movgt	r3, #0
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d36:	4299      	cmp	r1, r3
 8000d38:	bfb4      	ite	lt
 8000d3a:	2301      	movlt	r3, #1
 8000d3c:	2300      	movge	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d004      	beq.n	8000d52 <windowBall+0x7a>
		x2 = x1 + length + 6;
 8000d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3306      	adds	r3, #6
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
	}
	if (y2 < y1) {
 8000d52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d56:	429a      	cmp	r2, r3
 8000d58:	da02      	bge.n	8000d60 <windowBall+0x88>
		y2 = y1 + 1;
 8000d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	653b      	str	r3, [r7, #80]	; 0x50
	}


	blink(0);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 f89f 	bl	8000ea4 <blink>
	//Debug
	//printf("\n\nx1:%d, y1:%d\nx2:%d, y2:%d\nString:%s Len:%d\n", x1, y1, x2, y2,s, length);


	//Top ┌┤ Text ├┐
	gotoxy(x1, y1);
 8000d66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d6a:	f000 f889 	bl	8000e80 <gotoxy>
	printf("%c%c", tl, lsd);
 8000d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d72:	482d      	ldr	r0, [pc, #180]	; (8000e28 <windowBall+0x150>)
 8000d74:	f000 fc0e 	bl	8001594 <iprintf>
	blink(1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f000 f893 	bl	8000ea4 <blink>
		printf("%c%s%c", 32, s, 32);
 8000d7e:	2320      	movs	r3, #32
 8000d80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d82:	2120      	movs	r1, #32
 8000d84:	4829      	ldr	r0, [pc, #164]	; (8000e2c <windowBall+0x154>)
 8000d86:	f000 fc05 	bl	8001594 <iprintf>
		for (int i = x1; i < x2 - length - 5; i++) {
 8000d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d8e:	e005      	b.n	8000d9c <windowBall+0xc4>
			printf("%c", 32);
 8000d90:	2020      	movs	r0, #32
 8000d92:	f000 fc17 	bl	80015c4 <putchar>
		for (int i = x1; i < x2 - length - 5; i++) {
 8000d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d98:	3301      	adds	r3, #1
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	3b05      	subs	r3, #5
 8000da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dbf2      	blt.n	8000d90 <windowBall+0xb8>
		}
	blink(0);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f87a 	bl	8000ea4 <blink>
	printf("%c%c\n", rsd, tr);
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	69b9      	ldr	r1, [r7, #24]
 8000db4:	481e      	ldr	r0, [pc, #120]	; (8000e30 <windowBall+0x158>)
 8000db6:	f000 fbed 	bl	8001594 <iprintf>

	//Mid │        │
	for (int i = y1+1; i < y2; i++) {
 8000dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8000dc0:	e010      	b.n	8000de4 <windowBall+0x10c>
		gotoxy(x1, i);
 8000dc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000dc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000dc6:	f000 f85b 	bl	8000e80 <gotoxy>
		printf("%c", wll);
 8000dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dcc:	f000 fbfa 	bl	80015c4 <putchar>
		gotoxy(x2, i);
 8000dd0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000dd2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000dd4:	f000 f854 	bl	8000e80 <gotoxy>
		printf("%c", wll);
 8000dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dda:	f000 fbf3 	bl	80015c4 <putchar>
	for (int i = y1+1; i < y2; i++) {
 8000dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000de0:	3301      	adds	r3, #1
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8000de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbea      	blt.n	8000dc2 <windowBall+0xea>
	}

	//Bottom  └─────────┘
	gotoxy(x1,y2);
 8000dec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000dee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000df0:	f000 f846 	bl	8000e80 <gotoxy>
	printf("%c", bl);
 8000df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000df6:	f000 fbe5 	bl	80015c4 <putchar>
	for (int i=x1; i <= x2-2; i++){
 8000dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8000dfe:	e005      	b.n	8000e0c <windowBall+0x134>
		printf("%c", btt);
 8000e00:	6a38      	ldr	r0, [r7, #32]
 8000e02:	f000 fbdf 	bl	80015c4 <putchar>
	for (int i=x1; i <= x2-2; i++){
 8000e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e08:	3301      	adds	r3, #1
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8000e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbf4      	blt.n	8000e00 <windowBall+0x128>
	}
	printf("%c\n", br);
 8000e16:	6979      	ldr	r1, [r7, #20]
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <windowBall+0x15c>)
 8000e1a:	f000 fbbb 	bl	8001594 <iprintf>

}
 8000e1e:	bf00      	nop
 8000e20:	375c      	adds	r7, #92	; 0x5c
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	0800269c 	.word	0x0800269c
 8000e2c:	080026a4 	.word	0x080026a4
 8000e30:	080026ac 	.word	0x080026ac
 8000e34:	080026b4 	.word	0x080026b4

08000e38 <resetbgcolor>:
		foreground -= 8;
	}
	printf("%c[%d;%d;%dm", ESC, type, foreground + 30, background + 40);
}

void resetbgcolor() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
 8000e3c:	211b      	movs	r1, #27
 8000e3e:	4802      	ldr	r0, [pc, #8]	; (8000e48 <resetbgcolor+0x10>)
 8000e40:	f000 fba8 	bl	8001594 <iprintf>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	080026dc 	.word	0x080026dc

08000e4c <clrscr>:

void clrscr() {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <clrscr+0x28>)
 8000e52:	211b      	movs	r1, #27
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <clrscr+0x2c>)
 8000e56:	f000 fb9d 	bl	8001594 <iprintf>
	printf("%c[%s", ESC, "3J");
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <clrscr+0x30>)
 8000e5c:	211b      	movs	r1, #27
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <clrscr+0x2c>)
 8000e60:	f000 fb98 	bl	8001594 <iprintf>
	resetbgcolor();
 8000e64:	f7ff ffe8 	bl	8000e38 <resetbgcolor>

	gotoxy(0, 0);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <gotoxy>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	080026e4 	.word	0x080026e4
 8000e78:	080026e8 	.word	0x080026e8
 8000e7c:	080026f0 	.word	0x080026f0

08000e80 <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	211b      	movs	r1, #27
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <gotoxy+0x20>)
 8000e92:	f000 fb7f 	bl	8001594 <iprintf>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	080026f8 	.word	0x080026f8

08000ea4 <blink>:
		//printf("\x1b[24m");
		printf("%c[%dm", ESC, 24);
	}
}

void blink(int state) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	if (state) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00a      	beq.n	8000ec8 <blink+0x24>
		//printf("\x1b[5m");
		printf("%c[%dm", ESC, 5);
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	211b      	movs	r1, #27
 8000eb6:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <blink+0x40>)
 8000eb8:	f000 fb6c 	bl	8001594 <iprintf>
		printf("%c[%dm", ESC, 7);
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	211b      	movs	r1, #27
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <blink+0x40>)
 8000ec2:	f000 fb67 	bl	8001594 <iprintf>
	} else {
		//printf("\x1b[25m");
		printf("%c[%dm", ESC, 25);
		printf("%c[%dm", ESC, 27);
	}
}
 8000ec6:	e009      	b.n	8000edc <blink+0x38>
		printf("%c[%dm", ESC, 25);
 8000ec8:	2219      	movs	r2, #25
 8000eca:	211b      	movs	r1, #27
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <blink+0x40>)
 8000ece:	f000 fb61 	bl	8001594 <iprintf>
		printf("%c[%dm", ESC, 27);
 8000ed2:	221b      	movs	r2, #27
 8000ed4:	211b      	movs	r1, #27
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <blink+0x40>)
 8000ed8:	f000 fb5c 	bl	8001594 <iprintf>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	080026c4 	.word	0x080026c4

08000ee8 <rotateBall>:
	o -> vY = 0;
	o -> hit = 0;
}


void rotateBall(ball_st *vec, int32_t angle) {
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	int32_t x = vec -> vX;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	60fb      	str	r3, [r7, #12]
	int32_t y = vec -> vY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]

	vec -> vX = FIX14_MULTI(x, cosinus(angle)) - FIX14_MULTI(y, sinus(angle));
 8000efe:	6838      	ldr	r0, [r7, #0]
 8000f00:	f7ff fe5c 	bl	8000bbc <cosinus>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	fb03 f302 	mul.w	r3, r3, r2
 8000f0c:	139c      	asrs	r4, r3, #14
 8000f0e:	6838      	ldr	r0, [r7, #0]
 8000f10:	f7ff fe36 	bl	8000b80 <sinus>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	fb03 f302 	mul.w	r3, r3, r2
 8000f1c:	139b      	asrs	r3, r3, #14
 8000f1e:	1ae2      	subs	r2, r4, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
	vec -> vY = FIX14_MULTI(x, sinus(angle)) + FIX14_MULTI(y, cosinus(angle));
 8000f24:	6838      	ldr	r0, [r7, #0]
 8000f26:	f7ff fe2b 	bl	8000b80 <sinus>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	fb03 f302 	mul.w	r3, r3, r2
 8000f32:	139c      	asrs	r4, r3, #14
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f7ff fe41 	bl	8000bbc <cosinus>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	fb03 f302 	mul.w	r3, r3, r2
 8000f42:	139b      	asrs	r3, r3, #14
 8000f44:	18e2      	adds	r2, r4, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60da      	str	r2, [r3, #12]
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
	...

08000f54 <ballMove>:

void ballMove(ball_st *o, boarder b){
 8000f54:	b084      	sub	sp, #16
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b088      	sub	sp, #32
 8000f5a:	af02      	add	r7, sp, #8
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int8_t posX = o->pX;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	75fb      	strb	r3, [r7, #23]
	int8_t posY = o->pY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	75bb      	strb	r3, [r7, #22]
	static int32_t x;
	static int32_t y;

	int16_t x1 = b.x1+2;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	3302      	adds	r3, #2
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	82bb      	strh	r3, [r7, #20]
	int16_t y1 = b.y1+2;
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3302      	adds	r3, #2
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	827b      	strh	r3, [r7, #18]
	int16_t x2 = b.x2-2;
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3b02      	subs	r3, #2
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	823b      	strh	r3, [r7, #16]
	int16_t y2 = b.y2-2;
 8000f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3b02      	subs	r3, #2
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	81fb      	strh	r3, [r7, #14]

// 2,2,111,36


	if(posX <= x1 || posX >= x2){
 8000f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	da06      	bge.n	8000fb6 <ballMove+0x62>
 8000fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dc20      	bgt.n	8000ff8 <ballMove+0xa4>
		if(posY <= y1 || posY >= y2){
 8000fb6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	da06      	bge.n	8000fd2 <ballMove+0x7e>
 8000fc4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dc12      	bgt.n	8000ff8 <ballMove+0xa4>
			rotateBall(o, 256);
 8000fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff86 	bl	8000ee8 <rotateBall>

			o->hit = o-> hit +2;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	1c9a      	adds	r2, r3, #2
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	611a      	str	r2, [r3, #16]
			updateHit(o->hit, b);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6918      	ldr	r0, [r3, #16]
 8000fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff4:	f000 f8ae 	bl	8001154 <updateHit>
		}
	}

	if (posX < x1 || posX > x2 || posY < y1 || posY > y2){
 8000ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001002:	429a      	cmp	r2, r3
 8001004:	dc14      	bgt.n	8001030 <ballMove+0xdc>
 8001006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800100a:	b21b      	sxth	r3, r3
 800100c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	db0d      	blt.n	8001030 <ballMove+0xdc>
 8001014:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001018:	b21b      	sxth	r3, r3
 800101a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800101e:	429a      	cmp	r2, r3
 8001020:	dc06      	bgt.n	8001030 <ballMove+0xdc>
 8001022:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001026:	b21b      	sxth	r3, r3
 8001028:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800102c:	429a      	cmp	r2, r3
 800102e:	da6e      	bge.n	800110e <ballMove+0x1ba>

		if(posY >= y2 && x>0 || posX >= x2 && y<0 || posY <= y1 && x<0 || posX <=x1 && y>0){
 8001030:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001034:	b21b      	sxth	r3, r3
 8001036:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800103a:	429a      	cmp	r2, r3
 800103c:	dc03      	bgt.n	8001046 <ballMove+0xf2>
 800103e:	4b43      	ldr	r3, [pc, #268]	; (800114c <ballMove+0x1f8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	dc20      	bgt.n	8001088 <ballMove+0x134>
 8001046:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800104a:	b21b      	sxth	r3, r3
 800104c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	dc03      	bgt.n	800105c <ballMove+0x108>
 8001054:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <ballMove+0x1fc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db15      	blt.n	8001088 <ballMove+0x134>
 800105c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001060:	b21b      	sxth	r3, r3
 8001062:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001066:	429a      	cmp	r2, r3
 8001068:	db03      	blt.n	8001072 <ballMove+0x11e>
 800106a:	4b38      	ldr	r3, [pc, #224]	; (800114c <ballMove+0x1f8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0a      	blt.n	8001088 <ballMove+0x134>
 8001072:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001076:	b21b      	sxth	r3, r3
 8001078:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	db08      	blt.n	8001092 <ballMove+0x13e>
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <ballMove+0x1fc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	dd04      	ble.n	8001092 <ballMove+0x13e>
			rotateBall(o, -128);
 8001088:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff2b 	bl	8000ee8 <rotateBall>
		}

		if(posY <= y1 && x>0 || posY >= y2 && x<0 || posX >= x2 && y>0 || posX <=x1 && y<0){
 8001092:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001096:	b21b      	sxth	r3, r3
 8001098:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800109c:	429a      	cmp	r2, r3
 800109e:	db03      	blt.n	80010a8 <ballMove+0x154>
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <ballMove+0x1f8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dc20      	bgt.n	80010ea <ballMove+0x196>
 80010a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dc03      	bgt.n	80010be <ballMove+0x16a>
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <ballMove+0x1f8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db15      	blt.n	80010ea <ballMove+0x196>
 80010be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dc03      	bgt.n	80010d4 <ballMove+0x180>
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <ballMove+0x1fc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc0a      	bgt.n	80010ea <ballMove+0x196>
 80010d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80010de:	429a      	cmp	r2, r3
 80010e0:	db07      	blt.n	80010f2 <ballMove+0x19e>
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <ballMove+0x1fc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da03      	bge.n	80010f2 <ballMove+0x19e>
			rotateBall(o, 128);
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fefb 	bl	8000ee8 <rotateBall>
		}

		o->hit = o-> hit + 1;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	611a      	str	r2, [r3, #16]
		updateHit(o->hit, b);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6918      	ldr	r0, [r3, #16]
 8001100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800110a:	f000 f823 	bl	8001154 <updateHit>
*/




	x = o -> vX >> 14;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	139b      	asrs	r3, r3, #14
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <ballMove+0x1f8>)
 8001116:	6013      	str	r3, [r2, #0]
	y = o -> vY >> 14;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	139b      	asrs	r3, r3, #14
 800111e:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <ballMove+0x1fc>)
 8001120:	6013      	str	r3, [r2, #0]

	o -> pX = o->pX + x;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <ballMove+0x1f8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	441a      	add	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	601a      	str	r2, [r3, #0]
	o -> pY = o->pY + y;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <ballMove+0x1fc>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	441a      	add	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	605a      	str	r2, [r3, #4]

	}
*/


}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001148:	b004      	add	sp, #16
 800114a:	4770      	bx	lr
 800114c:	200001b0 	.word	0x200001b0
 8001150:	200001b4 	.word	0x200001b4

08001154 <updateHit>:

void updateHit(int x, boarder b){
 8001154:	b084      	sub	sp, #16
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int xm, ym;

	int16_t x1 = b.x1;
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	82fb      	strh	r3, [r7, #22]
	int16_t y1 = b.y1;
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	82bb      	strh	r3, [r7, #20]
	int16_t x2 = b.x2;
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	827b      	strh	r3, [r7, #18]
	int16_t y2 = b.y2;
 8001172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001174:	823b      	strh	r3, [r7, #16]

	xm = (x1+x2)/2;
 8001176:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800117a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800117e:	4413      	add	r3, r2
 8001180:	0fda      	lsrs	r2, r3, #31
 8001182:	4413      	add	r3, r2
 8001184:	105b      	asrs	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
	ym = (y1+y2)/2;
 8001188:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800118c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001190:	4413      	add	r3, r2
 8001192:	0fda      	lsrs	r2, r3, #31
 8001194:	4413      	add	r3, r2
 8001196:	105b      	asrs	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]

	gotoxy(xm,ym);
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fe6f 	bl	8000e80 <gotoxy>
	printf("%c",43);
 80011a2:	202b      	movs	r0, #43	; 0x2b
 80011a4:	f000 fa0e 	bl	80015c4 <putchar>

	gotoxy(xm-4,ym);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3b04      	subs	r3, #4
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fe66 	bl	8000e80 <gotoxy>
	printf("Hits: %03d",x);
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	480a      	ldr	r0, [pc, #40]	; (80011e0 <updateHit+0x8c>)
 80011b8:	f000 f9ec 	bl	8001594 <iprintf>

	windowSmp(xm-5,ym-1,xm+6,ym+1);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1f58      	subs	r0, r3, #5
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1e59      	subs	r1, r3, #1
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1d9a      	adds	r2, r3, #6
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	3301      	adds	r3, #1
 80011cc:	f7ff fd18 	bl	8000c00 <windowSmp>
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011da:	b004      	add	sp, #16
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	08002704 	.word	0x08002704

080011e4 <ballDraw>:




void ballDraw(ball_st o){
 80011e4:	b084      	sub	sp, #16
 80011e6:	b580      	push	{r7, lr}
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	f107 0c08 	add.w	ip, r7, #8
 80011ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static int A, B;

	gotoxy(A,B);
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <ballDraw+0x50>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <ballDraw+0x54>)
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe3f 	bl	8000e80 <gotoxy>
	printf("%c",250);
 8001202:	20fa      	movs	r0, #250	; 0xfa
 8001204:	f000 f9de 	bl	80015c4 <putchar>

	gotoxy(o.pX,o.pY);
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fe36 	bl	8000e80 <gotoxy>
	printf("%c",111);
 8001214:	206f      	movs	r0, #111	; 0x6f
 8001216:	f000 f9d5 	bl	80015c4 <putchar>

	A = o.pX;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <ballDraw+0x50>)
 800121e:	6013      	str	r3, [r2, #0]
	B = o.pY;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <ballDraw+0x54>)
 8001224:	6013      	str	r3, [r2, #0]

}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800122e:	b004      	add	sp, #16
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200001b8 	.word	0x200001b8
 8001238:	200001bc 	.word	0x200001bc

0800123c <main>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "ansi.h"


int main(void) {
 800123c:	b5b0      	push	{r4, r5, r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af02      	add	r7, sp, #8

	// Setup communication with the PC
	uart_init(9600);
 8001242:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001246:	f7ff fb81 	bl	800094c <uart_init>
		rotateVector(&v, angle);
		printVec(v, angle);
	}
*/

	clrscr();
 800124a:	f7ff fdff 	bl	8000e4c <clrscr>

	boarder b = {2,2,110,36};
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <main+0x70>)
 8001250:	f107 0418 	add.w	r4, r7, #24
 8001254:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	windowBall(b,"Ball");
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <main+0x74>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001264:	f7ff fd38 	bl	8000cd8 <windowBall>

	ball_st o = {5,5, 1 << FIX14_SHIFT, 1 << FIX14_SHIFT, 0};
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <main+0x78>)
 800126a:	1d3c      	adds	r4, r7, #4
 800126c:	461d      	mov	r5, r3
 800126e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001272:	682b      	ldr	r3, [r5, #0]
 8001274:	6023      	str	r3, [r4, #0]

	int32_t angle = 128;
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28

	//rotateBall(&o, angle);
	//ballDebug(o);

	int i =0;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c


	while (1) {
		ballMove(&o, b);
 800127e:	1d38      	adds	r0, r7, #4
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800128a:	f7ff fe63 	bl	8000f54 <ballMove>
		ballDraw(o);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001296:	f7ff ffa5 	bl	80011e4 <ballDraw>

		//ballDebug(o);


		if (i >= 1){
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	2b00      	cmp	r3, #0
 800129e:	dd01      	ble.n	80012a4 <main+0x68>

			i = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		i++;
 80012a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a6:	3301      	adds	r3, #1
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
 80012aa:	e7e8      	b.n	800127e <main+0x42>
 80012ac:	08002738 	.word	0x08002738
 80012b0:	08002730 	.word	0x08002730
 80012b4:	08002748 	.word	0x08002748

080012b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e00a      	b.n	80012e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ca:	f3af 8000 	nop.w
 80012ce:	4601      	mov	r1, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	60ba      	str	r2, [r7, #8]
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf0      	blt.n	80012ca <_read+0x12>
	}

return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131a:	605a      	str	r2, [r3, #4]
	return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_isatty>:

int _isatty(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
	return 1;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x50>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x16>
		heap_end = &end;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <_sbrk+0x50>)
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_sbrk+0x54>)
 8001370:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <_sbrk+0x50>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <_sbrk+0x50>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	466a      	mov	r2, sp
 8001382:	4293      	cmp	r3, r2
 8001384:	d907      	bls.n	8001396 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001386:	f000 f8d3 	bl	8001530 <__errno>
 800138a:	4603      	mov	r3, r0
 800138c:	220c      	movs	r2, #12
 800138e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	e006      	b.n	80013a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <_sbrk+0x50>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a03      	ldr	r2, [pc, #12]	; (80013ac <_sbrk+0x50>)
 80013a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200001c0 	.word	0x200001c0
 80013b0:	200001e0 	.word	0x200001e0

080013b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <SystemInit+0x84>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <SystemInit+0x84>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <SystemInit+0x88>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <SystemInit+0x88>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <SystemInit+0x88>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4918      	ldr	r1, [pc, #96]	; (800143c <SystemInit+0x88>)
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <SystemInit+0x8c>)
 80013dc:	4013      	ands	r3, r2
 80013de:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <SystemInit+0x88>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a15      	ldr	r2, [pc, #84]	; (800143c <SystemInit+0x88>)
 80013e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <SystemInit+0x88>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <SystemInit+0x88>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <SystemInit+0x88>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <SystemInit+0x88>)
 8001402:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001406:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <SystemInit+0x88>)
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <SystemInit+0x88>)
 800140e:	f023 030f 	bic.w	r3, r3, #15
 8001412:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <SystemInit+0x88>)
 8001416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001418:	4908      	ldr	r1, [pc, #32]	; (800143c <SystemInit+0x88>)
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <SystemInit+0x90>)
 800141c:	4013      	ands	r3, r2
 800141e:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <SystemInit+0x88>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001426:	f000 f80f 	bl	8001448 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800142a:	4b03      	ldr	r3, [pc, #12]	; (8001438 <SystemInit+0x84>)
 800142c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001430:	609a      	str	r2, [r3, #8]
#endif  
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00
 800143c:	40021000 	.word	0x40021000
 8001440:	f87fc00c 	.word	0xf87fc00c
 8001444:	ff00fccc 	.word	0xff00fccc

08001448 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800144c:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <SetSysClock+0x8c>)
 800144e:	2212      	movs	r2, #18
 8001450:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <SetSysClock+0x90>)
 8001454:	4a20      	ldr	r2, [pc, #128]	; (80014d8 <SetSysClock+0x90>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <SetSysClock+0x90>)
 800145c:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <SetSysClock+0x90>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <SetSysClock+0x90>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <SetSysClock+0x90>)
 8001468:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <SetSysClock+0x90>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <SetSysClock+0x90>)
 8001474:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001478:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <SetSysClock+0x90>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <SetSysClock+0x90>)
 8001480:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001484:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <SetSysClock+0x90>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <SetSysClock+0x90>)
 800148c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001490:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001492:	bf00      	nop
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <SetSysClock+0x90>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f9      	beq.n	8001494 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <SetSysClock+0x90>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <SetSysClock+0x90>)
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <SetSysClock+0x90>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <SetSysClock+0x90>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80014b8:	bf00      	nop
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <SetSysClock+0x90>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d1f9      	bne.n	80014ba <SetSysClock+0x72>
  {
  }
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000
 80014d8:	40021000 	.word	0x40021000

080014dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e2:	490e      	ldr	r1, [pc, #56]	; (800151c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <LoopForever+0xe>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f8:	4c0b      	ldr	r4, [pc, #44]	; (8001528 <LoopForever+0x16>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001506:	f7ff ff55 	bl	80013b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800150a:	f000 f817 	bl	800153c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150e:	f7ff fe95 	bl	800123c <main>

08001512 <LoopForever>:

LoopForever:
    b LoopForever
 8001512:	e7fe      	b.n	8001512 <LoopForever>
  ldr   r0, =_estack
 8001514:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001520:	08002bfc 	.word	0x08002bfc
  ldr r2, =_sbss
 8001524:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001528:	200001dc 	.word	0x200001dc

0800152c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC1_2_IRQHandler>
	...

08001530 <__errno>:
 8001530:	4b01      	ldr	r3, [pc, #4]	; (8001538 <__errno+0x8>)
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000002c 	.word	0x2000002c

0800153c <__libc_init_array>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	4d0d      	ldr	r5, [pc, #52]	; (8001574 <__libc_init_array+0x38>)
 8001540:	4c0d      	ldr	r4, [pc, #52]	; (8001578 <__libc_init_array+0x3c>)
 8001542:	1b64      	subs	r4, r4, r5
 8001544:	10a4      	asrs	r4, r4, #2
 8001546:	2600      	movs	r6, #0
 8001548:	42a6      	cmp	r6, r4
 800154a:	d109      	bne.n	8001560 <__libc_init_array+0x24>
 800154c:	4d0b      	ldr	r5, [pc, #44]	; (800157c <__libc_init_array+0x40>)
 800154e:	4c0c      	ldr	r4, [pc, #48]	; (8001580 <__libc_init_array+0x44>)
 8001550:	f001 f898 	bl	8002684 <_init>
 8001554:	1b64      	subs	r4, r4, r5
 8001556:	10a4      	asrs	r4, r4, #2
 8001558:	2600      	movs	r6, #0
 800155a:	42a6      	cmp	r6, r4
 800155c:	d105      	bne.n	800156a <__libc_init_array+0x2e>
 800155e:	bd70      	pop	{r4, r5, r6, pc}
 8001560:	f855 3b04 	ldr.w	r3, [r5], #4
 8001564:	4798      	blx	r3
 8001566:	3601      	adds	r6, #1
 8001568:	e7ee      	b.n	8001548 <__libc_init_array+0xc>
 800156a:	f855 3b04 	ldr.w	r3, [r5], #4
 800156e:	4798      	blx	r3
 8001570:	3601      	adds	r6, #1
 8001572:	e7f2      	b.n	800155a <__libc_init_array+0x1e>
 8001574:	08002bf4 	.word	0x08002bf4
 8001578:	08002bf4 	.word	0x08002bf4
 800157c:	08002bf4 	.word	0x08002bf4
 8001580:	08002bf8 	.word	0x08002bf8

08001584 <memset>:
 8001584:	4402      	add	r2, r0
 8001586:	4603      	mov	r3, r0
 8001588:	4293      	cmp	r3, r2
 800158a:	d100      	bne.n	800158e <memset+0xa>
 800158c:	4770      	bx	lr
 800158e:	f803 1b01 	strb.w	r1, [r3], #1
 8001592:	e7f9      	b.n	8001588 <memset+0x4>

08001594 <iprintf>:
 8001594:	b40f      	push	{r0, r1, r2, r3}
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <iprintf+0x2c>)
 8001598:	b513      	push	{r0, r1, r4, lr}
 800159a:	681c      	ldr	r4, [r3, #0]
 800159c:	b124      	cbz	r4, 80015a8 <iprintf+0x14>
 800159e:	69a3      	ldr	r3, [r4, #24]
 80015a0:	b913      	cbnz	r3, 80015a8 <iprintf+0x14>
 80015a2:	4620      	mov	r0, r4
 80015a4:	f000 fa0c 	bl	80019c0 <__sinit>
 80015a8:	ab05      	add	r3, sp, #20
 80015aa:	9a04      	ldr	r2, [sp, #16]
 80015ac:	68a1      	ldr	r1, [r4, #8]
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	4620      	mov	r0, r4
 80015b2:	f000 fbe5 	bl	8001d80 <_vfiprintf_r>
 80015b6:	b002      	add	sp, #8
 80015b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015bc:	b004      	add	sp, #16
 80015be:	4770      	bx	lr
 80015c0:	2000002c 	.word	0x2000002c

080015c4 <putchar>:
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <putchar+0x28>)
 80015c6:	b513      	push	{r0, r1, r4, lr}
 80015c8:	681c      	ldr	r4, [r3, #0]
 80015ca:	4601      	mov	r1, r0
 80015cc:	b134      	cbz	r4, 80015dc <putchar+0x18>
 80015ce:	69a3      	ldr	r3, [r4, #24]
 80015d0:	b923      	cbnz	r3, 80015dc <putchar+0x18>
 80015d2:	9001      	str	r0, [sp, #4]
 80015d4:	4620      	mov	r0, r4
 80015d6:	f000 f9f3 	bl	80019c0 <__sinit>
 80015da:	9901      	ldr	r1, [sp, #4]
 80015dc:	68a2      	ldr	r2, [r4, #8]
 80015de:	4620      	mov	r0, r4
 80015e0:	b002      	add	sp, #8
 80015e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015e6:	f000 be8f 	b.w	8002308 <_putc_r>
 80015ea:	bf00      	nop
 80015ec:	2000002c 	.word	0x2000002c

080015f0 <setbuf>:
 80015f0:	2900      	cmp	r1, #0
 80015f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f6:	bf0c      	ite	eq
 80015f8:	2202      	moveq	r2, #2
 80015fa:	2200      	movne	r2, #0
 80015fc:	f000 b800 	b.w	8001600 <setvbuf>

08001600 <setvbuf>:
 8001600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001604:	461d      	mov	r5, r3
 8001606:	4b5d      	ldr	r3, [pc, #372]	; (800177c <setvbuf+0x17c>)
 8001608:	681f      	ldr	r7, [r3, #0]
 800160a:	4604      	mov	r4, r0
 800160c:	460e      	mov	r6, r1
 800160e:	4690      	mov	r8, r2
 8001610:	b127      	cbz	r7, 800161c <setvbuf+0x1c>
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	b913      	cbnz	r3, 800161c <setvbuf+0x1c>
 8001616:	4638      	mov	r0, r7
 8001618:	f000 f9d2 	bl	80019c0 <__sinit>
 800161c:	4b58      	ldr	r3, [pc, #352]	; (8001780 <setvbuf+0x180>)
 800161e:	429c      	cmp	r4, r3
 8001620:	d167      	bne.n	80016f2 <setvbuf+0xf2>
 8001622:	687c      	ldr	r4, [r7, #4]
 8001624:	f1b8 0f02 	cmp.w	r8, #2
 8001628:	d006      	beq.n	8001638 <setvbuf+0x38>
 800162a:	f1b8 0f01 	cmp.w	r8, #1
 800162e:	f200 809f 	bhi.w	8001770 <setvbuf+0x170>
 8001632:	2d00      	cmp	r5, #0
 8001634:	f2c0 809c 	blt.w	8001770 <setvbuf+0x170>
 8001638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800163a:	07db      	lsls	r3, r3, #31
 800163c:	d405      	bmi.n	800164a <setvbuf+0x4a>
 800163e:	89a3      	ldrh	r3, [r4, #12]
 8001640:	0598      	lsls	r0, r3, #22
 8001642:	d402      	bmi.n	800164a <setvbuf+0x4a>
 8001644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001646:	f000 fa59 	bl	8001afc <__retarget_lock_acquire_recursive>
 800164a:	4621      	mov	r1, r4
 800164c:	4638      	mov	r0, r7
 800164e:	f000 f923 	bl	8001898 <_fflush_r>
 8001652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001654:	b141      	cbz	r1, 8001668 <setvbuf+0x68>
 8001656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800165a:	4299      	cmp	r1, r3
 800165c:	d002      	beq.n	8001664 <setvbuf+0x64>
 800165e:	4638      	mov	r0, r7
 8001660:	f000 faba 	bl	8001bd8 <_free_r>
 8001664:	2300      	movs	r3, #0
 8001666:	6363      	str	r3, [r4, #52]	; 0x34
 8001668:	2300      	movs	r3, #0
 800166a:	61a3      	str	r3, [r4, #24]
 800166c:	6063      	str	r3, [r4, #4]
 800166e:	89a3      	ldrh	r3, [r4, #12]
 8001670:	0619      	lsls	r1, r3, #24
 8001672:	d503      	bpl.n	800167c <setvbuf+0x7c>
 8001674:	6921      	ldr	r1, [r4, #16]
 8001676:	4638      	mov	r0, r7
 8001678:	f000 faae 	bl	8001bd8 <_free_r>
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001682:	f023 0303 	bic.w	r3, r3, #3
 8001686:	f1b8 0f02 	cmp.w	r8, #2
 800168a:	81a3      	strh	r3, [r4, #12]
 800168c:	d06c      	beq.n	8001768 <setvbuf+0x168>
 800168e:	ab01      	add	r3, sp, #4
 8001690:	466a      	mov	r2, sp
 8001692:	4621      	mov	r1, r4
 8001694:	4638      	mov	r0, r7
 8001696:	f000 fa33 	bl	8001b00 <__swhatbuf_r>
 800169a:	89a3      	ldrh	r3, [r4, #12]
 800169c:	4318      	orrs	r0, r3
 800169e:	81a0      	strh	r0, [r4, #12]
 80016a0:	2d00      	cmp	r5, #0
 80016a2:	d130      	bne.n	8001706 <setvbuf+0x106>
 80016a4:	9d00      	ldr	r5, [sp, #0]
 80016a6:	4628      	mov	r0, r5
 80016a8:	f000 fa8e 	bl	8001bc8 <malloc>
 80016ac:	4606      	mov	r6, r0
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d155      	bne.n	800175e <setvbuf+0x15e>
 80016b2:	f8dd 9000 	ldr.w	r9, [sp]
 80016b6:	45a9      	cmp	r9, r5
 80016b8:	d14a      	bne.n	8001750 <setvbuf+0x150>
 80016ba:	f04f 35ff 	mov.w	r5, #4294967295
 80016be:	2200      	movs	r2, #0
 80016c0:	60a2      	str	r2, [r4, #8]
 80016c2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80016c6:	6022      	str	r2, [r4, #0]
 80016c8:	6122      	str	r2, [r4, #16]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016d0:	6162      	str	r2, [r4, #20]
 80016d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	07d2      	lsls	r2, r2, #31
 80016da:	81a3      	strh	r3, [r4, #12]
 80016dc:	d405      	bmi.n	80016ea <setvbuf+0xea>
 80016de:	f413 7f00 	tst.w	r3, #512	; 0x200
 80016e2:	d102      	bne.n	80016ea <setvbuf+0xea>
 80016e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016e6:	f000 fa0a 	bl	8001afe <__retarget_lock_release_recursive>
 80016ea:	4628      	mov	r0, r5
 80016ec:	b003      	add	sp, #12
 80016ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <setvbuf+0x184>)
 80016f4:	429c      	cmp	r4, r3
 80016f6:	d101      	bne.n	80016fc <setvbuf+0xfc>
 80016f8:	68bc      	ldr	r4, [r7, #8]
 80016fa:	e793      	b.n	8001624 <setvbuf+0x24>
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <setvbuf+0x188>)
 80016fe:	429c      	cmp	r4, r3
 8001700:	bf08      	it	eq
 8001702:	68fc      	ldreq	r4, [r7, #12]
 8001704:	e78e      	b.n	8001624 <setvbuf+0x24>
 8001706:	2e00      	cmp	r6, #0
 8001708:	d0cd      	beq.n	80016a6 <setvbuf+0xa6>
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	b913      	cbnz	r3, 8001714 <setvbuf+0x114>
 800170e:	4638      	mov	r0, r7
 8001710:	f000 f956 	bl	80019c0 <__sinit>
 8001714:	f1b8 0f01 	cmp.w	r8, #1
 8001718:	bf08      	it	eq
 800171a:	89a3      	ldrheq	r3, [r4, #12]
 800171c:	6026      	str	r6, [r4, #0]
 800171e:	bf04      	itt	eq
 8001720:	f043 0301 	orreq.w	r3, r3, #1
 8001724:	81a3      	strheq	r3, [r4, #12]
 8001726:	89a2      	ldrh	r2, [r4, #12]
 8001728:	f012 0308 	ands.w	r3, r2, #8
 800172c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001730:	d01c      	beq.n	800176c <setvbuf+0x16c>
 8001732:	07d3      	lsls	r3, r2, #31
 8001734:	bf41      	itttt	mi
 8001736:	2300      	movmi	r3, #0
 8001738:	426d      	negmi	r5, r5
 800173a:	60a3      	strmi	r3, [r4, #8]
 800173c:	61a5      	strmi	r5, [r4, #24]
 800173e:	bf58      	it	pl
 8001740:	60a5      	strpl	r5, [r4, #8]
 8001742:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001744:	f015 0501 	ands.w	r5, r5, #1
 8001748:	d115      	bne.n	8001776 <setvbuf+0x176>
 800174a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800174e:	e7c8      	b.n	80016e2 <setvbuf+0xe2>
 8001750:	4648      	mov	r0, r9
 8001752:	f000 fa39 	bl	8001bc8 <malloc>
 8001756:	4606      	mov	r6, r0
 8001758:	2800      	cmp	r0, #0
 800175a:	d0ae      	beq.n	80016ba <setvbuf+0xba>
 800175c:	464d      	mov	r5, r9
 800175e:	89a3      	ldrh	r3, [r4, #12]
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	81a3      	strh	r3, [r4, #12]
 8001766:	e7d0      	b.n	800170a <setvbuf+0x10a>
 8001768:	2500      	movs	r5, #0
 800176a:	e7a8      	b.n	80016be <setvbuf+0xbe>
 800176c:	60a3      	str	r3, [r4, #8]
 800176e:	e7e8      	b.n	8001742 <setvbuf+0x142>
 8001770:	f04f 35ff 	mov.w	r5, #4294967295
 8001774:	e7b9      	b.n	80016ea <setvbuf+0xea>
 8001776:	2500      	movs	r5, #0
 8001778:	e7b7      	b.n	80016ea <setvbuf+0xea>
 800177a:	bf00      	nop
 800177c:	2000002c 	.word	0x2000002c
 8001780:	08002b80 	.word	0x08002b80
 8001784:	08002ba0 	.word	0x08002ba0
 8001788:	08002b60 	.word	0x08002b60

0800178c <__sflush_r>:
 800178c:	898a      	ldrh	r2, [r1, #12]
 800178e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001792:	4605      	mov	r5, r0
 8001794:	0710      	lsls	r0, r2, #28
 8001796:	460c      	mov	r4, r1
 8001798:	d458      	bmi.n	800184c <__sflush_r+0xc0>
 800179a:	684b      	ldr	r3, [r1, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	dc05      	bgt.n	80017ac <__sflush_r+0x20>
 80017a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	dc02      	bgt.n	80017ac <__sflush_r+0x20>
 80017a6:	2000      	movs	r0, #0
 80017a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017ae:	2e00      	cmp	r6, #0
 80017b0:	d0f9      	beq.n	80017a6 <__sflush_r+0x1a>
 80017b2:	2300      	movs	r3, #0
 80017b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017b8:	682f      	ldr	r7, [r5, #0]
 80017ba:	602b      	str	r3, [r5, #0]
 80017bc:	d032      	beq.n	8001824 <__sflush_r+0x98>
 80017be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017c0:	89a3      	ldrh	r3, [r4, #12]
 80017c2:	075a      	lsls	r2, r3, #29
 80017c4:	d505      	bpl.n	80017d2 <__sflush_r+0x46>
 80017c6:	6863      	ldr	r3, [r4, #4]
 80017c8:	1ac0      	subs	r0, r0, r3
 80017ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017cc:	b10b      	cbz	r3, 80017d2 <__sflush_r+0x46>
 80017ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017d0:	1ac0      	subs	r0, r0, r3
 80017d2:	2300      	movs	r3, #0
 80017d4:	4602      	mov	r2, r0
 80017d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017d8:	6a21      	ldr	r1, [r4, #32]
 80017da:	4628      	mov	r0, r5
 80017dc:	47b0      	blx	r6
 80017de:	1c43      	adds	r3, r0, #1
 80017e0:	89a3      	ldrh	r3, [r4, #12]
 80017e2:	d106      	bne.n	80017f2 <__sflush_r+0x66>
 80017e4:	6829      	ldr	r1, [r5, #0]
 80017e6:	291d      	cmp	r1, #29
 80017e8:	d82c      	bhi.n	8001844 <__sflush_r+0xb8>
 80017ea:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <__sflush_r+0x108>)
 80017ec:	40ca      	lsrs	r2, r1
 80017ee:	07d6      	lsls	r6, r2, #31
 80017f0:	d528      	bpl.n	8001844 <__sflush_r+0xb8>
 80017f2:	2200      	movs	r2, #0
 80017f4:	6062      	str	r2, [r4, #4]
 80017f6:	04d9      	lsls	r1, r3, #19
 80017f8:	6922      	ldr	r2, [r4, #16]
 80017fa:	6022      	str	r2, [r4, #0]
 80017fc:	d504      	bpl.n	8001808 <__sflush_r+0x7c>
 80017fe:	1c42      	adds	r2, r0, #1
 8001800:	d101      	bne.n	8001806 <__sflush_r+0x7a>
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	b903      	cbnz	r3, 8001808 <__sflush_r+0x7c>
 8001806:	6560      	str	r0, [r4, #84]	; 0x54
 8001808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800180a:	602f      	str	r7, [r5, #0]
 800180c:	2900      	cmp	r1, #0
 800180e:	d0ca      	beq.n	80017a6 <__sflush_r+0x1a>
 8001810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001814:	4299      	cmp	r1, r3
 8001816:	d002      	beq.n	800181e <__sflush_r+0x92>
 8001818:	4628      	mov	r0, r5
 800181a:	f000 f9dd 	bl	8001bd8 <_free_r>
 800181e:	2000      	movs	r0, #0
 8001820:	6360      	str	r0, [r4, #52]	; 0x34
 8001822:	e7c1      	b.n	80017a8 <__sflush_r+0x1c>
 8001824:	6a21      	ldr	r1, [r4, #32]
 8001826:	2301      	movs	r3, #1
 8001828:	4628      	mov	r0, r5
 800182a:	47b0      	blx	r6
 800182c:	1c41      	adds	r1, r0, #1
 800182e:	d1c7      	bne.n	80017c0 <__sflush_r+0x34>
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0c4      	beq.n	80017c0 <__sflush_r+0x34>
 8001836:	2b1d      	cmp	r3, #29
 8001838:	d001      	beq.n	800183e <__sflush_r+0xb2>
 800183a:	2b16      	cmp	r3, #22
 800183c:	d101      	bne.n	8001842 <__sflush_r+0xb6>
 800183e:	602f      	str	r7, [r5, #0]
 8001840:	e7b1      	b.n	80017a6 <__sflush_r+0x1a>
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001848:	81a3      	strh	r3, [r4, #12]
 800184a:	e7ad      	b.n	80017a8 <__sflush_r+0x1c>
 800184c:	690f      	ldr	r7, [r1, #16]
 800184e:	2f00      	cmp	r7, #0
 8001850:	d0a9      	beq.n	80017a6 <__sflush_r+0x1a>
 8001852:	0793      	lsls	r3, r2, #30
 8001854:	680e      	ldr	r6, [r1, #0]
 8001856:	bf08      	it	eq
 8001858:	694b      	ldreq	r3, [r1, #20]
 800185a:	600f      	str	r7, [r1, #0]
 800185c:	bf18      	it	ne
 800185e:	2300      	movne	r3, #0
 8001860:	eba6 0807 	sub.w	r8, r6, r7
 8001864:	608b      	str	r3, [r1, #8]
 8001866:	f1b8 0f00 	cmp.w	r8, #0
 800186a:	dd9c      	ble.n	80017a6 <__sflush_r+0x1a>
 800186c:	6a21      	ldr	r1, [r4, #32]
 800186e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001870:	4643      	mov	r3, r8
 8001872:	463a      	mov	r2, r7
 8001874:	4628      	mov	r0, r5
 8001876:	47b0      	blx	r6
 8001878:	2800      	cmp	r0, #0
 800187a:	dc06      	bgt.n	800188a <__sflush_r+0xfe>
 800187c:	89a3      	ldrh	r3, [r4, #12]
 800187e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001882:	81a3      	strh	r3, [r4, #12]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	e78e      	b.n	80017a8 <__sflush_r+0x1c>
 800188a:	4407      	add	r7, r0
 800188c:	eba8 0800 	sub.w	r8, r8, r0
 8001890:	e7e9      	b.n	8001866 <__sflush_r+0xda>
 8001892:	bf00      	nop
 8001894:	20400001 	.word	0x20400001

08001898 <_fflush_r>:
 8001898:	b538      	push	{r3, r4, r5, lr}
 800189a:	690b      	ldr	r3, [r1, #16]
 800189c:	4605      	mov	r5, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	b913      	cbnz	r3, 80018a8 <_fflush_r+0x10>
 80018a2:	2500      	movs	r5, #0
 80018a4:	4628      	mov	r0, r5
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
 80018a8:	b118      	cbz	r0, 80018b2 <_fflush_r+0x1a>
 80018aa:	6983      	ldr	r3, [r0, #24]
 80018ac:	b90b      	cbnz	r3, 80018b2 <_fflush_r+0x1a>
 80018ae:	f000 f887 	bl	80019c0 <__sinit>
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <_fflush_r+0x6c>)
 80018b4:	429c      	cmp	r4, r3
 80018b6:	d11b      	bne.n	80018f0 <_fflush_r+0x58>
 80018b8:	686c      	ldr	r4, [r5, #4]
 80018ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0ef      	beq.n	80018a2 <_fflush_r+0xa>
 80018c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80018c4:	07d0      	lsls	r0, r2, #31
 80018c6:	d404      	bmi.n	80018d2 <_fflush_r+0x3a>
 80018c8:	0599      	lsls	r1, r3, #22
 80018ca:	d402      	bmi.n	80018d2 <_fflush_r+0x3a>
 80018cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018ce:	f000 f915 	bl	8001afc <__retarget_lock_acquire_recursive>
 80018d2:	4628      	mov	r0, r5
 80018d4:	4621      	mov	r1, r4
 80018d6:	f7ff ff59 	bl	800178c <__sflush_r>
 80018da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018dc:	07da      	lsls	r2, r3, #31
 80018de:	4605      	mov	r5, r0
 80018e0:	d4e0      	bmi.n	80018a4 <_fflush_r+0xc>
 80018e2:	89a3      	ldrh	r3, [r4, #12]
 80018e4:	059b      	lsls	r3, r3, #22
 80018e6:	d4dd      	bmi.n	80018a4 <_fflush_r+0xc>
 80018e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018ea:	f000 f908 	bl	8001afe <__retarget_lock_release_recursive>
 80018ee:	e7d9      	b.n	80018a4 <_fflush_r+0xc>
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <_fflush_r+0x70>)
 80018f2:	429c      	cmp	r4, r3
 80018f4:	d101      	bne.n	80018fa <_fflush_r+0x62>
 80018f6:	68ac      	ldr	r4, [r5, #8]
 80018f8:	e7df      	b.n	80018ba <_fflush_r+0x22>
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <_fflush_r+0x74>)
 80018fc:	429c      	cmp	r4, r3
 80018fe:	bf08      	it	eq
 8001900:	68ec      	ldreq	r4, [r5, #12]
 8001902:	e7da      	b.n	80018ba <_fflush_r+0x22>
 8001904:	08002b80 	.word	0x08002b80
 8001908:	08002ba0 	.word	0x08002ba0
 800190c:	08002b60 	.word	0x08002b60

08001910 <std>:
 8001910:	2300      	movs	r3, #0
 8001912:	b510      	push	{r4, lr}
 8001914:	4604      	mov	r4, r0
 8001916:	e9c0 3300 	strd	r3, r3, [r0]
 800191a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800191e:	6083      	str	r3, [r0, #8]
 8001920:	8181      	strh	r1, [r0, #12]
 8001922:	6643      	str	r3, [r0, #100]	; 0x64
 8001924:	81c2      	strh	r2, [r0, #14]
 8001926:	6183      	str	r3, [r0, #24]
 8001928:	4619      	mov	r1, r3
 800192a:	2208      	movs	r2, #8
 800192c:	305c      	adds	r0, #92	; 0x5c
 800192e:	f7ff fe29 	bl	8001584 <memset>
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <std+0x38>)
 8001934:	6263      	str	r3, [r4, #36]	; 0x24
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <std+0x3c>)
 8001938:	62a3      	str	r3, [r4, #40]	; 0x28
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <std+0x40>)
 800193c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <std+0x44>)
 8001940:	6224      	str	r4, [r4, #32]
 8001942:	6323      	str	r3, [r4, #48]	; 0x30
 8001944:	bd10      	pop	{r4, pc}
 8001946:	bf00      	nop
 8001948:	080023b9 	.word	0x080023b9
 800194c:	080023db 	.word	0x080023db
 8001950:	08002413 	.word	0x08002413
 8001954:	08002437 	.word	0x08002437

08001958 <_cleanup_r>:
 8001958:	4901      	ldr	r1, [pc, #4]	; (8001960 <_cleanup_r+0x8>)
 800195a:	f000 b8af 	b.w	8001abc <_fwalk_reent>
 800195e:	bf00      	nop
 8001960:	08001899 	.word	0x08001899

08001964 <__sfmoreglue>:
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	1e4a      	subs	r2, r1, #1
 8001968:	2568      	movs	r5, #104	; 0x68
 800196a:	4355      	muls	r5, r2
 800196c:	460e      	mov	r6, r1
 800196e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001972:	f000 f981 	bl	8001c78 <_malloc_r>
 8001976:	4604      	mov	r4, r0
 8001978:	b140      	cbz	r0, 800198c <__sfmoreglue+0x28>
 800197a:	2100      	movs	r1, #0
 800197c:	e9c0 1600 	strd	r1, r6, [r0]
 8001980:	300c      	adds	r0, #12
 8001982:	60a0      	str	r0, [r4, #8]
 8001984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001988:	f7ff fdfc 	bl	8001584 <memset>
 800198c:	4620      	mov	r0, r4
 800198e:	bd70      	pop	{r4, r5, r6, pc}

08001990 <__sfp_lock_acquire>:
 8001990:	4801      	ldr	r0, [pc, #4]	; (8001998 <__sfp_lock_acquire+0x8>)
 8001992:	f000 b8b3 	b.w	8001afc <__retarget_lock_acquire_recursive>
 8001996:	bf00      	nop
 8001998:	200001d4 	.word	0x200001d4

0800199c <__sfp_lock_release>:
 800199c:	4801      	ldr	r0, [pc, #4]	; (80019a4 <__sfp_lock_release+0x8>)
 800199e:	f000 b8ae 	b.w	8001afe <__retarget_lock_release_recursive>
 80019a2:	bf00      	nop
 80019a4:	200001d4 	.word	0x200001d4

080019a8 <__sinit_lock_acquire>:
 80019a8:	4801      	ldr	r0, [pc, #4]	; (80019b0 <__sinit_lock_acquire+0x8>)
 80019aa:	f000 b8a7 	b.w	8001afc <__retarget_lock_acquire_recursive>
 80019ae:	bf00      	nop
 80019b0:	200001cf 	.word	0x200001cf

080019b4 <__sinit_lock_release>:
 80019b4:	4801      	ldr	r0, [pc, #4]	; (80019bc <__sinit_lock_release+0x8>)
 80019b6:	f000 b8a2 	b.w	8001afe <__retarget_lock_release_recursive>
 80019ba:	bf00      	nop
 80019bc:	200001cf 	.word	0x200001cf

080019c0 <__sinit>:
 80019c0:	b510      	push	{r4, lr}
 80019c2:	4604      	mov	r4, r0
 80019c4:	f7ff fff0 	bl	80019a8 <__sinit_lock_acquire>
 80019c8:	69a3      	ldr	r3, [r4, #24]
 80019ca:	b11b      	cbz	r3, 80019d4 <__sinit+0x14>
 80019cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019d0:	f7ff bff0 	b.w	80019b4 <__sinit_lock_release>
 80019d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80019d8:	6523      	str	r3, [r4, #80]	; 0x50
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <__sinit+0x68>)
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <__sinit+0x6c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80019e2:	42a3      	cmp	r3, r4
 80019e4:	bf04      	itt	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	61a3      	streq	r3, [r4, #24]
 80019ea:	4620      	mov	r0, r4
 80019ec:	f000 f820 	bl	8001a30 <__sfp>
 80019f0:	6060      	str	r0, [r4, #4]
 80019f2:	4620      	mov	r0, r4
 80019f4:	f000 f81c 	bl	8001a30 <__sfp>
 80019f8:	60a0      	str	r0, [r4, #8]
 80019fa:	4620      	mov	r0, r4
 80019fc:	f000 f818 	bl	8001a30 <__sfp>
 8001a00:	2200      	movs	r2, #0
 8001a02:	60e0      	str	r0, [r4, #12]
 8001a04:	2104      	movs	r1, #4
 8001a06:	6860      	ldr	r0, [r4, #4]
 8001a08:	f7ff ff82 	bl	8001910 <std>
 8001a0c:	68a0      	ldr	r0, [r4, #8]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2109      	movs	r1, #9
 8001a12:	f7ff ff7d 	bl	8001910 <std>
 8001a16:	68e0      	ldr	r0, [r4, #12]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	2112      	movs	r1, #18
 8001a1c:	f7ff ff78 	bl	8001910 <std>
 8001a20:	2301      	movs	r3, #1
 8001a22:	61a3      	str	r3, [r4, #24]
 8001a24:	e7d2      	b.n	80019cc <__sinit+0xc>
 8001a26:	bf00      	nop
 8001a28:	08002b5c 	.word	0x08002b5c
 8001a2c:	08001959 	.word	0x08001959

08001a30 <__sfp>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	4607      	mov	r7, r0
 8001a34:	f7ff ffac 	bl	8001990 <__sfp_lock_acquire>
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <__sfp+0x84>)
 8001a3a:	681e      	ldr	r6, [r3, #0]
 8001a3c:	69b3      	ldr	r3, [r6, #24]
 8001a3e:	b913      	cbnz	r3, 8001a46 <__sfp+0x16>
 8001a40:	4630      	mov	r0, r6
 8001a42:	f7ff ffbd 	bl	80019c0 <__sinit>
 8001a46:	3648      	adds	r6, #72	; 0x48
 8001a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	d503      	bpl.n	8001a58 <__sfp+0x28>
 8001a50:	6833      	ldr	r3, [r6, #0]
 8001a52:	b30b      	cbz	r3, 8001a98 <__sfp+0x68>
 8001a54:	6836      	ldr	r6, [r6, #0]
 8001a56:	e7f7      	b.n	8001a48 <__sfp+0x18>
 8001a58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a5c:	b9d5      	cbnz	r5, 8001a94 <__sfp+0x64>
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <__sfp+0x88>)
 8001a60:	60e3      	str	r3, [r4, #12]
 8001a62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a66:	6665      	str	r5, [r4, #100]	; 0x64
 8001a68:	f000 f847 	bl	8001afa <__retarget_lock_init_recursive>
 8001a6c:	f7ff ff96 	bl	800199c <__sfp_lock_release>
 8001a70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a78:	6025      	str	r5, [r4, #0]
 8001a7a:	61a5      	str	r5, [r4, #24]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	4629      	mov	r1, r5
 8001a80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a84:	f7ff fd7e 	bl	8001584 <memset>
 8001a88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a90:	4620      	mov	r0, r4
 8001a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a94:	3468      	adds	r4, #104	; 0x68
 8001a96:	e7d9      	b.n	8001a4c <__sfp+0x1c>
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	f7ff ff62 	bl	8001964 <__sfmoreglue>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	6030      	str	r0, [r6, #0]
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	d1d5      	bne.n	8001a54 <__sfp+0x24>
 8001aa8:	f7ff ff78 	bl	800199c <__sfp_lock_release>
 8001aac:	230c      	movs	r3, #12
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	e7ee      	b.n	8001a90 <__sfp+0x60>
 8001ab2:	bf00      	nop
 8001ab4:	08002b5c 	.word	0x08002b5c
 8001ab8:	ffff0001 	.word	0xffff0001

08001abc <_fwalk_reent>:
 8001abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ac0:	4606      	mov	r6, r0
 8001ac2:	4688      	mov	r8, r1
 8001ac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ac8:	2700      	movs	r7, #0
 8001aca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ace:	f1b9 0901 	subs.w	r9, r9, #1
 8001ad2:	d505      	bpl.n	8001ae0 <_fwalk_reent+0x24>
 8001ad4:	6824      	ldr	r4, [r4, #0]
 8001ad6:	2c00      	cmp	r4, #0
 8001ad8:	d1f7      	bne.n	8001aca <_fwalk_reent+0xe>
 8001ada:	4638      	mov	r0, r7
 8001adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ae0:	89ab      	ldrh	r3, [r5, #12]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d907      	bls.n	8001af6 <_fwalk_reent+0x3a>
 8001ae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001aea:	3301      	adds	r3, #1
 8001aec:	d003      	beq.n	8001af6 <_fwalk_reent+0x3a>
 8001aee:	4629      	mov	r1, r5
 8001af0:	4630      	mov	r0, r6
 8001af2:	47c0      	blx	r8
 8001af4:	4307      	orrs	r7, r0
 8001af6:	3568      	adds	r5, #104	; 0x68
 8001af8:	e7e9      	b.n	8001ace <_fwalk_reent+0x12>

08001afa <__retarget_lock_init_recursive>:
 8001afa:	4770      	bx	lr

08001afc <__retarget_lock_acquire_recursive>:
 8001afc:	4770      	bx	lr

08001afe <__retarget_lock_release_recursive>:
 8001afe:	4770      	bx	lr

08001b00 <__swhatbuf_r>:
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	460e      	mov	r6, r1
 8001b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b08:	2900      	cmp	r1, #0
 8001b0a:	b096      	sub	sp, #88	; 0x58
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	da07      	bge.n	8001b22 <__swhatbuf_r+0x22>
 8001b12:	2300      	movs	r3, #0
 8001b14:	602b      	str	r3, [r5, #0]
 8001b16:	89b3      	ldrh	r3, [r6, #12]
 8001b18:	061a      	lsls	r2, r3, #24
 8001b1a:	d410      	bmi.n	8001b3e <__swhatbuf_r+0x3e>
 8001b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b20:	e00e      	b.n	8001b40 <__swhatbuf_r+0x40>
 8001b22:	466a      	mov	r2, sp
 8001b24:	f000 fd5c 	bl	80025e0 <_fstat_r>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	dbf2      	blt.n	8001b12 <__swhatbuf_r+0x12>
 8001b2c:	9a01      	ldr	r2, [sp, #4]
 8001b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b36:	425a      	negs	r2, r3
 8001b38:	415a      	adcs	r2, r3
 8001b3a:	602a      	str	r2, [r5, #0]
 8001b3c:	e7ee      	b.n	8001b1c <__swhatbuf_r+0x1c>
 8001b3e:	2340      	movs	r3, #64	; 0x40
 8001b40:	2000      	movs	r0, #0
 8001b42:	6023      	str	r3, [r4, #0]
 8001b44:	b016      	add	sp, #88	; 0x58
 8001b46:	bd70      	pop	{r4, r5, r6, pc}

08001b48 <__smakebuf_r>:
 8001b48:	898b      	ldrh	r3, [r1, #12]
 8001b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b4c:	079d      	lsls	r5, r3, #30
 8001b4e:	4606      	mov	r6, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	d507      	bpl.n	8001b64 <__smakebuf_r+0x1c>
 8001b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b58:	6023      	str	r3, [r4, #0]
 8001b5a:	6123      	str	r3, [r4, #16]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	6163      	str	r3, [r4, #20]
 8001b60:	b002      	add	sp, #8
 8001b62:	bd70      	pop	{r4, r5, r6, pc}
 8001b64:	ab01      	add	r3, sp, #4
 8001b66:	466a      	mov	r2, sp
 8001b68:	f7ff ffca 	bl	8001b00 <__swhatbuf_r>
 8001b6c:	9900      	ldr	r1, [sp, #0]
 8001b6e:	4605      	mov	r5, r0
 8001b70:	4630      	mov	r0, r6
 8001b72:	f000 f881 	bl	8001c78 <_malloc_r>
 8001b76:	b948      	cbnz	r0, 8001b8c <__smakebuf_r+0x44>
 8001b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b7c:	059a      	lsls	r2, r3, #22
 8001b7e:	d4ef      	bmi.n	8001b60 <__smakebuf_r+0x18>
 8001b80:	f023 0303 	bic.w	r3, r3, #3
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	81a3      	strh	r3, [r4, #12]
 8001b8a:	e7e3      	b.n	8001b54 <__smakebuf_r+0xc>
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <__smakebuf_r+0x7c>)
 8001b8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b90:	89a3      	ldrh	r3, [r4, #12]
 8001b92:	6020      	str	r0, [r4, #0]
 8001b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b98:	81a3      	strh	r3, [r4, #12]
 8001b9a:	9b00      	ldr	r3, [sp, #0]
 8001b9c:	6163      	str	r3, [r4, #20]
 8001b9e:	9b01      	ldr	r3, [sp, #4]
 8001ba0:	6120      	str	r0, [r4, #16]
 8001ba2:	b15b      	cbz	r3, 8001bbc <__smakebuf_r+0x74>
 8001ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ba8:	4630      	mov	r0, r6
 8001baa:	f000 fd2b 	bl	8002604 <_isatty_r>
 8001bae:	b128      	cbz	r0, 8001bbc <__smakebuf_r+0x74>
 8001bb0:	89a3      	ldrh	r3, [r4, #12]
 8001bb2:	f023 0303 	bic.w	r3, r3, #3
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	81a3      	strh	r3, [r4, #12]
 8001bbc:	89a0      	ldrh	r0, [r4, #12]
 8001bbe:	4305      	orrs	r5, r0
 8001bc0:	81a5      	strh	r5, [r4, #12]
 8001bc2:	e7cd      	b.n	8001b60 <__smakebuf_r+0x18>
 8001bc4:	08001959 	.word	0x08001959

08001bc8 <malloc>:
 8001bc8:	4b02      	ldr	r3, [pc, #8]	; (8001bd4 <malloc+0xc>)
 8001bca:	4601      	mov	r1, r0
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	f000 b853 	b.w	8001c78 <_malloc_r>
 8001bd2:	bf00      	nop
 8001bd4:	2000002c 	.word	0x2000002c

08001bd8 <_free_r>:
 8001bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bda:	2900      	cmp	r1, #0
 8001bdc:	d048      	beq.n	8001c70 <_free_r+0x98>
 8001bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001be2:	9001      	str	r0, [sp, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f1a1 0404 	sub.w	r4, r1, #4
 8001bea:	bfb8      	it	lt
 8001bec:	18e4      	addlt	r4, r4, r3
 8001bee:	f000 fd2b 	bl	8002648 <__malloc_lock>
 8001bf2:	4a20      	ldr	r2, [pc, #128]	; (8001c74 <_free_r+0x9c>)
 8001bf4:	9801      	ldr	r0, [sp, #4]
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	4615      	mov	r5, r2
 8001bfa:	b933      	cbnz	r3, 8001c0a <_free_r+0x32>
 8001bfc:	6063      	str	r3, [r4, #4]
 8001bfe:	6014      	str	r4, [r2, #0]
 8001c00:	b003      	add	sp, #12
 8001c02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c06:	f000 bd25 	b.w	8002654 <__malloc_unlock>
 8001c0a:	42a3      	cmp	r3, r4
 8001c0c:	d90b      	bls.n	8001c26 <_free_r+0x4e>
 8001c0e:	6821      	ldr	r1, [r4, #0]
 8001c10:	1862      	adds	r2, r4, r1
 8001c12:	4293      	cmp	r3, r2
 8001c14:	bf04      	itt	eq
 8001c16:	681a      	ldreq	r2, [r3, #0]
 8001c18:	685b      	ldreq	r3, [r3, #4]
 8001c1a:	6063      	str	r3, [r4, #4]
 8001c1c:	bf04      	itt	eq
 8001c1e:	1852      	addeq	r2, r2, r1
 8001c20:	6022      	streq	r2, [r4, #0]
 8001c22:	602c      	str	r4, [r5, #0]
 8001c24:	e7ec      	b.n	8001c00 <_free_r+0x28>
 8001c26:	461a      	mov	r2, r3
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	b10b      	cbz	r3, 8001c30 <_free_r+0x58>
 8001c2c:	42a3      	cmp	r3, r4
 8001c2e:	d9fa      	bls.n	8001c26 <_free_r+0x4e>
 8001c30:	6811      	ldr	r1, [r2, #0]
 8001c32:	1855      	adds	r5, r2, r1
 8001c34:	42a5      	cmp	r5, r4
 8001c36:	d10b      	bne.n	8001c50 <_free_r+0x78>
 8001c38:	6824      	ldr	r4, [r4, #0]
 8001c3a:	4421      	add	r1, r4
 8001c3c:	1854      	adds	r4, r2, r1
 8001c3e:	42a3      	cmp	r3, r4
 8001c40:	6011      	str	r1, [r2, #0]
 8001c42:	d1dd      	bne.n	8001c00 <_free_r+0x28>
 8001c44:	681c      	ldr	r4, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	6053      	str	r3, [r2, #4]
 8001c4a:	4421      	add	r1, r4
 8001c4c:	6011      	str	r1, [r2, #0]
 8001c4e:	e7d7      	b.n	8001c00 <_free_r+0x28>
 8001c50:	d902      	bls.n	8001c58 <_free_r+0x80>
 8001c52:	230c      	movs	r3, #12
 8001c54:	6003      	str	r3, [r0, #0]
 8001c56:	e7d3      	b.n	8001c00 <_free_r+0x28>
 8001c58:	6825      	ldr	r5, [r4, #0]
 8001c5a:	1961      	adds	r1, r4, r5
 8001c5c:	428b      	cmp	r3, r1
 8001c5e:	bf04      	itt	eq
 8001c60:	6819      	ldreq	r1, [r3, #0]
 8001c62:	685b      	ldreq	r3, [r3, #4]
 8001c64:	6063      	str	r3, [r4, #4]
 8001c66:	bf04      	itt	eq
 8001c68:	1949      	addeq	r1, r1, r5
 8001c6a:	6021      	streq	r1, [r4, #0]
 8001c6c:	6054      	str	r4, [r2, #4]
 8001c6e:	e7c7      	b.n	8001c00 <_free_r+0x28>
 8001c70:	b003      	add	sp, #12
 8001c72:	bd30      	pop	{r4, r5, pc}
 8001c74:	200001c4 	.word	0x200001c4

08001c78 <_malloc_r>:
 8001c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7a:	1ccd      	adds	r5, r1, #3
 8001c7c:	f025 0503 	bic.w	r5, r5, #3
 8001c80:	3508      	adds	r5, #8
 8001c82:	2d0c      	cmp	r5, #12
 8001c84:	bf38      	it	cc
 8001c86:	250c      	movcc	r5, #12
 8001c88:	2d00      	cmp	r5, #0
 8001c8a:	4606      	mov	r6, r0
 8001c8c:	db01      	blt.n	8001c92 <_malloc_r+0x1a>
 8001c8e:	42a9      	cmp	r1, r5
 8001c90:	d903      	bls.n	8001c9a <_malloc_r+0x22>
 8001c92:	230c      	movs	r3, #12
 8001c94:	6033      	str	r3, [r6, #0]
 8001c96:	2000      	movs	r0, #0
 8001c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c9a:	f000 fcd5 	bl	8002648 <__malloc_lock>
 8001c9e:	4921      	ldr	r1, [pc, #132]	; (8001d24 <_malloc_r+0xac>)
 8001ca0:	680a      	ldr	r2, [r1, #0]
 8001ca2:	4614      	mov	r4, r2
 8001ca4:	b99c      	cbnz	r4, 8001cce <_malloc_r+0x56>
 8001ca6:	4f20      	ldr	r7, [pc, #128]	; (8001d28 <_malloc_r+0xb0>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b923      	cbnz	r3, 8001cb6 <_malloc_r+0x3e>
 8001cac:	4621      	mov	r1, r4
 8001cae:	4630      	mov	r0, r6
 8001cb0:	f000 fb72 	bl	8002398 <_sbrk_r>
 8001cb4:	6038      	str	r0, [r7, #0]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f000 fb6d 	bl	8002398 <_sbrk_r>
 8001cbe:	1c43      	adds	r3, r0, #1
 8001cc0:	d123      	bne.n	8001d0a <_malloc_r+0x92>
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	6033      	str	r3, [r6, #0]
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	f000 fcc4 	bl	8002654 <__malloc_unlock>
 8001ccc:	e7e3      	b.n	8001c96 <_malloc_r+0x1e>
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	1b5b      	subs	r3, r3, r5
 8001cd2:	d417      	bmi.n	8001d04 <_malloc_r+0x8c>
 8001cd4:	2b0b      	cmp	r3, #11
 8001cd6:	d903      	bls.n	8001ce0 <_malloc_r+0x68>
 8001cd8:	6023      	str	r3, [r4, #0]
 8001cda:	441c      	add	r4, r3
 8001cdc:	6025      	str	r5, [r4, #0]
 8001cde:	e004      	b.n	8001cea <_malloc_r+0x72>
 8001ce0:	6863      	ldr	r3, [r4, #4]
 8001ce2:	42a2      	cmp	r2, r4
 8001ce4:	bf0c      	ite	eq
 8001ce6:	600b      	streq	r3, [r1, #0]
 8001ce8:	6053      	strne	r3, [r2, #4]
 8001cea:	4630      	mov	r0, r6
 8001cec:	f000 fcb2 	bl	8002654 <__malloc_unlock>
 8001cf0:	f104 000b 	add.w	r0, r4, #11
 8001cf4:	1d23      	adds	r3, r4, #4
 8001cf6:	f020 0007 	bic.w	r0, r0, #7
 8001cfa:	1ac2      	subs	r2, r0, r3
 8001cfc:	d0cc      	beq.n	8001c98 <_malloc_r+0x20>
 8001cfe:	1a1b      	subs	r3, r3, r0
 8001d00:	50a3      	str	r3, [r4, r2]
 8001d02:	e7c9      	b.n	8001c98 <_malloc_r+0x20>
 8001d04:	4622      	mov	r2, r4
 8001d06:	6864      	ldr	r4, [r4, #4]
 8001d08:	e7cc      	b.n	8001ca4 <_malloc_r+0x2c>
 8001d0a:	1cc4      	adds	r4, r0, #3
 8001d0c:	f024 0403 	bic.w	r4, r4, #3
 8001d10:	42a0      	cmp	r0, r4
 8001d12:	d0e3      	beq.n	8001cdc <_malloc_r+0x64>
 8001d14:	1a21      	subs	r1, r4, r0
 8001d16:	4630      	mov	r0, r6
 8001d18:	f000 fb3e 	bl	8002398 <_sbrk_r>
 8001d1c:	3001      	adds	r0, #1
 8001d1e:	d1dd      	bne.n	8001cdc <_malloc_r+0x64>
 8001d20:	e7cf      	b.n	8001cc2 <_malloc_r+0x4a>
 8001d22:	bf00      	nop
 8001d24:	200001c4 	.word	0x200001c4
 8001d28:	200001c8 	.word	0x200001c8

08001d2c <__sfputc_r>:
 8001d2c:	6893      	ldr	r3, [r2, #8]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	b410      	push	{r4}
 8001d34:	6093      	str	r3, [r2, #8]
 8001d36:	da08      	bge.n	8001d4a <__sfputc_r+0x1e>
 8001d38:	6994      	ldr	r4, [r2, #24]
 8001d3a:	42a3      	cmp	r3, r4
 8001d3c:	db01      	blt.n	8001d42 <__sfputc_r+0x16>
 8001d3e:	290a      	cmp	r1, #10
 8001d40:	d103      	bne.n	8001d4a <__sfputc_r+0x1e>
 8001d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d46:	f000 bb7b 	b.w	8002440 <__swbuf_r>
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	1c58      	adds	r0, r3, #1
 8001d4e:	6010      	str	r0, [r2, #0]
 8001d50:	7019      	strb	r1, [r3, #0]
 8001d52:	4608      	mov	r0, r1
 8001d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <__sfputs_r>:
 8001d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5c:	4606      	mov	r6, r0
 8001d5e:	460f      	mov	r7, r1
 8001d60:	4614      	mov	r4, r2
 8001d62:	18d5      	adds	r5, r2, r3
 8001d64:	42ac      	cmp	r4, r5
 8001d66:	d101      	bne.n	8001d6c <__sfputs_r+0x12>
 8001d68:	2000      	movs	r0, #0
 8001d6a:	e007      	b.n	8001d7c <__sfputs_r+0x22>
 8001d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d70:	463a      	mov	r2, r7
 8001d72:	4630      	mov	r0, r6
 8001d74:	f7ff ffda 	bl	8001d2c <__sfputc_r>
 8001d78:	1c43      	adds	r3, r0, #1
 8001d7a:	d1f3      	bne.n	8001d64 <__sfputs_r+0xa>
 8001d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d80 <_vfiprintf_r>:
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d84:	460d      	mov	r5, r1
 8001d86:	b09d      	sub	sp, #116	; 0x74
 8001d88:	4614      	mov	r4, r2
 8001d8a:	4698      	mov	r8, r3
 8001d8c:	4606      	mov	r6, r0
 8001d8e:	b118      	cbz	r0, 8001d98 <_vfiprintf_r+0x18>
 8001d90:	6983      	ldr	r3, [r0, #24]
 8001d92:	b90b      	cbnz	r3, 8001d98 <_vfiprintf_r+0x18>
 8001d94:	f7ff fe14 	bl	80019c0 <__sinit>
 8001d98:	4b89      	ldr	r3, [pc, #548]	; (8001fc0 <_vfiprintf_r+0x240>)
 8001d9a:	429d      	cmp	r5, r3
 8001d9c:	d11b      	bne.n	8001dd6 <_vfiprintf_r+0x56>
 8001d9e:	6875      	ldr	r5, [r6, #4]
 8001da0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001da2:	07d9      	lsls	r1, r3, #31
 8001da4:	d405      	bmi.n	8001db2 <_vfiprintf_r+0x32>
 8001da6:	89ab      	ldrh	r3, [r5, #12]
 8001da8:	059a      	lsls	r2, r3, #22
 8001daa:	d402      	bmi.n	8001db2 <_vfiprintf_r+0x32>
 8001dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001dae:	f7ff fea5 	bl	8001afc <__retarget_lock_acquire_recursive>
 8001db2:	89ab      	ldrh	r3, [r5, #12]
 8001db4:	071b      	lsls	r3, r3, #28
 8001db6:	d501      	bpl.n	8001dbc <_vfiprintf_r+0x3c>
 8001db8:	692b      	ldr	r3, [r5, #16]
 8001dba:	b9eb      	cbnz	r3, 8001df8 <_vfiprintf_r+0x78>
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f000 fb90 	bl	80024e4 <__swsetup_r>
 8001dc4:	b1c0      	cbz	r0, 8001df8 <_vfiprintf_r+0x78>
 8001dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dc8:	07dc      	lsls	r4, r3, #31
 8001dca:	d50e      	bpl.n	8001dea <_vfiprintf_r+0x6a>
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	b01d      	add	sp, #116	; 0x74
 8001dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dd6:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <_vfiprintf_r+0x244>)
 8001dd8:	429d      	cmp	r5, r3
 8001dda:	d101      	bne.n	8001de0 <_vfiprintf_r+0x60>
 8001ddc:	68b5      	ldr	r5, [r6, #8]
 8001dde:	e7df      	b.n	8001da0 <_vfiprintf_r+0x20>
 8001de0:	4b79      	ldr	r3, [pc, #484]	; (8001fc8 <_vfiprintf_r+0x248>)
 8001de2:	429d      	cmp	r5, r3
 8001de4:	bf08      	it	eq
 8001de6:	68f5      	ldreq	r5, [r6, #12]
 8001de8:	e7da      	b.n	8001da0 <_vfiprintf_r+0x20>
 8001dea:	89ab      	ldrh	r3, [r5, #12]
 8001dec:	0598      	lsls	r0, r3, #22
 8001dee:	d4ed      	bmi.n	8001dcc <_vfiprintf_r+0x4c>
 8001df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001df2:	f7ff fe84 	bl	8001afe <__retarget_lock_release_recursive>
 8001df6:	e7e9      	b.n	8001dcc <_vfiprintf_r+0x4c>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e06:	2330      	movs	r3, #48	; 0x30
 8001e08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001fcc <_vfiprintf_r+0x24c>
 8001e0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e10:	f04f 0901 	mov.w	r9, #1
 8001e14:	4623      	mov	r3, r4
 8001e16:	469a      	mov	sl, r3
 8001e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e1c:	b10a      	cbz	r2, 8001e22 <_vfiprintf_r+0xa2>
 8001e1e:	2a25      	cmp	r2, #37	; 0x25
 8001e20:	d1f9      	bne.n	8001e16 <_vfiprintf_r+0x96>
 8001e22:	ebba 0b04 	subs.w	fp, sl, r4
 8001e26:	d00b      	beq.n	8001e40 <_vfiprintf_r+0xc0>
 8001e28:	465b      	mov	r3, fp
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f7ff ff93 	bl	8001d5a <__sfputs_r>
 8001e34:	3001      	adds	r0, #1
 8001e36:	f000 80aa 	beq.w	8001f8e <_vfiprintf_r+0x20e>
 8001e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e3c:	445a      	add	r2, fp
 8001e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8001e40:	f89a 3000 	ldrb.w	r3, [sl]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80a2 	beq.w	8001f8e <_vfiprintf_r+0x20e>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e54:	f10a 0a01 	add.w	sl, sl, #1
 8001e58:	9304      	str	r3, [sp, #16]
 8001e5a:	9307      	str	r3, [sp, #28]
 8001e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e60:	931a      	str	r3, [sp, #104]	; 0x68
 8001e62:	4654      	mov	r4, sl
 8001e64:	2205      	movs	r2, #5
 8001e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e6a:	4858      	ldr	r0, [pc, #352]	; (8001fcc <_vfiprintf_r+0x24c>)
 8001e6c:	f7fe f9b8 	bl	80001e0 <memchr>
 8001e70:	9a04      	ldr	r2, [sp, #16]
 8001e72:	b9d8      	cbnz	r0, 8001eac <_vfiprintf_r+0x12c>
 8001e74:	06d1      	lsls	r1, r2, #27
 8001e76:	bf44      	itt	mi
 8001e78:	2320      	movmi	r3, #32
 8001e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e7e:	0713      	lsls	r3, r2, #28
 8001e80:	bf44      	itt	mi
 8001e82:	232b      	movmi	r3, #43	; 0x2b
 8001e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e88:	f89a 3000 	ldrb.w	r3, [sl]
 8001e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e8e:	d015      	beq.n	8001ebc <_vfiprintf_r+0x13c>
 8001e90:	9a07      	ldr	r2, [sp, #28]
 8001e92:	4654      	mov	r4, sl
 8001e94:	2000      	movs	r0, #0
 8001e96:	f04f 0c0a 	mov.w	ip, #10
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ea0:	3b30      	subs	r3, #48	; 0x30
 8001ea2:	2b09      	cmp	r3, #9
 8001ea4:	d94e      	bls.n	8001f44 <_vfiprintf_r+0x1c4>
 8001ea6:	b1b0      	cbz	r0, 8001ed6 <_vfiprintf_r+0x156>
 8001ea8:	9207      	str	r2, [sp, #28]
 8001eaa:	e014      	b.n	8001ed6 <_vfiprintf_r+0x156>
 8001eac:	eba0 0308 	sub.w	r3, r0, r8
 8001eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	9304      	str	r3, [sp, #16]
 8001eb8:	46a2      	mov	sl, r4
 8001eba:	e7d2      	b.n	8001e62 <_vfiprintf_r+0xe2>
 8001ebc:	9b03      	ldr	r3, [sp, #12]
 8001ebe:	1d19      	adds	r1, r3, #4
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	9103      	str	r1, [sp, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bfbb      	ittet	lt
 8001ec8:	425b      	neglt	r3, r3
 8001eca:	f042 0202 	orrlt.w	r2, r2, #2
 8001ece:	9307      	strge	r3, [sp, #28]
 8001ed0:	9307      	strlt	r3, [sp, #28]
 8001ed2:	bfb8      	it	lt
 8001ed4:	9204      	strlt	r2, [sp, #16]
 8001ed6:	7823      	ldrb	r3, [r4, #0]
 8001ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8001eda:	d10c      	bne.n	8001ef6 <_vfiprintf_r+0x176>
 8001edc:	7863      	ldrb	r3, [r4, #1]
 8001ede:	2b2a      	cmp	r3, #42	; 0x2a
 8001ee0:	d135      	bne.n	8001f4e <_vfiprintf_r+0x1ce>
 8001ee2:	9b03      	ldr	r3, [sp, #12]
 8001ee4:	1d1a      	adds	r2, r3, #4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	9203      	str	r2, [sp, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bfb8      	it	lt
 8001eee:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ef2:	3402      	adds	r4, #2
 8001ef4:	9305      	str	r3, [sp, #20]
 8001ef6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001fdc <_vfiprintf_r+0x25c>
 8001efa:	7821      	ldrb	r1, [r4, #0]
 8001efc:	2203      	movs	r2, #3
 8001efe:	4650      	mov	r0, sl
 8001f00:	f7fe f96e 	bl	80001e0 <memchr>
 8001f04:	b140      	cbz	r0, 8001f18 <_vfiprintf_r+0x198>
 8001f06:	2340      	movs	r3, #64	; 0x40
 8001f08:	eba0 000a 	sub.w	r0, r0, sl
 8001f0c:	fa03 f000 	lsl.w	r0, r3, r0
 8001f10:	9b04      	ldr	r3, [sp, #16]
 8001f12:	4303      	orrs	r3, r0
 8001f14:	3401      	adds	r4, #1
 8001f16:	9304      	str	r3, [sp, #16]
 8001f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f1c:	482c      	ldr	r0, [pc, #176]	; (8001fd0 <_vfiprintf_r+0x250>)
 8001f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f22:	2206      	movs	r2, #6
 8001f24:	f7fe f95c 	bl	80001e0 <memchr>
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d03f      	beq.n	8001fac <_vfiprintf_r+0x22c>
 8001f2c:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <_vfiprintf_r+0x254>)
 8001f2e:	bb1b      	cbnz	r3, 8001f78 <_vfiprintf_r+0x1f8>
 8001f30:	9b03      	ldr	r3, [sp, #12]
 8001f32:	3307      	adds	r3, #7
 8001f34:	f023 0307 	bic.w	r3, r3, #7
 8001f38:	3308      	adds	r3, #8
 8001f3a:	9303      	str	r3, [sp, #12]
 8001f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f3e:	443b      	add	r3, r7
 8001f40:	9309      	str	r3, [sp, #36]	; 0x24
 8001f42:	e767      	b.n	8001e14 <_vfiprintf_r+0x94>
 8001f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f48:	460c      	mov	r4, r1
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	e7a5      	b.n	8001e9a <_vfiprintf_r+0x11a>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	3401      	adds	r4, #1
 8001f52:	9305      	str	r3, [sp, #20]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f04f 0c0a 	mov.w	ip, #10
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f60:	3a30      	subs	r2, #48	; 0x30
 8001f62:	2a09      	cmp	r2, #9
 8001f64:	d903      	bls.n	8001f6e <_vfiprintf_r+0x1ee>
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0c5      	beq.n	8001ef6 <_vfiprintf_r+0x176>
 8001f6a:	9105      	str	r1, [sp, #20]
 8001f6c:	e7c3      	b.n	8001ef6 <_vfiprintf_r+0x176>
 8001f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f72:	4604      	mov	r4, r0
 8001f74:	2301      	movs	r3, #1
 8001f76:	e7f0      	b.n	8001f5a <_vfiprintf_r+0x1da>
 8001f78:	ab03      	add	r3, sp, #12
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	462a      	mov	r2, r5
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <_vfiprintf_r+0x258>)
 8001f80:	a904      	add	r1, sp, #16
 8001f82:	4630      	mov	r0, r6
 8001f84:	f3af 8000 	nop.w
 8001f88:	4607      	mov	r7, r0
 8001f8a:	1c78      	adds	r0, r7, #1
 8001f8c:	d1d6      	bne.n	8001f3c <_vfiprintf_r+0x1bc>
 8001f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f90:	07d9      	lsls	r1, r3, #31
 8001f92:	d405      	bmi.n	8001fa0 <_vfiprintf_r+0x220>
 8001f94:	89ab      	ldrh	r3, [r5, #12]
 8001f96:	059a      	lsls	r2, r3, #22
 8001f98:	d402      	bmi.n	8001fa0 <_vfiprintf_r+0x220>
 8001f9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f9c:	f7ff fdaf 	bl	8001afe <__retarget_lock_release_recursive>
 8001fa0:	89ab      	ldrh	r3, [r5, #12]
 8001fa2:	065b      	lsls	r3, r3, #25
 8001fa4:	f53f af12 	bmi.w	8001dcc <_vfiprintf_r+0x4c>
 8001fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001faa:	e711      	b.n	8001dd0 <_vfiprintf_r+0x50>
 8001fac:	ab03      	add	r3, sp, #12
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	462a      	mov	r2, r5
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <_vfiprintf_r+0x258>)
 8001fb4:	a904      	add	r1, sp, #16
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	f000 f880 	bl	80020bc <_printf_i>
 8001fbc:	e7e4      	b.n	8001f88 <_vfiprintf_r+0x208>
 8001fbe:	bf00      	nop
 8001fc0:	08002b80 	.word	0x08002b80
 8001fc4:	08002ba0 	.word	0x08002ba0
 8001fc8:	08002b60 	.word	0x08002b60
 8001fcc:	08002bc0 	.word	0x08002bc0
 8001fd0:	08002bca 	.word	0x08002bca
 8001fd4:	00000000 	.word	0x00000000
 8001fd8:	08001d5b 	.word	0x08001d5b
 8001fdc:	08002bc6 	.word	0x08002bc6

08001fe0 <_printf_common>:
 8001fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fe4:	4616      	mov	r6, r2
 8001fe6:	4699      	mov	r9, r3
 8001fe8:	688a      	ldr	r2, [r1, #8]
 8001fea:	690b      	ldr	r3, [r1, #16]
 8001fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bfb8      	it	lt
 8001ff4:	4613      	movlt	r3, r2
 8001ff6:	6033      	str	r3, [r6, #0]
 8001ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ffc:	4607      	mov	r7, r0
 8001ffe:	460c      	mov	r4, r1
 8002000:	b10a      	cbz	r2, 8002006 <_printf_common+0x26>
 8002002:	3301      	adds	r3, #1
 8002004:	6033      	str	r3, [r6, #0]
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	0699      	lsls	r1, r3, #26
 800200a:	bf42      	ittt	mi
 800200c:	6833      	ldrmi	r3, [r6, #0]
 800200e:	3302      	addmi	r3, #2
 8002010:	6033      	strmi	r3, [r6, #0]
 8002012:	6825      	ldr	r5, [r4, #0]
 8002014:	f015 0506 	ands.w	r5, r5, #6
 8002018:	d106      	bne.n	8002028 <_printf_common+0x48>
 800201a:	f104 0a19 	add.w	sl, r4, #25
 800201e:	68e3      	ldr	r3, [r4, #12]
 8002020:	6832      	ldr	r2, [r6, #0]
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	42ab      	cmp	r3, r5
 8002026:	dc26      	bgt.n	8002076 <_printf_common+0x96>
 8002028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800202c:	1e13      	subs	r3, r2, #0
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	bf18      	it	ne
 8002032:	2301      	movne	r3, #1
 8002034:	0692      	lsls	r2, r2, #26
 8002036:	d42b      	bmi.n	8002090 <_printf_common+0xb0>
 8002038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800203c:	4649      	mov	r1, r9
 800203e:	4638      	mov	r0, r7
 8002040:	47c0      	blx	r8
 8002042:	3001      	adds	r0, #1
 8002044:	d01e      	beq.n	8002084 <_printf_common+0xa4>
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	68e5      	ldr	r5, [r4, #12]
 800204a:	6832      	ldr	r2, [r6, #0]
 800204c:	f003 0306 	and.w	r3, r3, #6
 8002050:	2b04      	cmp	r3, #4
 8002052:	bf08      	it	eq
 8002054:	1aad      	subeq	r5, r5, r2
 8002056:	68a3      	ldr	r3, [r4, #8]
 8002058:	6922      	ldr	r2, [r4, #16]
 800205a:	bf0c      	ite	eq
 800205c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002060:	2500      	movne	r5, #0
 8002062:	4293      	cmp	r3, r2
 8002064:	bfc4      	itt	gt
 8002066:	1a9b      	subgt	r3, r3, r2
 8002068:	18ed      	addgt	r5, r5, r3
 800206a:	2600      	movs	r6, #0
 800206c:	341a      	adds	r4, #26
 800206e:	42b5      	cmp	r5, r6
 8002070:	d11a      	bne.n	80020a8 <_printf_common+0xc8>
 8002072:	2000      	movs	r0, #0
 8002074:	e008      	b.n	8002088 <_printf_common+0xa8>
 8002076:	2301      	movs	r3, #1
 8002078:	4652      	mov	r2, sl
 800207a:	4649      	mov	r1, r9
 800207c:	4638      	mov	r0, r7
 800207e:	47c0      	blx	r8
 8002080:	3001      	adds	r0, #1
 8002082:	d103      	bne.n	800208c <_printf_common+0xac>
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800208c:	3501      	adds	r5, #1
 800208e:	e7c6      	b.n	800201e <_printf_common+0x3e>
 8002090:	18e1      	adds	r1, r4, r3
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	2030      	movs	r0, #48	; 0x30
 8002096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800209a:	4422      	add	r2, r4
 800209c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020a4:	3302      	adds	r3, #2
 80020a6:	e7c7      	b.n	8002038 <_printf_common+0x58>
 80020a8:	2301      	movs	r3, #1
 80020aa:	4622      	mov	r2, r4
 80020ac:	4649      	mov	r1, r9
 80020ae:	4638      	mov	r0, r7
 80020b0:	47c0      	blx	r8
 80020b2:	3001      	adds	r0, #1
 80020b4:	d0e6      	beq.n	8002084 <_printf_common+0xa4>
 80020b6:	3601      	adds	r6, #1
 80020b8:	e7d9      	b.n	800206e <_printf_common+0x8e>
	...

080020bc <_printf_i>:
 80020bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020c0:	460c      	mov	r4, r1
 80020c2:	4691      	mov	r9, r2
 80020c4:	7e27      	ldrb	r7, [r4, #24]
 80020c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80020c8:	2f78      	cmp	r7, #120	; 0x78
 80020ca:	4680      	mov	r8, r0
 80020cc:	469a      	mov	sl, r3
 80020ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020d2:	d807      	bhi.n	80020e4 <_printf_i+0x28>
 80020d4:	2f62      	cmp	r7, #98	; 0x62
 80020d6:	d80a      	bhi.n	80020ee <_printf_i+0x32>
 80020d8:	2f00      	cmp	r7, #0
 80020da:	f000 80d8 	beq.w	800228e <_printf_i+0x1d2>
 80020de:	2f58      	cmp	r7, #88	; 0x58
 80020e0:	f000 80a3 	beq.w	800222a <_printf_i+0x16e>
 80020e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80020e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80020ec:	e03a      	b.n	8002164 <_printf_i+0xa8>
 80020ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80020f2:	2b15      	cmp	r3, #21
 80020f4:	d8f6      	bhi.n	80020e4 <_printf_i+0x28>
 80020f6:	a001      	add	r0, pc, #4	; (adr r0, 80020fc <_printf_i+0x40>)
 80020f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80020fc:	08002155 	.word	0x08002155
 8002100:	08002169 	.word	0x08002169
 8002104:	080020e5 	.word	0x080020e5
 8002108:	080020e5 	.word	0x080020e5
 800210c:	080020e5 	.word	0x080020e5
 8002110:	080020e5 	.word	0x080020e5
 8002114:	08002169 	.word	0x08002169
 8002118:	080020e5 	.word	0x080020e5
 800211c:	080020e5 	.word	0x080020e5
 8002120:	080020e5 	.word	0x080020e5
 8002124:	080020e5 	.word	0x080020e5
 8002128:	08002275 	.word	0x08002275
 800212c:	08002199 	.word	0x08002199
 8002130:	08002257 	.word	0x08002257
 8002134:	080020e5 	.word	0x080020e5
 8002138:	080020e5 	.word	0x080020e5
 800213c:	08002297 	.word	0x08002297
 8002140:	080020e5 	.word	0x080020e5
 8002144:	08002199 	.word	0x08002199
 8002148:	080020e5 	.word	0x080020e5
 800214c:	080020e5 	.word	0x080020e5
 8002150:	0800225f 	.word	0x0800225f
 8002154:	680b      	ldr	r3, [r1, #0]
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	600a      	str	r2, [r1, #0]
 800215c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002164:	2301      	movs	r3, #1
 8002166:	e0a3      	b.n	80022b0 <_printf_i+0x1f4>
 8002168:	6825      	ldr	r5, [r4, #0]
 800216a:	6808      	ldr	r0, [r1, #0]
 800216c:	062e      	lsls	r6, r5, #24
 800216e:	f100 0304 	add.w	r3, r0, #4
 8002172:	d50a      	bpl.n	800218a <_printf_i+0xce>
 8002174:	6805      	ldr	r5, [r0, #0]
 8002176:	600b      	str	r3, [r1, #0]
 8002178:	2d00      	cmp	r5, #0
 800217a:	da03      	bge.n	8002184 <_printf_i+0xc8>
 800217c:	232d      	movs	r3, #45	; 0x2d
 800217e:	426d      	negs	r5, r5
 8002180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002184:	485e      	ldr	r0, [pc, #376]	; (8002300 <_printf_i+0x244>)
 8002186:	230a      	movs	r3, #10
 8002188:	e019      	b.n	80021be <_printf_i+0x102>
 800218a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800218e:	6805      	ldr	r5, [r0, #0]
 8002190:	600b      	str	r3, [r1, #0]
 8002192:	bf18      	it	ne
 8002194:	b22d      	sxthne	r5, r5
 8002196:	e7ef      	b.n	8002178 <_printf_i+0xbc>
 8002198:	680b      	ldr	r3, [r1, #0]
 800219a:	6825      	ldr	r5, [r4, #0]
 800219c:	1d18      	adds	r0, r3, #4
 800219e:	6008      	str	r0, [r1, #0]
 80021a0:	0628      	lsls	r0, r5, #24
 80021a2:	d501      	bpl.n	80021a8 <_printf_i+0xec>
 80021a4:	681d      	ldr	r5, [r3, #0]
 80021a6:	e002      	b.n	80021ae <_printf_i+0xf2>
 80021a8:	0669      	lsls	r1, r5, #25
 80021aa:	d5fb      	bpl.n	80021a4 <_printf_i+0xe8>
 80021ac:	881d      	ldrh	r5, [r3, #0]
 80021ae:	4854      	ldr	r0, [pc, #336]	; (8002300 <_printf_i+0x244>)
 80021b0:	2f6f      	cmp	r7, #111	; 0x6f
 80021b2:	bf0c      	ite	eq
 80021b4:	2308      	moveq	r3, #8
 80021b6:	230a      	movne	r3, #10
 80021b8:	2100      	movs	r1, #0
 80021ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80021be:	6866      	ldr	r6, [r4, #4]
 80021c0:	60a6      	str	r6, [r4, #8]
 80021c2:	2e00      	cmp	r6, #0
 80021c4:	bfa2      	ittt	ge
 80021c6:	6821      	ldrge	r1, [r4, #0]
 80021c8:	f021 0104 	bicge.w	r1, r1, #4
 80021cc:	6021      	strge	r1, [r4, #0]
 80021ce:	b90d      	cbnz	r5, 80021d4 <_printf_i+0x118>
 80021d0:	2e00      	cmp	r6, #0
 80021d2:	d04d      	beq.n	8002270 <_printf_i+0x1b4>
 80021d4:	4616      	mov	r6, r2
 80021d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80021da:	fb03 5711 	mls	r7, r3, r1, r5
 80021de:	5dc7      	ldrb	r7, [r0, r7]
 80021e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80021e4:	462f      	mov	r7, r5
 80021e6:	42bb      	cmp	r3, r7
 80021e8:	460d      	mov	r5, r1
 80021ea:	d9f4      	bls.n	80021d6 <_printf_i+0x11a>
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d10b      	bne.n	8002208 <_printf_i+0x14c>
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	07df      	lsls	r7, r3, #31
 80021f4:	d508      	bpl.n	8002208 <_printf_i+0x14c>
 80021f6:	6923      	ldr	r3, [r4, #16]
 80021f8:	6861      	ldr	r1, [r4, #4]
 80021fa:	4299      	cmp	r1, r3
 80021fc:	bfde      	ittt	le
 80021fe:	2330      	movle	r3, #48	; 0x30
 8002200:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002204:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002208:	1b92      	subs	r2, r2, r6
 800220a:	6122      	str	r2, [r4, #16]
 800220c:	f8cd a000 	str.w	sl, [sp]
 8002210:	464b      	mov	r3, r9
 8002212:	aa03      	add	r2, sp, #12
 8002214:	4621      	mov	r1, r4
 8002216:	4640      	mov	r0, r8
 8002218:	f7ff fee2 	bl	8001fe0 <_printf_common>
 800221c:	3001      	adds	r0, #1
 800221e:	d14c      	bne.n	80022ba <_printf_i+0x1fe>
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	b004      	add	sp, #16
 8002226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800222a:	4835      	ldr	r0, [pc, #212]	; (8002300 <_printf_i+0x244>)
 800222c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	680e      	ldr	r6, [r1, #0]
 8002234:	061f      	lsls	r7, r3, #24
 8002236:	f856 5b04 	ldr.w	r5, [r6], #4
 800223a:	600e      	str	r6, [r1, #0]
 800223c:	d514      	bpl.n	8002268 <_printf_i+0x1ac>
 800223e:	07d9      	lsls	r1, r3, #31
 8002240:	bf44      	itt	mi
 8002242:	f043 0320 	orrmi.w	r3, r3, #32
 8002246:	6023      	strmi	r3, [r4, #0]
 8002248:	b91d      	cbnz	r5, 8002252 <_printf_i+0x196>
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	f023 0320 	bic.w	r3, r3, #32
 8002250:	6023      	str	r3, [r4, #0]
 8002252:	2310      	movs	r3, #16
 8002254:	e7b0      	b.n	80021b8 <_printf_i+0xfc>
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	f043 0320 	orr.w	r3, r3, #32
 800225c:	6023      	str	r3, [r4, #0]
 800225e:	2378      	movs	r3, #120	; 0x78
 8002260:	4828      	ldr	r0, [pc, #160]	; (8002304 <_printf_i+0x248>)
 8002262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002266:	e7e3      	b.n	8002230 <_printf_i+0x174>
 8002268:	065e      	lsls	r6, r3, #25
 800226a:	bf48      	it	mi
 800226c:	b2ad      	uxthmi	r5, r5
 800226e:	e7e6      	b.n	800223e <_printf_i+0x182>
 8002270:	4616      	mov	r6, r2
 8002272:	e7bb      	b.n	80021ec <_printf_i+0x130>
 8002274:	680b      	ldr	r3, [r1, #0]
 8002276:	6826      	ldr	r6, [r4, #0]
 8002278:	6960      	ldr	r0, [r4, #20]
 800227a:	1d1d      	adds	r5, r3, #4
 800227c:	600d      	str	r5, [r1, #0]
 800227e:	0635      	lsls	r5, r6, #24
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	d501      	bpl.n	8002288 <_printf_i+0x1cc>
 8002284:	6018      	str	r0, [r3, #0]
 8002286:	e002      	b.n	800228e <_printf_i+0x1d2>
 8002288:	0671      	lsls	r1, r6, #25
 800228a:	d5fb      	bpl.n	8002284 <_printf_i+0x1c8>
 800228c:	8018      	strh	r0, [r3, #0]
 800228e:	2300      	movs	r3, #0
 8002290:	6123      	str	r3, [r4, #16]
 8002292:	4616      	mov	r6, r2
 8002294:	e7ba      	b.n	800220c <_printf_i+0x150>
 8002296:	680b      	ldr	r3, [r1, #0]
 8002298:	1d1a      	adds	r2, r3, #4
 800229a:	600a      	str	r2, [r1, #0]
 800229c:	681e      	ldr	r6, [r3, #0]
 800229e:	6862      	ldr	r2, [r4, #4]
 80022a0:	2100      	movs	r1, #0
 80022a2:	4630      	mov	r0, r6
 80022a4:	f7fd ff9c 	bl	80001e0 <memchr>
 80022a8:	b108      	cbz	r0, 80022ae <_printf_i+0x1f2>
 80022aa:	1b80      	subs	r0, r0, r6
 80022ac:	6060      	str	r0, [r4, #4]
 80022ae:	6863      	ldr	r3, [r4, #4]
 80022b0:	6123      	str	r3, [r4, #16]
 80022b2:	2300      	movs	r3, #0
 80022b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022b8:	e7a8      	b.n	800220c <_printf_i+0x150>
 80022ba:	6923      	ldr	r3, [r4, #16]
 80022bc:	4632      	mov	r2, r6
 80022be:	4649      	mov	r1, r9
 80022c0:	4640      	mov	r0, r8
 80022c2:	47d0      	blx	sl
 80022c4:	3001      	adds	r0, #1
 80022c6:	d0ab      	beq.n	8002220 <_printf_i+0x164>
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	079b      	lsls	r3, r3, #30
 80022cc:	d413      	bmi.n	80022f6 <_printf_i+0x23a>
 80022ce:	68e0      	ldr	r0, [r4, #12]
 80022d0:	9b03      	ldr	r3, [sp, #12]
 80022d2:	4298      	cmp	r0, r3
 80022d4:	bfb8      	it	lt
 80022d6:	4618      	movlt	r0, r3
 80022d8:	e7a4      	b.n	8002224 <_printf_i+0x168>
 80022da:	2301      	movs	r3, #1
 80022dc:	4632      	mov	r2, r6
 80022de:	4649      	mov	r1, r9
 80022e0:	4640      	mov	r0, r8
 80022e2:	47d0      	blx	sl
 80022e4:	3001      	adds	r0, #1
 80022e6:	d09b      	beq.n	8002220 <_printf_i+0x164>
 80022e8:	3501      	adds	r5, #1
 80022ea:	68e3      	ldr	r3, [r4, #12]
 80022ec:	9903      	ldr	r1, [sp, #12]
 80022ee:	1a5b      	subs	r3, r3, r1
 80022f0:	42ab      	cmp	r3, r5
 80022f2:	dcf2      	bgt.n	80022da <_printf_i+0x21e>
 80022f4:	e7eb      	b.n	80022ce <_printf_i+0x212>
 80022f6:	2500      	movs	r5, #0
 80022f8:	f104 0619 	add.w	r6, r4, #25
 80022fc:	e7f5      	b.n	80022ea <_printf_i+0x22e>
 80022fe:	bf00      	nop
 8002300:	08002bd1 	.word	0x08002bd1
 8002304:	08002be2 	.word	0x08002be2

08002308 <_putc_r>:
 8002308:	b570      	push	{r4, r5, r6, lr}
 800230a:	460d      	mov	r5, r1
 800230c:	4614      	mov	r4, r2
 800230e:	4606      	mov	r6, r0
 8002310:	b118      	cbz	r0, 800231a <_putc_r+0x12>
 8002312:	6983      	ldr	r3, [r0, #24]
 8002314:	b90b      	cbnz	r3, 800231a <_putc_r+0x12>
 8002316:	f7ff fb53 	bl	80019c0 <__sinit>
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <_putc_r+0x84>)
 800231c:	429c      	cmp	r4, r3
 800231e:	d124      	bne.n	800236a <_putc_r+0x62>
 8002320:	6874      	ldr	r4, [r6, #4]
 8002322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002324:	07d8      	lsls	r0, r3, #31
 8002326:	d405      	bmi.n	8002334 <_putc_r+0x2c>
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	0599      	lsls	r1, r3, #22
 800232c:	d402      	bmi.n	8002334 <_putc_r+0x2c>
 800232e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002330:	f7ff fbe4 	bl	8001afc <__retarget_lock_acquire_recursive>
 8002334:	68a3      	ldr	r3, [r4, #8]
 8002336:	3b01      	subs	r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	60a3      	str	r3, [r4, #8]
 800233c:	da05      	bge.n	800234a <_putc_r+0x42>
 800233e:	69a2      	ldr	r2, [r4, #24]
 8002340:	4293      	cmp	r3, r2
 8002342:	db1c      	blt.n	800237e <_putc_r+0x76>
 8002344:	b2eb      	uxtb	r3, r5
 8002346:	2b0a      	cmp	r3, #10
 8002348:	d019      	beq.n	800237e <_putc_r+0x76>
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	6022      	str	r2, [r4, #0]
 8002350:	701d      	strb	r5, [r3, #0]
 8002352:	b2ed      	uxtb	r5, r5
 8002354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002356:	07da      	lsls	r2, r3, #31
 8002358:	d405      	bmi.n	8002366 <_putc_r+0x5e>
 800235a:	89a3      	ldrh	r3, [r4, #12]
 800235c:	059b      	lsls	r3, r3, #22
 800235e:	d402      	bmi.n	8002366 <_putc_r+0x5e>
 8002360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002362:	f7ff fbcc 	bl	8001afe <__retarget_lock_release_recursive>
 8002366:	4628      	mov	r0, r5
 8002368:	bd70      	pop	{r4, r5, r6, pc}
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <_putc_r+0x88>)
 800236c:	429c      	cmp	r4, r3
 800236e:	d101      	bne.n	8002374 <_putc_r+0x6c>
 8002370:	68b4      	ldr	r4, [r6, #8]
 8002372:	e7d6      	b.n	8002322 <_putc_r+0x1a>
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <_putc_r+0x8c>)
 8002376:	429c      	cmp	r4, r3
 8002378:	bf08      	it	eq
 800237a:	68f4      	ldreq	r4, [r6, #12]
 800237c:	e7d1      	b.n	8002322 <_putc_r+0x1a>
 800237e:	4629      	mov	r1, r5
 8002380:	4622      	mov	r2, r4
 8002382:	4630      	mov	r0, r6
 8002384:	f000 f85c 	bl	8002440 <__swbuf_r>
 8002388:	4605      	mov	r5, r0
 800238a:	e7e3      	b.n	8002354 <_putc_r+0x4c>
 800238c:	08002b80 	.word	0x08002b80
 8002390:	08002ba0 	.word	0x08002ba0
 8002394:	08002b60 	.word	0x08002b60

08002398 <_sbrk_r>:
 8002398:	b538      	push	{r3, r4, r5, lr}
 800239a:	4d06      	ldr	r5, [pc, #24]	; (80023b4 <_sbrk_r+0x1c>)
 800239c:	2300      	movs	r3, #0
 800239e:	4604      	mov	r4, r0
 80023a0:	4608      	mov	r0, r1
 80023a2:	602b      	str	r3, [r5, #0]
 80023a4:	f7fe ffda 	bl	800135c <_sbrk>
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d102      	bne.n	80023b2 <_sbrk_r+0x1a>
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	b103      	cbz	r3, 80023b2 <_sbrk_r+0x1a>
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
 80023b4:	200001d8 	.word	0x200001d8

080023b8 <__sread>:
 80023b8:	b510      	push	{r4, lr}
 80023ba:	460c      	mov	r4, r1
 80023bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023c0:	f000 f94e 	bl	8002660 <_read_r>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	bfab      	itete	ge
 80023c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023ca:	89a3      	ldrhlt	r3, [r4, #12]
 80023cc:	181b      	addge	r3, r3, r0
 80023ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023d2:	bfac      	ite	ge
 80023d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80023d6:	81a3      	strhlt	r3, [r4, #12]
 80023d8:	bd10      	pop	{r4, pc}

080023da <__swrite>:
 80023da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023de:	461f      	mov	r7, r3
 80023e0:	898b      	ldrh	r3, [r1, #12]
 80023e2:	05db      	lsls	r3, r3, #23
 80023e4:	4605      	mov	r5, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	4616      	mov	r6, r2
 80023ea:	d505      	bpl.n	80023f8 <__swrite+0x1e>
 80023ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023f0:	2302      	movs	r3, #2
 80023f2:	2200      	movs	r2, #0
 80023f4:	f000 f916 	bl	8002624 <_lseek_r>
 80023f8:	89a3      	ldrh	r3, [r4, #12]
 80023fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002402:	81a3      	strh	r3, [r4, #12]
 8002404:	4632      	mov	r2, r6
 8002406:	463b      	mov	r3, r7
 8002408:	4628      	mov	r0, r5
 800240a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800240e:	f7fe ba3d 	b.w	800088c <_write_r>

08002412 <__sseek>:
 8002412:	b510      	push	{r4, lr}
 8002414:	460c      	mov	r4, r1
 8002416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800241a:	f000 f903 	bl	8002624 <_lseek_r>
 800241e:	1c43      	adds	r3, r0, #1
 8002420:	89a3      	ldrh	r3, [r4, #12]
 8002422:	bf15      	itete	ne
 8002424:	6560      	strne	r0, [r4, #84]	; 0x54
 8002426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800242a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800242e:	81a3      	strheq	r3, [r4, #12]
 8002430:	bf18      	it	ne
 8002432:	81a3      	strhne	r3, [r4, #12]
 8002434:	bd10      	pop	{r4, pc}

08002436 <__sclose>:
 8002436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800243a:	f000 b8c1 	b.w	80025c0 <_close_r>
	...

08002440 <__swbuf_r>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	460e      	mov	r6, r1
 8002444:	4614      	mov	r4, r2
 8002446:	4605      	mov	r5, r0
 8002448:	b118      	cbz	r0, 8002452 <__swbuf_r+0x12>
 800244a:	6983      	ldr	r3, [r0, #24]
 800244c:	b90b      	cbnz	r3, 8002452 <__swbuf_r+0x12>
 800244e:	f7ff fab7 	bl	80019c0 <__sinit>
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <__swbuf_r+0x98>)
 8002454:	429c      	cmp	r4, r3
 8002456:	d12b      	bne.n	80024b0 <__swbuf_r+0x70>
 8002458:	686c      	ldr	r4, [r5, #4]
 800245a:	69a3      	ldr	r3, [r4, #24]
 800245c:	60a3      	str	r3, [r4, #8]
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	071a      	lsls	r2, r3, #28
 8002462:	d52f      	bpl.n	80024c4 <__swbuf_r+0x84>
 8002464:	6923      	ldr	r3, [r4, #16]
 8002466:	b36b      	cbz	r3, 80024c4 <__swbuf_r+0x84>
 8002468:	6923      	ldr	r3, [r4, #16]
 800246a:	6820      	ldr	r0, [r4, #0]
 800246c:	1ac0      	subs	r0, r0, r3
 800246e:	6963      	ldr	r3, [r4, #20]
 8002470:	b2f6      	uxtb	r6, r6
 8002472:	4283      	cmp	r3, r0
 8002474:	4637      	mov	r7, r6
 8002476:	dc04      	bgt.n	8002482 <__swbuf_r+0x42>
 8002478:	4621      	mov	r1, r4
 800247a:	4628      	mov	r0, r5
 800247c:	f7ff fa0c 	bl	8001898 <_fflush_r>
 8002480:	bb30      	cbnz	r0, 80024d0 <__swbuf_r+0x90>
 8002482:	68a3      	ldr	r3, [r4, #8]
 8002484:	3b01      	subs	r3, #1
 8002486:	60a3      	str	r3, [r4, #8]
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	6022      	str	r2, [r4, #0]
 800248e:	701e      	strb	r6, [r3, #0]
 8002490:	6963      	ldr	r3, [r4, #20]
 8002492:	3001      	adds	r0, #1
 8002494:	4283      	cmp	r3, r0
 8002496:	d004      	beq.n	80024a2 <__swbuf_r+0x62>
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	07db      	lsls	r3, r3, #31
 800249c:	d506      	bpl.n	80024ac <__swbuf_r+0x6c>
 800249e:	2e0a      	cmp	r6, #10
 80024a0:	d104      	bne.n	80024ac <__swbuf_r+0x6c>
 80024a2:	4621      	mov	r1, r4
 80024a4:	4628      	mov	r0, r5
 80024a6:	f7ff f9f7 	bl	8001898 <_fflush_r>
 80024aa:	b988      	cbnz	r0, 80024d0 <__swbuf_r+0x90>
 80024ac:	4638      	mov	r0, r7
 80024ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <__swbuf_r+0x9c>)
 80024b2:	429c      	cmp	r4, r3
 80024b4:	d101      	bne.n	80024ba <__swbuf_r+0x7a>
 80024b6:	68ac      	ldr	r4, [r5, #8]
 80024b8:	e7cf      	b.n	800245a <__swbuf_r+0x1a>
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <__swbuf_r+0xa0>)
 80024bc:	429c      	cmp	r4, r3
 80024be:	bf08      	it	eq
 80024c0:	68ec      	ldreq	r4, [r5, #12]
 80024c2:	e7ca      	b.n	800245a <__swbuf_r+0x1a>
 80024c4:	4621      	mov	r1, r4
 80024c6:	4628      	mov	r0, r5
 80024c8:	f000 f80c 	bl	80024e4 <__swsetup_r>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d0cb      	beq.n	8002468 <__swbuf_r+0x28>
 80024d0:	f04f 37ff 	mov.w	r7, #4294967295
 80024d4:	e7ea      	b.n	80024ac <__swbuf_r+0x6c>
 80024d6:	bf00      	nop
 80024d8:	08002b80 	.word	0x08002b80
 80024dc:	08002ba0 	.word	0x08002ba0
 80024e0:	08002b60 	.word	0x08002b60

080024e4 <__swsetup_r>:
 80024e4:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <__swsetup_r+0xcc>)
 80024e6:	b570      	push	{r4, r5, r6, lr}
 80024e8:	681d      	ldr	r5, [r3, #0]
 80024ea:	4606      	mov	r6, r0
 80024ec:	460c      	mov	r4, r1
 80024ee:	b125      	cbz	r5, 80024fa <__swsetup_r+0x16>
 80024f0:	69ab      	ldr	r3, [r5, #24]
 80024f2:	b913      	cbnz	r3, 80024fa <__swsetup_r+0x16>
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7ff fa63 	bl	80019c0 <__sinit>
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <__swsetup_r+0xd0>)
 80024fc:	429c      	cmp	r4, r3
 80024fe:	d10f      	bne.n	8002520 <__swsetup_r+0x3c>
 8002500:	686c      	ldr	r4, [r5, #4]
 8002502:	89a3      	ldrh	r3, [r4, #12]
 8002504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002508:	0719      	lsls	r1, r3, #28
 800250a:	d42c      	bmi.n	8002566 <__swsetup_r+0x82>
 800250c:	06dd      	lsls	r5, r3, #27
 800250e:	d411      	bmi.n	8002534 <__swsetup_r+0x50>
 8002510:	2309      	movs	r3, #9
 8002512:	6033      	str	r3, [r6, #0]
 8002514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002518:	81a3      	strh	r3, [r4, #12]
 800251a:	f04f 30ff 	mov.w	r0, #4294967295
 800251e:	e03e      	b.n	800259e <__swsetup_r+0xba>
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <__swsetup_r+0xd4>)
 8002522:	429c      	cmp	r4, r3
 8002524:	d101      	bne.n	800252a <__swsetup_r+0x46>
 8002526:	68ac      	ldr	r4, [r5, #8]
 8002528:	e7eb      	b.n	8002502 <__swsetup_r+0x1e>
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <__swsetup_r+0xd8>)
 800252c:	429c      	cmp	r4, r3
 800252e:	bf08      	it	eq
 8002530:	68ec      	ldreq	r4, [r5, #12]
 8002532:	e7e6      	b.n	8002502 <__swsetup_r+0x1e>
 8002534:	0758      	lsls	r0, r3, #29
 8002536:	d512      	bpl.n	800255e <__swsetup_r+0x7a>
 8002538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800253a:	b141      	cbz	r1, 800254e <__swsetup_r+0x6a>
 800253c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002540:	4299      	cmp	r1, r3
 8002542:	d002      	beq.n	800254a <__swsetup_r+0x66>
 8002544:	4630      	mov	r0, r6
 8002546:	f7ff fb47 	bl	8001bd8 <_free_r>
 800254a:	2300      	movs	r3, #0
 800254c:	6363      	str	r3, [r4, #52]	; 0x34
 800254e:	89a3      	ldrh	r3, [r4, #12]
 8002550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002554:	81a3      	strh	r3, [r4, #12]
 8002556:	2300      	movs	r3, #0
 8002558:	6063      	str	r3, [r4, #4]
 800255a:	6923      	ldr	r3, [r4, #16]
 800255c:	6023      	str	r3, [r4, #0]
 800255e:	89a3      	ldrh	r3, [r4, #12]
 8002560:	f043 0308 	orr.w	r3, r3, #8
 8002564:	81a3      	strh	r3, [r4, #12]
 8002566:	6923      	ldr	r3, [r4, #16]
 8002568:	b94b      	cbnz	r3, 800257e <__swsetup_r+0x9a>
 800256a:	89a3      	ldrh	r3, [r4, #12]
 800256c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002574:	d003      	beq.n	800257e <__swsetup_r+0x9a>
 8002576:	4621      	mov	r1, r4
 8002578:	4630      	mov	r0, r6
 800257a:	f7ff fae5 	bl	8001b48 <__smakebuf_r>
 800257e:	89a0      	ldrh	r0, [r4, #12]
 8002580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002584:	f010 0301 	ands.w	r3, r0, #1
 8002588:	d00a      	beq.n	80025a0 <__swsetup_r+0xbc>
 800258a:	2300      	movs	r3, #0
 800258c:	60a3      	str	r3, [r4, #8]
 800258e:	6963      	ldr	r3, [r4, #20]
 8002590:	425b      	negs	r3, r3
 8002592:	61a3      	str	r3, [r4, #24]
 8002594:	6923      	ldr	r3, [r4, #16]
 8002596:	b943      	cbnz	r3, 80025aa <__swsetup_r+0xc6>
 8002598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800259c:	d1ba      	bne.n	8002514 <__swsetup_r+0x30>
 800259e:	bd70      	pop	{r4, r5, r6, pc}
 80025a0:	0781      	lsls	r1, r0, #30
 80025a2:	bf58      	it	pl
 80025a4:	6963      	ldrpl	r3, [r4, #20]
 80025a6:	60a3      	str	r3, [r4, #8]
 80025a8:	e7f4      	b.n	8002594 <__swsetup_r+0xb0>
 80025aa:	2000      	movs	r0, #0
 80025ac:	e7f7      	b.n	800259e <__swsetup_r+0xba>
 80025ae:	bf00      	nop
 80025b0:	2000002c 	.word	0x2000002c
 80025b4:	08002b80 	.word	0x08002b80
 80025b8:	08002ba0 	.word	0x08002ba0
 80025bc:	08002b60 	.word	0x08002b60

080025c0 <_close_r>:
 80025c0:	b538      	push	{r3, r4, r5, lr}
 80025c2:	4d06      	ldr	r5, [pc, #24]	; (80025dc <_close_r+0x1c>)
 80025c4:	2300      	movs	r3, #0
 80025c6:	4604      	mov	r4, r0
 80025c8:	4608      	mov	r0, r1
 80025ca:	602b      	str	r3, [r5, #0]
 80025cc:	f7fe fe91 	bl	80012f2 <_close>
 80025d0:	1c43      	adds	r3, r0, #1
 80025d2:	d102      	bne.n	80025da <_close_r+0x1a>
 80025d4:	682b      	ldr	r3, [r5, #0]
 80025d6:	b103      	cbz	r3, 80025da <_close_r+0x1a>
 80025d8:	6023      	str	r3, [r4, #0]
 80025da:	bd38      	pop	{r3, r4, r5, pc}
 80025dc:	200001d8 	.word	0x200001d8

080025e0 <_fstat_r>:
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	4d07      	ldr	r5, [pc, #28]	; (8002600 <_fstat_r+0x20>)
 80025e4:	2300      	movs	r3, #0
 80025e6:	4604      	mov	r4, r0
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	602b      	str	r3, [r5, #0]
 80025ee:	f7fe fe8c 	bl	800130a <_fstat>
 80025f2:	1c43      	adds	r3, r0, #1
 80025f4:	d102      	bne.n	80025fc <_fstat_r+0x1c>
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	b103      	cbz	r3, 80025fc <_fstat_r+0x1c>
 80025fa:	6023      	str	r3, [r4, #0]
 80025fc:	bd38      	pop	{r3, r4, r5, pc}
 80025fe:	bf00      	nop
 8002600:	200001d8 	.word	0x200001d8

08002604 <_isatty_r>:
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4d06      	ldr	r5, [pc, #24]	; (8002620 <_isatty_r+0x1c>)
 8002608:	2300      	movs	r3, #0
 800260a:	4604      	mov	r4, r0
 800260c:	4608      	mov	r0, r1
 800260e:	602b      	str	r3, [r5, #0]
 8002610:	f7fe fe8b 	bl	800132a <_isatty>
 8002614:	1c43      	adds	r3, r0, #1
 8002616:	d102      	bne.n	800261e <_isatty_r+0x1a>
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	b103      	cbz	r3, 800261e <_isatty_r+0x1a>
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	bd38      	pop	{r3, r4, r5, pc}
 8002620:	200001d8 	.word	0x200001d8

08002624 <_lseek_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4d07      	ldr	r5, [pc, #28]	; (8002644 <_lseek_r+0x20>)
 8002628:	4604      	mov	r4, r0
 800262a:	4608      	mov	r0, r1
 800262c:	4611      	mov	r1, r2
 800262e:	2200      	movs	r2, #0
 8002630:	602a      	str	r2, [r5, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	f7fe fe84 	bl	8001340 <_lseek>
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	d102      	bne.n	8002642 <_lseek_r+0x1e>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	b103      	cbz	r3, 8002642 <_lseek_r+0x1e>
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	bd38      	pop	{r3, r4, r5, pc}
 8002644:	200001d8 	.word	0x200001d8

08002648 <__malloc_lock>:
 8002648:	4801      	ldr	r0, [pc, #4]	; (8002650 <__malloc_lock+0x8>)
 800264a:	f7ff ba57 	b.w	8001afc <__retarget_lock_acquire_recursive>
 800264e:	bf00      	nop
 8002650:	200001d0 	.word	0x200001d0

08002654 <__malloc_unlock>:
 8002654:	4801      	ldr	r0, [pc, #4]	; (800265c <__malloc_unlock+0x8>)
 8002656:	f7ff ba52 	b.w	8001afe <__retarget_lock_release_recursive>
 800265a:	bf00      	nop
 800265c:	200001d0 	.word	0x200001d0

08002660 <_read_r>:
 8002660:	b538      	push	{r3, r4, r5, lr}
 8002662:	4d07      	ldr	r5, [pc, #28]	; (8002680 <_read_r+0x20>)
 8002664:	4604      	mov	r4, r0
 8002666:	4608      	mov	r0, r1
 8002668:	4611      	mov	r1, r2
 800266a:	2200      	movs	r2, #0
 800266c:	602a      	str	r2, [r5, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	f7fe fe22 	bl	80012b8 <_read>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d102      	bne.n	800267e <_read_r+0x1e>
 8002678:	682b      	ldr	r3, [r5, #0]
 800267a:	b103      	cbz	r3, 800267e <_read_r+0x1e>
 800267c:	6023      	str	r3, [r4, #0]
 800267e:	bd38      	pop	{r3, r4, r5, pc}
 8002680:	200001d8 	.word	0x200001d8

08002684 <_init>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	bf00      	nop
 8002688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268a:	bc08      	pop	{r3}
 800268c:	469e      	mov	lr, r3
 800268e:	4770      	bx	lr

08002690 <_fini>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr
