
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f18  08003f18  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003f18  08003f18  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f18  08003f18  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000090  08003fb0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08003fb0  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc28  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233f  00000000  00000000  0002cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002f828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049fa  00000000  00000000  0002ff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091a1  00000000  00000000  00034912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a9fd  00000000  00000000  0003dab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000984b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e4  00000000  00000000  00098504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003904 	.word	0x08003904

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08003904 	.word	0x08003904

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000a74:	787a      	ldrb	r2, [r7, #1]
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	8879      	ldrh	r1, [r7, #2]
 8000aa6:	08c9      	lsrs	r1, r1, #3
 8000aa8:	b289      	uxth	r1, r1
 8000aaa:	4608      	mov	r0, r1
 8000aac:	ea02 0103 	and.w	r1, r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f100 0208 	add.w	r2, r0, #8
 8000ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	08db      	lsrs	r3, r3, #3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3208      	adds	r2, #8
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b18:	4b91      	ldr	r3, [pc, #580]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 030c 	and.w	r3, r3, #12
 8000b20:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	d011      	beq.n	8000b4c <RCC_GetClocksFreq+0x5c>
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d837      	bhi.n	8000b9e <RCC_GetClocksFreq+0xae>
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <RCC_GetClocksFreq+0x4c>
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d004      	beq.n	8000b44 <RCC_GetClocksFreq+0x54>
 8000b3a:	e030      	b.n	8000b9e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a89      	ldr	r2, [pc, #548]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000b40:	601a      	str	r2, [r3, #0]
      break;
 8000b42:	e030      	b.n	8000ba6 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a87      	ldr	r2, [pc, #540]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000b48:	601a      	str	r2, [r3, #0]
      break;
 8000b4a:	e02c      	b.n	8000ba6 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000b4c:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b54:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b56:	4b82      	ldr	r3, [pc, #520]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3302      	adds	r3, #2
 8000b66:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	4a7d      	ldr	r2, [pc, #500]	; (8000d68 <RCC_GetClocksFreq+0x278>)
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	e00d      	b.n	8000b96 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000b7a:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000b86:	4a77      	ldr	r2, [pc, #476]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b9a:	601a      	str	r2, [r3, #0]
      break;
 8000b9c:	e003      	b.n	8000ba6 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a70      	ldr	r2, [pc, #448]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000ba2:	601a      	str	r2, [r3, #0]
      break;
 8000ba4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000ba6:	4b6e      	ldr	r3, [pc, #440]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bae:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000bb6:	4a6d      	ldr	r2, [pc, #436]	; (8000d6c <RCC_GetClocksFreq+0x27c>)
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	40da      	lsrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bd6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000bde:	4a63      	ldr	r2, [pc, #396]	; (8000d6c <RCC_GetClocksFreq+0x27c>)
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	4413      	add	r3, r2
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	40da      	lsrs	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000bfe:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	0adb      	lsrs	r3, r3, #11
 8000c04:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000c06:	4a59      	ldr	r2, [pc, #356]	; (8000d6c <RCC_GetClocksFreq+0x27c>)
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	40da      	lsrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000c1e:	4b50      	ldr	r3, [pc, #320]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000c26:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c2e:	4a50      	ldr	r2, [pc, #320]	; (8000d70 <RCC_GetClocksFreq+0x280>)
 8000c30:	6a3b      	ldr	r3, [r7, #32]
 8000c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	e003      	b.n	8000c5a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000c62:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	0a5b      	lsrs	r3, r3, #9
 8000c68:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000c6a:	4a41      	ldr	r2, [pc, #260]	; (8000d70 <RCC_GetClocksFreq+0x280>)
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	e003      	b.n	8000c96 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000c96:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	2b10      	cmp	r3, #16
 8000ca0:	d003      	beq.n	8000caa <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	e003      	b.n	8000cb2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	2b20      	cmp	r3, #32
 8000cbc:	d003      	beq.n	8000cc6 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <RCC_GetClocksFreq+0x274>)
 8000cc2:	61da      	str	r2, [r3, #28]
 8000cc4:	e003      	b.n	8000cce <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cda:	d10d      	bne.n	8000cf8 <RCC_GetClocksFreq+0x208>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d108      	bne.n	8000cf8 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d104      	bne.n	8000cf8 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	005a      	lsls	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	621a      	str	r2, [r3, #32]
 8000cf6:	e003      	b.n	8000d00 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d0c:	d10d      	bne.n	8000d2a <RCC_GetClocksFreq+0x23a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d108      	bne.n	8000d2a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d104      	bne.n	8000d2a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	005a      	lsls	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24
 8000d28:	e003      	b.n	8000d32 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d104      	bne.n	8000d48 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
 8000d46:	e029      	b.n	8000d9c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <RCC_GetClocksFreq+0x270>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10f      	bne.n	8000d74 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8000d5c:	e01e      	b.n	8000d9c <RCC_GetClocksFreq+0x2ac>
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	007a1200 	.word	0x007a1200
 8000d68:	003d0900 	.word	0x003d0900
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000d74:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d104      	bne.n	8000d8a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
 8000d88:	e008      	b.n	8000d9c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000d8a:	4b61      	ldr	r3, [pc, #388]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d102      	bne.n	8000d9c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a5e      	ldr	r2, [pc, #376]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000d9c:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d104      	bne.n	8000db2 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db0:	e021      	b.n	8000df6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000db2:	4b57      	ldr	r3, [pc, #348]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbe:	d104      	bne.n	8000dca <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc8:	e015      	b.n	8000df6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000dca:	4b51      	ldr	r3, [pc, #324]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000dd6:	d104      	bne.n	8000de2 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de0:	e009      	b.n	8000df6 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000de2:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000dee:	d102      	bne.n	8000df6 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000df6:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d104      	bne.n	8000e0c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0a:	e021      	b.n	8000e50 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000e0c:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e18:	d104      	bne.n	8000e24 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
 8000e22:	e015      	b.n	8000e50 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e30:	d104      	bne.n	8000e3c <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e38:	631a      	str	r2, [r3, #48]	; 0x30
 8000e3a:	e009      	b.n	8000e50 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000e44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000e48:	d102      	bne.n	8000e50 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
 8000e64:	e021      	b.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e72:	d104      	bne.n	8000e7e <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7c:	e015      	b.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000e8a:	d104      	bne.n	8000e96 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
 8000e94:	e009      	b.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000ea2:	d102      	bne.n	8000eaa <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d104      	bne.n	8000ec0 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000ebe:	e021      	b.n	8000f04 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ecc:	d104      	bne.n	8000ed8 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ed6:	e015      	b.n	8000f04 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000ee4:	d104      	bne.n	8000ef0 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eee:	e009      	b.n	8000f04 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <RCC_GetClocksFreq+0x420>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ef8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000efc:	d102      	bne.n	8000f04 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <RCC_GetClocksFreq+0x424>)
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f04:	bf00      	nop
 8000f06:	372c      	adds	r7, #44	; 0x2c
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000
 8000f14:	007a1200 	.word	0x007a1200

08000f18 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	330c      	adds	r3, #12
 8000f30:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	78fa      	ldrb	r2, [r7, #3]
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	891b      	ldrh	r3, [r3, #8]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	4613      	mov	r3, r2
 8000fac:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d103      	bne.n	8000fea <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	e005      	b.n	8000ff6 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d102      	bne.n	8000ff6 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001008:	e006      	b.n	8001018 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43da      	mvns	r2, r3
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	400a      	ands	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	3724      	adds	r7, #36	; 0x24
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69da      	ldr	r2, [r3, #28]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e001      	b.n	8001048 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001056:	b480      	push	{r7}
 8001058:	b087      	sub	sp, #28
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	b29b      	uxth	r3, r3
 8001078:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001080:	2201      	movs	r2, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d105      	bne.n	800109c <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	4013      	ands	r3, r2
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e00d      	b.n	80010b8 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d105      	bne.n	80010ae <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e004      	b.n	80010b8 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	0c1b      	lsrs	r3, r3, #16
 80010bc:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80010be:	2201      	movs	r2, #1
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <USART_GetITStatus+0x8e>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80010de:	2301      	movs	r3, #1
 80010e0:	74fb      	strb	r3, [r7, #19]
 80010e2:	e001      	b.n	80010e8 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	2201      	movs	r2, #1
 800110a:	fa02 f103 	lsl.w	r1, r2, r3
 800110e:	4a06      	ldr	r2, [pc, #24]	; (8001128 <NVIC_EnableIRQ+0x30>)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	095b      	lsrs	r3, r3, #5
 8001116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	b29b      	uxth	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <uart_put_char+0x30>)
 800113e:	f7ff ff1d 	bl	8000f7c <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001142:	bf00      	nop
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <uart_put_char+0x30>)
 8001148:	f7ff ff6c 	bl	8001024 <USART_GetFlagStatus>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f8      	beq.n	8001144 <uart_put_char+0x18>
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40004400 	.word	0x40004400

08001160 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e012      	b.n	800119a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b0a      	cmp	r3, #10
 800117e:	d102      	bne.n	8001186 <_write_r+0x26>
            uart_put_char('\r');
 8001180:	200d      	movs	r0, #13
 8001182:	f7ff ffd3 	bl	800112c <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffcc 	bl	800112c <uart_put_char>
    for (n = 0; n < len; n++) {
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	dbe8      	blt.n	8001174 <_write_r+0x14>
    }

    return len;
 80011a2:	683b      	ldr	r3, [r7, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80011b0:	4915      	ldr	r1, [pc, #84]	; (8001208 <USART2_IRQHandler+0x5c>)
 80011b2:	4816      	ldr	r0, [pc, #88]	; (800120c <USART2_IRQHandler+0x60>)
 80011b4:	f7ff ff4f 	bl	8001056 <USART_GetITStatus>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d021      	beq.n	8001202 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <USART2_IRQHandler+0x60>)
 80011c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011c2:	b299      	uxth	r1, r3
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <USART2_IRQHandler+0x64>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	b2d0      	uxtb	r0, r2
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <USART2_IRQHandler+0x64>)
 80011d0:	7010      	strb	r0, [r2, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	b2c9      	uxtb	r1, r1
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <USART2_IRQHandler+0x68>)
 80011d8:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <USART2_IRQHandler+0x6c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2bff      	cmp	r3, #255	; 0xff
 80011e2:	d107      	bne.n	80011f4 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <USART2_IRQHandler+0x70>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	3301      	adds	r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <USART2_IRQHandler+0x70>)
 80011f0:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80011f2:	e006      	b.n	8001202 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <USART2_IRQHandler+0x6c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <USART2_IRQHandler+0x6c>)
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	00050105 	.word	0x00050105
 800120c:	40004400 	.word	0x40004400
 8001210:	200001ac 	.word	0x200001ac
 8001214:	200000ac 	.word	0x200000ac
 8001218:	200001ae 	.word	0x200001ae
 800121c:	200001ad 	.word	0x200001ad

08001220 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001228:	4b86      	ldr	r3, [pc, #536]	; (8001444 <uart_init+0x224>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fb65 	bl	8002900 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001236:	4b83      	ldr	r3, [pc, #524]	; (8001444 <uart_init+0x224>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fb5e 	bl	8002900 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001244:	4b80      	ldr	r3, [pc, #512]	; (8001448 <uart_init+0x228>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	4a7f      	ldr	r2, [pc, #508]	; (8001448 <uart_init+0x228>)
 800124a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001250:	4b7d      	ldr	r3, [pc, #500]	; (8001448 <uart_init+0x228>)
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	4a7c      	ldr	r2, [pc, #496]	; (8001448 <uart_init+0x228>)
 8001256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125a:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 800125c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001266:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800126a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 800126c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001276:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800127a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 800127c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001286:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800128a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 800128c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001296:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800129a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 800129c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012aa:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80012ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012b6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80012ba:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80012bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012c0:	889b      	ldrh	r3, [r3, #4]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012c8:	f023 030c 	bic.w	r3, r3, #12
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80012d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012d8:	8892      	ldrh	r2, [r2, #4]
 80012da:	b292      	uxth	r2, r2
 80012dc:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80012de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012ec:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80012ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80012fc:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80012fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800130c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800130e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001318:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800131c:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 800131e:	4b4b      	ldr	r3, [pc, #300]	; (800144c <uart_init+0x22c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a4a      	ldr	r2, [pc, #296]	; (800144c <uart_init+0x22c>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 800132a:	4b48      	ldr	r3, [pc, #288]	; (800144c <uart_init+0x22c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a47      	ldr	r2, [pc, #284]	; (800144c <uart_init+0x22c>)
 8001330:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001334:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001336:	4b45      	ldr	r3, [pc, #276]	; (800144c <uart_init+0x22c>)
 8001338:	4a44      	ldr	r2, [pc, #272]	; (800144c <uart_init+0x22c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 800133e:	4b43      	ldr	r3, [pc, #268]	; (800144c <uart_init+0x22c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a42      	ldr	r2, [pc, #264]	; (800144c <uart_init+0x22c>)
 8001344:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001348:	f023 030c 	bic.w	r3, r3, #12
 800134c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <uart_init+0x22c>)
 8001350:	4a3e      	ldr	r2, [pc, #248]	; (800144c <uart_init+0x22c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <uart_init+0x22c>)
 8001358:	4a3c      	ldr	r2, [pc, #240]	; (800144c <uart_init+0x22c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <uart_init+0x22c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a3a      	ldr	r2, [pc, #232]	; (800144c <uart_init+0x22c>)
 8001364:	f043 030c 	orr.w	r3, r3, #12
 8001368:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <uart_init+0x22c>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4a37      	ldr	r2, [pc, #220]	; (800144c <uart_init+0x22c>)
 8001370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001374:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <uart_init+0x22c>)
 8001378:	4a34      	ldr	r2, [pc, #208]	; (800144c <uart_init+0x22c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001382:	2300      	movs	r3, #0
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
 8001386:	2300      	movs	r3, #0
 8001388:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fbae 	bl	8000af0 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001396:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <uart_init+0x22c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d010      	beq.n	80013c6 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80013a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a6:	005a      	lsls	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80013b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	fb01 f202 	mul.w	r2, r1, r2
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80013c4:	e00d      	b.n	80013e2 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80013c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80013d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	fb01 f202 	mul.w	r2, r1, r2
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d302      	bcc.n	80013f2 <uart_init+0x1d2>
        divider++;
 80013ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ee:	3301      	adds	r3, #1
 80013f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <uart_init+0x22c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80013fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001400:	085b      	lsrs	r3, r3, #1
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800140a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800140e:	4013      	ands	r3, r2
 8001410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001412:	4313      	orrs	r3, r2
 8001414:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <uart_init+0x22c>)
 8001418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800141a:	b292      	uxth	r2, r2
 800141c:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <uart_init+0x22c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <uart_init+0x22c>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800142a:	2201      	movs	r2, #1
 800142c:	4908      	ldr	r1, [pc, #32]	; (8001450 <uart_init+0x230>)
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <uart_init+0x22c>)
 8001430:	f7ff fdb6 	bl	8000fa0 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001434:	2026      	movs	r0, #38	; 0x26
 8001436:	f7ff fe5f 	bl	80010f8 <NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3750      	adds	r7, #80	; 0x50
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000002c 	.word	0x2000002c
 8001448:	40021000 	.word	0x40021000
 800144c:	40004400 	.word	0x40004400
 8001450:	00050105 	.word	0x00050105

08001454 <lcd_transmit_byte>:

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <lcd_transmit_byte+0x5c>)
 8001460:	8a9b      	ldrh	r3, [r3, #20]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <lcd_transmit_byte+0x5c>)
 8001466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800146a:	b29b      	uxth	r3, r3
 800146c:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 800146e:	bf00      	nop
 8001470:	2102      	movs	r1, #2
 8001472:	4810      	ldr	r0, [pc, #64]	; (80014b4 <lcd_transmit_byte+0x60>)
 8001474:	f7ff fd66 	bl	8000f44 <SPI_I2S_GetFlagStatus>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d1f8      	bne.n	8001470 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4619      	mov	r1, r3
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <lcd_transmit_byte+0x60>)
 8001484:	f7ff fd48 	bl	8000f18 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001488:	bf00      	nop
 800148a:	2102      	movs	r1, #2
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <lcd_transmit_byte+0x60>)
 800148e:	f7ff fd59 	bl	8000f44 <SPI_I2S_GetFlagStatus>
 8001492:	4603      	mov	r3, r0
 8001494:	2b01      	cmp	r3, #1
 8001496:	d1f8      	bne.n	800148a <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <lcd_transmit_byte+0x5c>)
 800149a:	8a9b      	ldrh	r3, [r3, #20]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <lcd_transmit_byte+0x5c>)
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	8293      	strh	r3, [r2, #20]
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	48000400 	.word	0x48000400
 80014b4:	40003800 	.word	0x40003800

080014b8 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    int i = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80014c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014c8:	8a9b      	ldrh	r3, [r3, #20]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff ffbb 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80014de:	2010      	movs	r0, #16
 80014e0:	f7ff ffb8 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 80014e4:	20b0      	movs	r0, #176	; 0xb0
 80014e6:	f7ff ffb5 	bl	8001454 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80014ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014ee:	8a9b      	ldrh	r3, [r3, #20]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e009      	b.n	8001518 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ffa1 	bl	8001454 <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b7f      	cmp	r3, #127	; 0x7f
 800151c:	ddf2      	ble.n	8001504 <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800151e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001522:	8a9b      	ldrh	r3, [r3, #20]
 8001524:	b29b      	uxth	r3, r3
 8001526:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800152a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800152e:	b29b      	uxth	r3, r3
 8001530:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff ff8e 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001538:	2010      	movs	r0, #16
 800153a:	f7ff ff8b 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 800153e:	20b1      	movs	r0, #177	; 0xb1
 8001540:	f7ff ff88 	bl	8001454 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001548:	8a9b      	ldrh	r3, [r3, #20]
 800154a:	b29b      	uxth	r3, r3
 800154c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	b29b      	uxth	r3, r3
 8001556:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e009      	b.n	8001572 <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff74 	bl	8001454 <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3301      	adds	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2bff      	cmp	r3, #255	; 0xff
 8001576:	ddf2      	ble.n	800155e <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001578:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800157c:	8a9b      	ldrh	r3, [r3, #20]
 800157e:	b29b      	uxth	r3, r3
 8001580:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001588:	b29b      	uxth	r3, r3
 800158a:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff ff61 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001592:	2010      	movs	r0, #16
 8001594:	f7ff ff5e 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8001598:	20b2      	movs	r0, #178	; 0xb2
 800159a:	f7ff ff5b 	bl	8001454 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 800159e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015a2:	8a9b      	ldrh	r3, [r3, #20]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 80015b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e009      	b.n	80015ce <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff46 	bl	8001454 <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80015d4:	dbf1      	blt.n	80015ba <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80015d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015da:	8a9b      	ldrh	r3, [r3, #20]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff ff32 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80015f0:	2010      	movs	r0, #16
 80015f2:	f7ff ff2f 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 80015f6:	20b3      	movs	r0, #179	; 0xb3
 80015f8:	f7ff ff2c 	bl	8001454 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80015fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001600:	8a9b      	ldrh	r3, [r3, #20]
 8001602:	b29b      	uxth	r3, r3
 8001604:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	b29b      	uxth	r3, r3
 800160e:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 8001610:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e009      	b.n	800162c <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff17 	bl	8001454 <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001632:	dbf1      	blt.n	8001618 <lcd_push_buffer+0x160>
    }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <lcd_reset>:

void lcd_reset()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8001646:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800164a:	8a9b      	ldrh	r3, [r3, #20]
 800164c:	b29b      	uxth	r3, r3
 800164e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001656:	b29b      	uxth	r3, r3
 8001658:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <lcd_reset+0xd8>)
 800165c:	8a9b      	ldrh	r3, [r3, #20]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <lcd_reset+0xd8>)
 8001662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001666:	b29b      	uxth	r3, r3
 8001668:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <lcd_reset+0xd8>)
 800166c:	8a9b      	ldrh	r3, [r3, #20]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4a29      	ldr	r2, [pc, #164]	; (8001718 <lcd_reset+0xd8>)
 8001672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001676:	b29b      	uxth	r3, r3
 8001678:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	e003      	b.n	8001688 <lcd_reset+0x48>
 8001680:	bf00      	nop
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3301      	adds	r3, #1
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f241 2247 	movw	r2, #4679	; 0x1247
 800168e:	4293      	cmp	r3, r2
 8001690:	d9f6      	bls.n	8001680 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <lcd_reset+0xd8>)
 8001694:	8a9b      	ldrh	r3, [r3, #20]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <lcd_reset+0xd8>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	b29b      	uxth	r3, r3
 80016a0:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	e003      	b.n	80016b0 <lcd_reset+0x70>
 80016a8:	bf00      	nop
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4a1a      	ldr	r2, [pc, #104]	; (800171c <lcd_reset+0xdc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d9f7      	bls.n	80016a8 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80016b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016bc:	8a9b      	ldrh	r3, [r3, #20]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 80016cc:	20ae      	movs	r0, #174	; 0xae
 80016ce:	f7ff fec1 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 80016d2:	20a2      	movs	r0, #162	; 0xa2
 80016d4:	f7ff febe 	bl	8001454 <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 80016d8:	20a0      	movs	r0, #160	; 0xa0
 80016da:	f7ff febb 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 80016de:	20c8      	movs	r0, #200	; 0xc8
 80016e0:	f7ff feb8 	bl	8001454 <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 80016e4:	2022      	movs	r0, #34	; 0x22
 80016e6:	f7ff feb5 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 80016ea:	202f      	movs	r0, #47	; 0x2f
 80016ec:	f7ff feb2 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 80016f0:	2040      	movs	r0, #64	; 0x40
 80016f2:	f7ff feaf 	bl	8001454 <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 80016f6:	20af      	movs	r0, #175	; 0xaf
 80016f8:	f7ff feac 	bl	8001454 <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 80016fc:	2081      	movs	r0, #129	; 0x81
 80016fe:	f7ff fea9 	bl	8001454 <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 8001702:	2017      	movs	r0, #23
 8001704:	f7ff fea6 	bl	8001454 <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8001708:	20a6      	movs	r0, #166	; 0xa6
 800170a:	f7ff fea3 	bl	8001454 <lcd_transmit_byte>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	48000400 	.word	0x48000400
 800171c:	0005f36f 	.word	0x0005f36f

08001720 <lcd_init>:

void lcd_init() {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8001724:	4b9d      	ldr	r3, [pc, #628]	; (800199c <lcd_init+0x27c>)
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	4a9c      	ldr	r2, [pc, #624]	; (800199c <lcd_init+0x27c>)
 800172a:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 800172e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8001730:	4b9a      	ldr	r3, [pc, #616]	; (800199c <lcd_init+0x27c>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a99      	ldr	r2, [pc, #612]	; (800199c <lcd_init+0x27c>)
 8001736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173a:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 800173c:	4b98      	ldr	r3, [pc, #608]	; (80019a0 <lcd_init+0x280>)
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	4a97      	ldr	r2, [pc, #604]	; (80019a0 <lcd_init+0x280>)
 8001742:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001746:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8001748:	4b95      	ldr	r3, [pc, #596]	; (80019a0 <lcd_init+0x280>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	4a94      	ldr	r2, [pc, #592]	; (80019a0 <lcd_init+0x280>)
 800174e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001752:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8001754:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <lcd_init+0x280>)
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	4a91      	ldr	r2, [pc, #580]	; (80019a0 <lcd_init+0x280>)
 800175a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800175e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8001760:	4b8f      	ldr	r3, [pc, #572]	; (80019a0 <lcd_init+0x280>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	4a8e      	ldr	r2, [pc, #568]	; (80019a0 <lcd_init+0x280>)
 8001766:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800176a:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 800176c:	4b8c      	ldr	r3, [pc, #560]	; (80019a0 <lcd_init+0x280>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a8b      	ldr	r2, [pc, #556]	; (80019a0 <lcd_init+0x280>)
 8001772:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8001776:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001778:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <lcd_init+0x280>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a88      	ldr	r2, [pc, #544]	; (80019a0 <lcd_init+0x280>)
 800177e:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8001782:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8001784:	4b86      	ldr	r3, [pc, #536]	; (80019a0 <lcd_init+0x280>)
 8001786:	889b      	ldrh	r3, [r3, #4]
 8001788:	b29a      	uxth	r2, r3
 800178a:	4985      	ldr	r1, [pc, #532]	; (80019a0 <lcd_init+0x280>)
 800178c:	f645 73ff 	movw	r3, #24575	; 0x5fff
 8001790:	4013      	ands	r3, r2
 8001792:	b29b      	uxth	r3, r3
 8001794:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001796:	4a82      	ldr	r2, [pc, #520]	; (80019a0 <lcd_init+0x280>)
 8001798:	4b81      	ldr	r3, [pc, #516]	; (80019a0 <lcd_init+0x280>)
 800179a:	8892      	ldrh	r2, [r2, #4]
 800179c:	b292      	uxth	r2, r2
 800179e:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 80017a0:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <lcd_init+0x280>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a7e      	ldr	r2, [pc, #504]	; (80019a0 <lcd_init+0x280>)
 80017a6:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80017aa:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <lcd_init+0x280>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a7b      	ldr	r2, [pc, #492]	; (80019a0 <lcd_init+0x280>)
 80017b2:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80017b6:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 80017b8:	4b79      	ldr	r3, [pc, #484]	; (80019a0 <lcd_init+0x280>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a78      	ldr	r2, [pc, #480]	; (80019a0 <lcd_init+0x280>)
 80017be:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80017c2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80017c4:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <lcd_init+0x280>)
 80017c6:	4a76      	ldr	r2, [pc, #472]	; (80019a0 <lcd_init+0x280>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 80017cc:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <lcd_init+0x280>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a73      	ldr	r2, [pc, #460]	; (80019a0 <lcd_init+0x280>)
 80017d2:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80017d6:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80017d8:	4b71      	ldr	r3, [pc, #452]	; (80019a0 <lcd_init+0x280>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a70      	ldr	r2, [pc, #448]	; (80019a0 <lcd_init+0x280>)
 80017de:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80017e2:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 80017e4:	4b6e      	ldr	r3, [pc, #440]	; (80019a0 <lcd_init+0x280>)
 80017e6:	889b      	ldrh	r3, [r3, #4]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4a6d      	ldr	r2, [pc, #436]	; (80019a0 <lcd_init+0x280>)
 80017ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80017f8:	4a69      	ldr	r2, [pc, #420]	; (80019a0 <lcd_init+0x280>)
 80017fa:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <lcd_init+0x280>)
 80017fc:	8892      	ldrh	r2, [r2, #4]
 80017fe:	b292      	uxth	r2, r2
 8001800:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <lcd_init+0x280>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a66      	ldr	r2, [pc, #408]	; (80019a0 <lcd_init+0x280>)
 8001808:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 800180c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800180e:	4b64      	ldr	r3, [pc, #400]	; (80019a0 <lcd_init+0x280>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a63      	ldr	r2, [pc, #396]	; (80019a0 <lcd_init+0x280>)
 8001814:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8001818:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 800181a:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <lcd_init+0x280>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4a60      	ldr	r2, [pc, #384]	; (80019a0 <lcd_init+0x280>)
 8001820:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8001824:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001826:	4b5e      	ldr	r3, [pc, #376]	; (80019a0 <lcd_init+0x280>)
 8001828:	4a5d      	ldr	r2, [pc, #372]	; (80019a0 <lcd_init+0x280>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 800182e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001838:	0c9b      	lsrs	r3, r3, #18
 800183a:	049b      	lsls	r3, r3, #18
 800183c:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800183e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 800184e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001852:	889b      	ldrh	r3, [r3, #4]
 8001854:	b29b      	uxth	r3, r3
 8001856:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800185a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	b29b      	uxth	r3, r3
 8001864:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001866:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800186a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800186e:	8892      	ldrh	r2, [r2, #4]
 8001870:	b292      	uxth	r2, r2
 8001872:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8001874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800187e:	0c9b      	lsrs	r3, r3, #18
 8001880:	049b      	lsls	r3, r3, #18
 8001882:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 8001894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800189e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 80018a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018ae:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80018b2:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 80018b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	049b      	lsls	r3, r3, #18
 80018c2:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80018c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <lcd_init+0x280>)
 80018d2:	8a9b      	ldrh	r3, [r3, #20]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <lcd_init+0x280>)
 80018d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018dc:	b29b      	uxth	r3, r3
 80018de:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80018e0:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <lcd_init+0x284>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4a2f      	ldr	r2, [pc, #188]	; (80019a4 <lcd_init+0x284>)
 80018e8:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 80018f0:	4a2c      	ldr	r2, [pc, #176]	; (80019a4 <lcd_init+0x284>)
 80018f2:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <lcd_init+0x284>)
 80018f4:	8812      	ldrh	r2, [r2, #0]
 80018f6:	b292      	uxth	r2, r2
 80018f8:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <lcd_init+0x284>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <lcd_init+0x284>)
 8001902:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8001906:	b29b      	uxth	r3, r3
 8001908:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <lcd_init+0x284>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <lcd_init+0x284>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	b29b      	uxth	r3, r3
 8001918:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <lcd_init+0x284>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <lcd_init+0x284>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	b29b      	uxth	r3, r3
 8001928:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <lcd_init+0x284>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <lcd_init+0x284>)
 8001932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001936:	b29b      	uxth	r3, r3
 8001938:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <lcd_init+0x284>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <lcd_init+0x284>)
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 800194a:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <lcd_init+0x284>)
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <lcd_init+0x284>)
 800194e:	8812      	ldrh	r2, [r2, #0]
 8001950:	b292      	uxth	r2, r2
 8001952:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <lcd_init+0x284>)
 8001956:	889b      	ldrh	r3, [r3, #4]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <lcd_init+0x284>)
 800195c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001960:	b29b      	uxth	r3, r3
 8001962:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <lcd_init+0x284>)
 8001966:	889b      	ldrh	r3, [r3, #4]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <lcd_init+0x284>)
 800196c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001970:	b29b      	uxth	r3, r3
 8001972:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <lcd_init+0x284>)
 8001976:	8b9b      	ldrh	r3, [r3, #28]
 8001978:	b29b      	uxth	r3, r3
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <lcd_init+0x284>)
 800197c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001980:	b29b      	uxth	r3, r3
 8001982:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <lcd_init+0x284>)
 8001986:	2207      	movs	r2, #7
 8001988:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <lcd_init+0x284>)
 800198c:	889b      	ldrh	r3, [r3, #4]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <lcd_init+0x284>)
 8001992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001996:	b29b      	uxth	r3, r3
 8001998:	e006      	b.n	80019a8 <lcd_init+0x288>
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	48000400 	.word	0x48000400
 80019a4:	40003800 	.word	0x40003800
 80019a8:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <lcd_init+0x2b4>)
 80019ac:	889b      	ldrh	r3, [r3, #4]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <lcd_init+0x2b4>)
 80019b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <lcd_init+0x2b4>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <lcd_init+0x2b4>)
 80019c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 80019ca:	f7ff fe39 	bl	8001640 <lcd_reset>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40003800 	.word	0x40003800

080019d8 <intiJoystick>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi.h"
#include "joystick.h"

void intiJoystick(){
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 80019dc:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <intiJoystick+0x120>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	4a45      	ldr	r2, [pc, #276]	; (8001af8 <intiJoystick+0x120>)
 80019e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e6:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 80019e8:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <intiJoystick+0x120>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	4a42      	ldr	r2, [pc, #264]	; (8001af8 <intiJoystick+0x120>)
 80019ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f2:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <intiJoystick+0x120>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <intiJoystick+0x120>)
 80019fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019fe:	6153      	str	r3, [r2, #20]

	// Set pin PC0 to input
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001a00:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <intiJoystick+0x124>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a3d      	ldr	r2, [pc, #244]	; (8001afc <intiJoystick+0x124>)
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (0 * 2));	// Set mode register
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <intiJoystick+0x124>)
 8001a0e:	4a3b      	ldr	r2, [pc, #236]	; (8001afc <intiJoystick+0x124>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <intiJoystick+0x124>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4a38      	ldr	r2, [pc, #224]	; (8001afc <intiJoystick+0x124>)
 8001a1a:	f023 0303 	bic.w	r3, r3, #3
 8001a1e:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (0 * 2));// Set push/pull register
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <intiJoystick+0x124>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a35      	ldr	r2, [pc, #212]	; (8001afc <intiJoystick+0x124>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8001a2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00000000 << (4 * 2)); // Set mode register
 8001a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a40:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 8001a48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a56:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x00000002 << (4 * 2)); // Set push/pull register
 8001a58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a66:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <intiJoystick+0x128>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <intiJoystick+0x128>)
 8001a6e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a72:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (5 * 2)); // Set mode register
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <intiJoystick+0x128>)
 8001a76:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <intiJoystick+0x128>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <intiJoystick+0x128>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <intiJoystick+0x128>)
 8001a82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a86:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (5 * 2)); // Set push/pull register
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <intiJoystick+0x128>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <intiJoystick+0x128>)
 8001a8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a92:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PC1 to input
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <intiJoystick+0x124>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <intiJoystick+0x124>)
 8001a9a:	f023 030c 	bic.w	r3, r3, #12
 8001a9e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x00000000 << (1 * 2)); // Set mode register
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <intiJoystick+0x124>)
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <intiJoystick+0x124>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <intiJoystick+0x124>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <intiJoystick+0x124>)
 8001aae:	f023 030c 	bic.w	r3, r3, #12
 8001ab2:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (0x00000002 << (1 * 2)); // Set push/pull register
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <intiJoystick+0x124>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4a10      	ldr	r2, [pc, #64]	; (8001afc <intiJoystick+0x124>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	60d3      	str	r3, [r2, #12]
	// 0x01 - Pull-up
	// 0x02 - Pull-down


	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <intiJoystick+0x128>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <intiJoystick+0x128>)
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0x00000000 << (0 * 2)); // Set mode register
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <intiJoystick+0x128>)
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <intiJoystick+0x128>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <intiJoystick+0x128>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <intiJoystick+0x128>)
 8001ada:	f023 0303 	bic.w	r3, r3, #3
 8001ade:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0x00000002 << (0 * 2)); // Set push/pull register
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <intiJoystick+0x128>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <intiJoystick+0x128>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	60d3      	str	r3, [r2, #12]
	// 0x00 - No pull
	// 0x01 - Pull-up
	// 0x02 - Pull-down

}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	48000800 	.word	0x48000800
 8001b00:	48000400 	.word	0x48000400

08001b04 <readJoystick>:


int16_t readJoystick(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af02      	add	r7, sp, #8
	int32_t a = GPIOC->IDR & (0x0001 << 0); //Read from pin PCx - right
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <readJoystick+0xbc>)
 8001b0c:	8a1b      	ldrh	r3, [r3, #16]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
	int32_t b = GPIOA->IDR & (0x0001 << 4); //Read from pin PCx - up
 8001b16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b1a:	8a1b      	ldrh	r3, [r3, #16]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	617b      	str	r3, [r7, #20]
	int32_t c = GPIOB->IDR & (0x0001 << 5); //Read from pin PCx - center
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <readJoystick+0xc0>)
 8001b26:	8a1b      	ldrh	r3, [r3, #16]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	613b      	str	r3, [r7, #16]
	int32_t d = GPIOC->IDR & (0x0001 << 1); //Read from pin PCx - left
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <readJoystick+0xbc>)
 8001b32:	8a1b      	ldrh	r3, [r3, #16]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60fb      	str	r3, [r7, #12]
	int32_t e = GPIOB->IDR & (0x0001 << 0); //Read from pin PCx - down
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <readJoystick+0xc0>)
 8001b3e:	8a1b      	ldrh	r3, [r3, #16]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]

	if(b){b = 1;}
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <readJoystick+0x4e>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
	if(c){c = 1;}
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <readJoystick+0x58>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
	if(d){d = 1;}
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <readJoystick+0x62>
 8001b62:	2301      	movs	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
	if(e){e = 1;}
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <readJoystick+0x6c>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]

	joy.right 	= a;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	b25a      	sxtb	r2, r3
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <readJoystick+0xc4>)
 8001b76:	70da      	strb	r2, [r3, #3]
	joy.up 		= b;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	b25a      	sxtb	r2, r3
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <readJoystick+0xc4>)
 8001b7e:	701a      	strb	r2, [r3, #0]
	joy.center	= c;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	b25a      	sxtb	r2, r3
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <readJoystick+0xc4>)
 8001b86:	711a      	strb	r2, [r3, #4]
	joy.left	= d;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	b25a      	sxtb	r2, r3
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <readJoystick+0xc4>)
 8001b8e:	709a      	strb	r2, [r3, #2]
	joy.down 	= e;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	b25a      	sxtb	r2, r3
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <readJoystick+0xc4>)
 8001b96:	705a      	strb	r2, [r3, #1]

	gotoxy(1,6);
 8001b98:	2106      	movs	r1, #6
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f000 f972 	bl	8001e84 <gotoxy>
	printf("Joys: %d%d%d%d%d",a,b,c,d,e);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4807      	ldr	r0, [pc, #28]	; (8001bcc <readJoystick+0xc8>)
 8001bb0:	f000 fe8e 	bl	80028d0 <iprintf>
}
 8001bb4:	bf00      	nop
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	48000800 	.word	0x48000800
 8001bc4:	48000400 	.word	0x48000400
 8001bc8:	200001e0 	.word	0x200001e0
 8001bcc:	0800391c 	.word	0x0800391c

08001bd0 <lcd_write_string_scroll>:
	lcd_push_buffer(buffer);
	memset(buffer, 0x00, p);
}


int lcd_write_string_scroll(char slice[], uint32_t line, uint32_t place) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
	for (int j = 0; j < strlen(slice); j++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	e032      	b.n	8001c48 <lcd_write_string_scroll+0x78>
		int x = slice[j];
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 5; i++) {
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	e024      	b.n	8001c3c <lcd_write_string_scroll+0x6c>
				if (i + place + j * 5 > 127) {
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	18d1      	adds	r1, r2, r3
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	2b7f      	cmp	r3, #127	; 0x7f
 8001c04:	d902      	bls.n	8001c0c <lcd_write_string_scroll+0x3c>
					place = place - 128;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3b80      	subs	r3, #128	; 0x80
 8001c0a:	607b      	str	r3, [r7, #4]
				}

				buffer[i + place + j * 5] = character_data[x - 32][i];
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f1a3 0220 	sub.w	r2, r3, #32
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	18c8      	adds	r0, r1, r3
 8001c18:	69f9      	ldr	r1, [r7, #28]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	18c1      	adds	r1, r0, r3
 8001c22:	480f      	ldr	r0, [pc, #60]	; (8001c60 <lcd_write_string_scroll+0x90>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	18c2      	adds	r2, r0, r3
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781a      	ldrb	r2, [r3, #0]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <lcd_write_string_scroll+0x94>)
 8001c34:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < 5; i++) {
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	ddd7      	ble.n	8001bf2 <lcd_write_string_scroll+0x22>
	for (int j = 0; j < strlen(slice); j++) {
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3301      	adds	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7fe fac1 	bl	80001d0 <strlen>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d8c5      	bhi.n	8001be2 <lcd_write_string_scroll+0x12>
		}
	}
}
 8001c56:	bf00      	nop
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	08003ca4 	.word	0x08003ca4
 8001c64:	200001e8 	.word	0x200001e8

08001c68 <lcd_update_scroll>:

int lcd_update_scroll(char n[], int p) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
		lcd_write_string_scroll(n, 1, p);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	2101      	movs	r1, #1
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffa9 	bl	8001bd0 <lcd_write_string_scroll>
		lcd_push_buffer(buffer);
 8001c7e:	4807      	ldr	r0, [pc, #28]	; (8001c9c <lcd_update_scroll+0x34>)
 8001c80:	f7ff fc1a 	bl	80014b8 <lcd_push_buffer>
		memset(buffer, 0x00, p);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4804      	ldr	r0, [pc, #16]	; (8001c9c <lcd_update_scroll+0x34>)
 8001c8c:	f000 fe18 	bl	80028c0 <memset>

}
 8001c90:	bf00      	nop
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200001e8 	.word	0x200001e8

08001ca0 <initLed>:
#include "stm32f30x_conf.h" // STM32 config
#include "ansi.h"

void initLed(){
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
	// Set pin PA9 to output - BLUE LED
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2)); // Clear speed register
 8001ca4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cae:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001cb2:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2)); // set speed register
 8001cb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cc2:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOA->OTYPER &= ~(0x0001 << (9 * 1)); // Clear output type register
 8001cc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cc8:	889b      	ldrh	r3, [r3, #4]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9)); // Set output type register
 8001cd8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ce0:	8892      	ldrh	r2, [r2, #4]
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOA->MODER &= ~(0x00000003 << (9 * 2)); // Clear mode register
 8001ce6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cf0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001cf4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2)); // Set mode register
 8001cf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PC7 to output - GREEN LED
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2)); // Clear speed register
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <initLed+0x104>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <initLed+0x104>)
 8001d0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d10:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2)); // set speed register
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <initLed+0x104>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <initLed+0x104>)
 8001d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1c:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOC->OTYPER &= ~(0x0001 << (7 * 1)); // Clear output type register
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <initLed+0x104>)
 8001d20:	889b      	ldrh	r3, [r3, #4]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <initLed+0x104>)
 8001d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7)); // Set output type register
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <initLed+0x104>)
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <initLed+0x104>)
 8001d32:	8892      	ldrh	r2, [r2, #4]
 8001d34:	b292      	uxth	r2, r2
 8001d36:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOC->MODER &= ~(0x00000003 << (7 * 2)); // Clear mode register
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <initLed+0x104>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <initLed+0x104>)
 8001d3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d42:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2)); // Set mode register
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <initLed+0x104>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <initLed+0x104>)
 8001d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4e:	6013      	str	r3, [r2, #0]
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out


	// Set pin PB4 to output - RED LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2)); // Clear speed register
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <initLed+0x108>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <initLed+0x108>)
 8001d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d5a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2)); // set speed register
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <initLed+0x108>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <initLed+0x108>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d66:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (4 * 1)); // Clear output type register
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <initLed+0x108>)
 8001d6a:	889b      	ldrh	r3, [r3, #4]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <initLed+0x108>)
 8001d70:	f023 0310 	bic.w	r3, r3, #16
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4)); // Set output type register
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <initLed+0x108>)
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <initLed+0x108>)
 8001d7c:	8892      	ldrh	r2, [r2, #4]
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <initLed+0x108>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <initLed+0x108>)
 8001d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2)); // Set mode register
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <initLed+0x108>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <initLed+0x108>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	48000800 	.word	0x48000800
 8001da8:	48000400 	.word	0x48000400

08001dac <writeLed>:


void writeLed(){
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

	// Right - Blue
	if(led.blu){
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <writeLed+0x84>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <writeLed+0x1c>
		GPIOA->ODR &= (0x0000 << 9); //Set pin PA9 to low - on
 8001db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001dbc:	8a9b      	ldrh	r3, [r3, #20]
 8001dbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	829a      	strh	r2, [r3, #20]
 8001dc6:	e009      	b.n	8001ddc <writeLed+0x30>
	}
	else{
		GPIOA->ODR |= (0x0001 << 9); //Set pin PA9 to high - off
 8001dc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001dcc:	8a9b      	ldrh	r3, [r3, #20]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	8293      	strh	r3, [r2, #20]
	}


	// Up - Green
	if(led.gre){
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <writeLed+0x84>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <writeLed+0x44>
		GPIOC->ODR &= (0x0000 << 7); //Set pin PC7 to low - on
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <writeLed+0x88>)
 8001de6:	8a9b      	ldrh	r3, [r3, #20]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <writeLed+0x88>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	829a      	strh	r2, [r3, #20]
 8001dee:	e007      	b.n	8001e00 <writeLed+0x54>
	}
	else{
		GPIOC->ODR |= (0x0001 << 7); //Set pin PC7 to high - off
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <writeLed+0x88>)
 8001df2:	8a9b      	ldrh	r3, [r3, #20]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <writeLed+0x88>)
 8001df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	8293      	strh	r3, [r2, #20]
	}


	// Left - Red
	if(led.gre){
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <writeLed+0x84>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <writeLed+0x68>
		GPIOB->ODR &= (0x0000 << 4); //Set pin PB4 to low - on
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <writeLed+0x8c>)
 8001e0a:	8a9b      	ldrh	r3, [r3, #20]
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <writeLed+0x8c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	829a      	strh	r2, [r3, #20]
	}
	else{
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
	}

}
 8001e12:	e007      	b.n	8001e24 <writeLed+0x78>
		GPIOB->ODR |= (0x0001 << 4); //Set pin PB4 to high - off
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <writeLed+0x8c>)
 8001e16:	8a9b      	ldrh	r3, [r3, #20]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <writeLed+0x8c>)
 8001e1c:	f043 0310 	orr.w	r3, r3, #16
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	8293      	strh	r3, [r2, #20]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	200001cc 	.word	0x200001cc
 8001e34:	48000800 	.word	0x48000800
 8001e38:	48000400 	.word	0x48000400

08001e3c <resetbgcolor>:
		foreground -= 8;
	}
	printf("%c[%d;%d;%dm", ESC, type, foreground + 30, background + 40);
}

void resetbgcolor() {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
 8001e40:	211b      	movs	r1, #27
 8001e42:	4802      	ldr	r0, [pc, #8]	; (8001e4c <resetbgcolor+0x10>)
 8001e44:	f000 fd44 	bl	80028d0 <iprintf>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	08003954 	.word	0x08003954

08001e50 <clrscr>:

void clrscr() {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 8001e54:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <clrscr+0x28>)
 8001e56:	211b      	movs	r1, #27
 8001e58:	4808      	ldr	r0, [pc, #32]	; (8001e7c <clrscr+0x2c>)
 8001e5a:	f000 fd39 	bl	80028d0 <iprintf>
	printf("%c[%s", ESC, "3J");
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <clrscr+0x30>)
 8001e60:	211b      	movs	r1, #27
 8001e62:	4806      	ldr	r0, [pc, #24]	; (8001e7c <clrscr+0x2c>)
 8001e64:	f000 fd34 	bl	80028d0 <iprintf>
	resetbgcolor();
 8001e68:	f7ff ffe8 	bl	8001e3c <resetbgcolor>

	gotoxy(0, 0);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 f808 	bl	8001e84 <gotoxy>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	0800395c 	.word	0x0800395c
 8001e7c:	08003960 	.word	0x08003960
 8001e80:	08003968 	.word	0x08003968

08001e84 <gotoxy>:

void clreol() {
	printf("%c[%s", ESC, "2k");
}

void gotoxy(int c, int r) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", ESC, r, c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	211b      	movs	r1, #27
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <gotoxy+0x20>)
 8001e96:	f000 fd1b 	bl	80028d0 <iprintf>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	08003970 	.word	0x08003970

08001ea8 <NVIC_EnableIRQ>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2201      	movs	r2, #1
 8001eba:	fa02 f103 	lsl.w	r1, r2, r3
 8001ebe:	4a06      	ldr	r2, [pc, #24]	; (8001ed8 <NVIC_EnableIRQ+0x30>)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da0b      	bge.n	8001f08 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <NVIC_SetPriority+0x4c>)
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	3b04      	subs	r3, #4
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001f06:	e009      	b.n	8001f1c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4907      	ldr	r1, [pc, #28]	; (8001f2c <NVIC_SetPriority+0x50>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <initTimer2>:
#include "ansi.h"
#include "timer.h"
#include "joystick.h"


void initTimer2(){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2;
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <initTimer2+0xd8>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	4a33      	ldr	r2, [pc, #204]	; (8002008 <initTimer2+0xd8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 	= 0x0000; // Configure timer 2
 8001f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f44:	2200      	movs	r2, #0
 8001f46:	801a      	strh	r2, [r3, #0]

	TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 8001f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f56:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 8001f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6213      	str	r3, [r2, #32]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 8001f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f76:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 8001f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f96:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8001f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa2:	f023 0308 	bic.w	r3, r3, #8
 8001fa6:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8001fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	61d3      	str	r3, [r2, #28]
	TIM2->CCR3 = RELOAD_VALUE / 2; // Set duty cycle to 50 %
 8001fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fbc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001fc0:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CR1 	= 0x0001; // Configure timer 2
 8001fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	801a      	strh	r2, [r3, #0]

	TIM2->ARR 	= 0xF9FF; // Set reload value
 8001fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fce:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC 	= 0x0009; // Set prescale value
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd8:	2209      	movs	r2, #9
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->DIER	|= 0x0001;
 8001fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	60d3      	str	r3, [r2, #12]
	TIM2->SR	= 0x0000;
 8001fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]

	NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	201c      	movs	r0, #28
 8001ff8:	f7ff ff70 	bl	8001edc <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt
 8001ffc:	201c      	movs	r0, #28
 8001ffe:	f7ff ff53 	bl	8001ea8 <NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
	printf("This is Tim2: %d",i);
	i++;
*/

//Do whatever you want here, but make sure it doesn’t take too much Time.
TIM2->SR &= ~0x0001; // Clear interrupt bit
 8002010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6113      	str	r3, [r2, #16]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <initBuzz>:


void initBuzz(){
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	// Set pin PA9 to output - BLUE LED
	GPIOB->OSPEEDR &= ~(0x00000003 << (10 * 2)); // Clear speed register
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <initBuzz+0x5c>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <initBuzz+0x5c>)
 8002036:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800203a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (10 * 2)); // set speed register
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <initBuzz+0x5c>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a11      	ldr	r2, [pc, #68]	; (8002088 <initBuzz+0x5c>)
 8002042:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002046:	6093      	str	r3, [r2, #8]
	// 0x01 - 10  Hz
	// 0x02 - 2 MHz
	// 0x03 - 50 MHz
	GPIOB->OTYPER &= ~(0x0001 << (10 * 1)); // Clear output type register
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <initBuzz+0x5c>)
 800204a:	889b      	ldrh	r3, [r3, #4]
 800204c:	b29b      	uxth	r3, r3
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <initBuzz+0x5c>)
 8002050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002054:	b29b      	uxth	r3, r3
 8002056:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (10)); // Set output type register
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <initBuzz+0x5c>)
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <initBuzz+0x5c>)
 800205c:	8892      	ldrh	r2, [r2, #4]
 800205e:	b292      	uxth	r2, r2
 8002060:	809a      	strh	r2, [r3, #4]
	// 0x00 - Push pull
	// 0x01 - Open drain
	GPIOB->MODER &= ~(0x00000003 << (10 * 2)); // Clear mode register
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <initBuzz+0x5c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <initBuzz+0x5c>)
 8002068:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800206c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000002 << (10 * 2)); // Set mode register
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <initBuzz+0x5c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <initBuzz+0x5c>)
 8002074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002078:	6013      	str	r3, [r2, #0]
	// 0x00 – Input
	// 0x01 - Output
	// 0x02 - Alternate Function
	// 0x03 - Analog in/out

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 800207a:	2201      	movs	r2, #1
 800207c:	210a      	movs	r1, #10
 800207e:	4802      	ldr	r0, [pc, #8]	; (8002088 <initBuzz+0x5c>)
 8002080:	f7fe fcec 	bl	8000a5c <GPIO_PinAFConfig>

}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	48000400 	.word	0x48000400

0800208c <updateBuzz>:


void updateBuzz() {
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

	if (led.blu){
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <updateBuzz+0x70>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d02b      	beq.n	80020f0 <updateBuzz+0x64>
		if (joy.down) {
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <updateBuzz+0x74>)
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	b25b      	sxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <updateBuzz+0x1e>
			buzzTone = 50;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <updateBuzz+0x78>)
 80020a4:	2232      	movs	r2, #50	; 0x32
 80020a6:	601a      	str	r2, [r3, #0]
		else if (joy.center) {
			buzzTone = 0;
		}
	}
	//else (buzzTone = 0);
}
 80020a8:	e022      	b.n	80020f0 <updateBuzz+0x64>
		else if (joy.left) {
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <updateBuzz+0x74>)
 80020ac:	789b      	ldrb	r3, [r3, #2]
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <updateBuzz+0x30>
			buzzTone = 100;
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <updateBuzz+0x78>)
 80020b6:	2264      	movs	r2, #100	; 0x64
 80020b8:	601a      	str	r2, [r3, #0]
}
 80020ba:	e019      	b.n	80020f0 <updateBuzz+0x64>
		else if (joy.up) {
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <updateBuzz+0x74>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <updateBuzz+0x42>
			buzzTone = 150;
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <updateBuzz+0x78>)
 80020c8:	2296      	movs	r2, #150	; 0x96
 80020ca:	601a      	str	r2, [r3, #0]
}
 80020cc:	e010      	b.n	80020f0 <updateBuzz+0x64>
		else if (joy.right) {
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <updateBuzz+0x74>)
 80020d0:	78db      	ldrb	r3, [r3, #3]
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <updateBuzz+0x54>
			buzzTone = 200;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <updateBuzz+0x78>)
 80020da:	22c8      	movs	r2, #200	; 0xc8
 80020dc:	601a      	str	r2, [r3, #0]
}
 80020de:	e007      	b.n	80020f0 <updateBuzz+0x64>
		else if (joy.center) {
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <updateBuzz+0x74>)
 80020e2:	791b      	ldrb	r3, [r3, #4]
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <updateBuzz+0x64>
			buzzTone = 0;
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <updateBuzz+0x78>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	200001cc 	.word	0x200001cc
 8002100:	200001e0 	.word	0x200001e0
 8002104:	200001c4 	.word	0x200001c4

08002108 <playTone>:


void playTone(char s[],int i){
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af02      	add	r7, sp, #8
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	int length = strlen(s);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe f85c 	bl	80001d0 <strlen>
 8002118:	4603      	mov	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]


	switch(s[i]){
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3b41      	subs	r3, #65	; 0x41
 8002126:	2b26      	cmp	r3, #38	; 0x26
 8002128:	f200 8098 	bhi.w	800225c <playTone+0x154>
 800212c:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <playTone+0x2c>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002249 	.word	0x08002249
 8002138:	08002253 	.word	0x08002253
 800213c:	08002217 	.word	0x08002217
 8002140:	08002221 	.word	0x08002221
 8002144:	0800222b 	.word	0x0800222b
 8002148:	08002235 	.word	0x08002235
 800214c:	0800223f 	.word	0x0800223f
 8002150:	0800225d 	.word	0x0800225d
 8002154:	0800225d 	.word	0x0800225d
 8002158:	0800225d 	.word	0x0800225d
 800215c:	0800225d 	.word	0x0800225d
 8002160:	0800225d 	.word	0x0800225d
 8002164:	0800225d 	.word	0x0800225d
 8002168:	0800225d 	.word	0x0800225d
 800216c:	0800225d 	.word	0x0800225d
 8002170:	0800225d 	.word	0x0800225d
 8002174:	0800225d 	.word	0x0800225d
 8002178:	0800225d 	.word	0x0800225d
 800217c:	0800225d 	.word	0x0800225d
 8002180:	0800225d 	.word	0x0800225d
 8002184:	0800225d 	.word	0x0800225d
 8002188:	0800225d 	.word	0x0800225d
 800218c:	0800225d 	.word	0x0800225d
 8002190:	0800225d 	.word	0x0800225d
 8002194:	0800225d 	.word	0x0800225d
 8002198:	0800225d 	.word	0x0800225d
 800219c:	0800225d 	.word	0x0800225d
 80021a0:	0800225d 	.word	0x0800225d
 80021a4:	0800225d 	.word	0x0800225d
 80021a8:	0800225d 	.word	0x0800225d
 80021ac:	0800225d 	.word	0x0800225d
 80021b0:	0800225d 	.word	0x0800225d
 80021b4:	08002203 	.word	0x08002203
 80021b8:	0800220d 	.word	0x0800220d
 80021bc:	080021d1 	.word	0x080021d1
 80021c0:	080021db 	.word	0x080021db
 80021c4:	080021e5 	.word	0x080021e5
 80021c8:	080021ef 	.word	0x080021ef
 80021cc:	080021f9 	.word	0x080021f9
    case 'c':
        buzzTone = 261;
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <playTone+0x18c>)
 80021d2:	f240 1205 	movw	r2, #261	; 0x105
 80021d6:	601a      	str	r2, [r3, #0]
        break;
 80021d8:	e044      	b.n	8002264 <playTone+0x15c>
    case 'd':
        buzzTone = 293;
 80021da:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <playTone+0x18c>)
 80021dc:	f240 1225 	movw	r2, #293	; 0x125
 80021e0:	601a      	str	r2, [r3, #0]
        break;
 80021e2:	e03f      	b.n	8002264 <playTone+0x15c>
    case 'e':
        buzzTone = 329;
 80021e4:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <playTone+0x18c>)
 80021e6:	f240 1249 	movw	r2, #329	; 0x149
 80021ea:	601a      	str	r2, [r3, #0]
        break;
 80021ec:	e03a      	b.n	8002264 <playTone+0x15c>
    case 'f':
        buzzTone = 349;
 80021ee:	4b29      	ldr	r3, [pc, #164]	; (8002294 <playTone+0x18c>)
 80021f0:	f240 125d 	movw	r2, #349	; 0x15d
 80021f4:	601a      	str	r2, [r3, #0]
        break;
 80021f6:	e035      	b.n	8002264 <playTone+0x15c>
    case 'g':
        buzzTone = 392;
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <playTone+0x18c>)
 80021fa:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80021fe:	601a      	str	r2, [r3, #0]
        break;
 8002200:	e030      	b.n	8002264 <playTone+0x15c>
    case 'a':
        buzzTone = 440;
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <playTone+0x18c>)
 8002204:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8002208:	601a      	str	r2, [r3, #0]
        break;
 800220a:	e02b      	b.n	8002264 <playTone+0x15c>
    case 'b':
        buzzTone = 491;
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <playTone+0x18c>)
 800220e:	f240 12eb 	movw	r2, #491	; 0x1eb
 8002212:	601a      	str	r2, [r3, #0]
        break;
 8002214:	e026      	b.n	8002264 <playTone+0x15c>
    case 'C':
        buzzTone = 525;
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <playTone+0x18c>)
 8002218:	f240 220d 	movw	r2, #525	; 0x20d
 800221c:	601a      	str	r2, [r3, #0]
        break;
 800221e:	e021      	b.n	8002264 <playTone+0x15c>
    case 'D':
        buzzTone = 561;
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <playTone+0x18c>)
 8002222:	f240 2231 	movw	r2, #561	; 0x231
 8002226:	601a      	str	r2, [r3, #0]
        break;
 8002228:	e01c      	b.n	8002264 <playTone+0x15c>
    case 'E':
        buzzTone = 581;
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <playTone+0x18c>)
 800222c:	f240 2245 	movw	r2, #581	; 0x245
 8002230:	601a      	str	r2, [r3, #0]
        break;
 8002232:	e017      	b.n	8002264 <playTone+0x15c>
    case 'F':
        buzzTone = 601;
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <playTone+0x18c>)
 8002236:	f240 2259 	movw	r2, #601	; 0x259
 800223a:	601a      	str	r2, [r3, #0]
        break;
 800223c:	e012      	b.n	8002264 <playTone+0x15c>
    case 'G':
        buzzTone = 644;
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <playTone+0x18c>)
 8002240:	f44f 7221 	mov.w	r2, #644	; 0x284
 8002244:	601a      	str	r2, [r3, #0]
        break;
 8002246:	e00d      	b.n	8002264 <playTone+0x15c>
    case 'A':
        buzzTone = 692;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <playTone+0x18c>)
 800224a:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800224e:	601a      	str	r2, [r3, #0]
        break;
 8002250:	e008      	b.n	8002264 <playTone+0x15c>
    case 'B':
        buzzTone = 745;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <playTone+0x18c>)
 8002254:	f240 22e9 	movw	r2, #745	; 0x2e9
 8002258:	601a      	str	r2, [r3, #0]
        break;
 800225a:	e003      	b.n	8002264 <playTone+0x15c>
    default:
        buzzTone = 0;
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <playTone+0x18c>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
        break;
 8002262:	bf00      	nop

	}

	gotoxy(1,8);
 8002264:	2108      	movs	r1, #8
 8002266:	2001      	movs	r0, #1
 8002268:	f7ff fe0c 	bl	8001e84 <gotoxy>
	printf("Input[%02d]: %c, Buzz: %04d | Length: %03d",i, s[i],buzzTone,length);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <playTone+0x18c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	460a      	mov	r2, r1
 8002282:	6839      	ldr	r1, [r7, #0]
 8002284:	4804      	ldr	r0, [pc, #16]	; (8002298 <playTone+0x190>)
 8002286:	f000 fb23 	bl	80028d0 <iprintf>





}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200001c4 	.word	0x200001c4
 8002298:	0800397c 	.word	0x0800397c
 800229c:	00000000 	.word	0x00000000

080022a0 <setFreq>:




void setFreq(uint16_t freq)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
    // Calculate the new auto-reload value based on the desired frequency
    uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f939 	bl	8000524 <__aeabi_i2d>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	a11c      	add	r1, pc, #112	; (adr r1, 8002328 <setFreq+0x88>)
 80022b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022bc:	f7fe fac6 	bl	800084c <__aeabi_ddiv>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <setFreq+0x80>)
 80022ce:	f7fe fabd 	bl	800084c <__aeabi_ddiv>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <setFreq+0x84>)
 80022e0:	f7fd ffd2 	bl	8000288 <__aeabi_dsub>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fb96 	bl	8000a1c <__aeabi_d2uiz>
 80022f0:	4603      	mov	r3, r0
 80022f2:	60fb      	str	r3, [r7, #12]

    // Set the new auto-reload value
    TIM2->ARR = reload;
 80022f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Set compare register to maintain 50% duty cycle
    TIM2->CCR3 = reload / 2;
 80022fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	63d3      	str	r3, [r2, #60]	; 0x3c

    // Generate an update event to apply the new settings
    TIM2->EGR |= TIM_EGR_UG;
 8002306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6153      	str	r3, [r2, #20]
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40590000 	.word	0x40590000
 8002324:	3ff00000 	.word	0x3ff00000
 8002328:	00000000 	.word	0x00000000
 800232c:	418e8480 	.word	0x418e8480

08002330 <main>:
#include "ansi.h"
#include "timer.h"
#include "LCD.h"
#include "joystick.h"

int main(void) {
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 8002336:	af00      	add	r7, sp, #0

	// Setup communication with the PC
	uart_init(115200);
 8002338:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800233c:	f7fe ff70 	bl	8001220 <uart_init>
	clrscr();
 8002340:	f7ff fd86 	bl	8001e50 <clrscr>
		readJoystick(&j);
		writeLed(j);
*/


	initLed();
 8002344:	f7ff fcac 	bl	8001ca0 <initLed>
	writeLed();
 8002348:	f7ff fd30 	bl	8001dac <writeLed>

	intiJoystick();
 800234c:	f7ff fb44 	bl	80019d8 <intiJoystick>

	initTimer();
 8002350:	f000 f9ec 	bl	800272c <initTimer>
	initTimer2();
 8002354:	f7ff fdec 	bl	8001f30 <initTimer2>
	initBuzz();
 8002358:	f7ff fe68 	bl	800202c <initBuzz>
	setFreq(0);
 800235c:	2000      	movs	r0, #0
 800235e:	f7ff ff9f 	bl	80022a0 <setFreq>

	refreshRate = 10;
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <main+0x124>)
 8002364:	220a      	movs	r2, #10
 8002366:	601a      	str	r2, [r3, #0]

	lcd_init();
 8002368:	f7ff f9da 	bl	8001720 <lcd_init>
	memset(buffer, 0x00, 512);
 800236c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002370:	2100      	movs	r1, #0
 8002372:	4839      	ldr	r0, [pc, #228]	; (8002458 <main+0x128>)
 8002374:	f000 faa4 	bl	80028c0 <memset>
	char navn[] = "You're going to have a bad time! ";
 8002378:	4b38      	ldr	r3, [pc, #224]	; (800245c <main+0x12c>)
 800237a:	f507 742d 	add.w	r4, r7, #692	; 0x2b4
 800237e:	461d      	mov	r5, r3
 8002380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	8023      	strh	r3, [r4, #0]
	placeLCD = 128;
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <main+0x130>)
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	601a      	str	r2, [r3, #0]

	char notes[] = "d d d a G g f d f g c c d a G g f d f g b b d a G g f d f g A A d";
 8002392:	4a34      	ldr	r2, [pc, #208]	; (8002464 <main+0x134>)
 8002394:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002398:	4611      	mov	r1, r2
 800239a:	2242      	movs	r2, #66	; 0x42
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fa81 	bl	80028a4 <memcpy>
	char meg[] = "d d dd a G g f dfgcc a G g d d f dfg a G g f dfg bb AA d a G g f dfgdd a G g d d fgcc a G g f dfg a G bb d g f dfg a G g f dfgdd AA d d cc a G g f dfg a G g bb d f dfg a G g f dfgf ff AA f f d d d ffff g G gfdfg c d d d dc f ff g G a a a a aa a a g g a d d c aa a g a ag a g f a c g f d ef a fdfgGgfdGgfdfg G c c C a aGgfdef g G G Ggfg f e d e f g a f g e a aGgF feDdC D fdfgGgfdGgfdeg G c c C a aGgfdef g a G Ggfg f e d e f g a f g e a aGgFfe DdC D b f e d f f e b d d b f e d f f e b d d d dd a G g f dfgdd a G d g f dfgCC a G g f dfgcc d d a G g f dfgdd a G g f d d dfgdd a G g f dfgCC a d G g f dfgcc a G g f dfg";
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4a30      	ldr	r2, [pc, #192]	; (8002468 <main+0x138>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	4611      	mov	r1, r2
 80023aa:	f240 2369 	movw	r3, #617	; 0x269
 80023ae:	461a      	mov	r2, r3
 80023b0:	f000 fa78 	bl	80028a4 <memcpy>

	char a[] = "abc";
 80023b4:	463b      	mov	r3, r7
 80023b6:	4a2d      	ldr	r2, [pc, #180]	; (800246c <main+0x13c>)
 80023b8:	601a      	str	r2, [r3, #0]
	//char notec[] = "c";
	//playNotes2(notec);
	int i = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
	int length = strlen(meg);
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fd ff04 	bl	80001d0 <strlen>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

	while (1) {

		if (lcdUpdate == 0){
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <main+0x140>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d11b      	bne.n	800240e <main+0xde>
			lcd_update_scroll(navn, placeLCD);
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <main+0x130>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fc41 	bl	8001c68 <lcd_update_scroll>

			playTone(meg, i);
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	f8d7 12dc 	ldr.w	r1, [r7, #732]	; 0x2dc
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe8b 	bl	8002108 <playTone>
			i++;
 80023f2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80023f6:	3301      	adds	r3, #1
 80023f8:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc

			if (i > length){
 80023fc:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8002400:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8002404:	429a      	cmp	r2, r3
 8002406:	dd02      	ble.n	800240e <main+0xde>
				i = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc


		}


		writeLed();
 800240e:	f7ff fccd 	bl	8001dac <writeLed>
		readJoystick();
 8002412:	f7ff fb77 	bl	8001b04 <readJoystick>

		updateBuzz();
 8002416:	f7ff fe39 	bl	800208c <updateBuzz>
		setFreq(buzzTone);
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <main+0x144>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff3e 	bl	80022a0 <setFreq>

		gotoxy(1,2);
 8002424:	2102      	movs	r1, #2
 8002426:	2001      	movs	r0, #1
 8002428:	f7ff fd2c 	bl	8001e84 <gotoxy>
		printf("Update: %03d, Place: %03d",lcdUpdate, placeLCD);
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <main+0x140>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <main+0x130>)
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	4810      	ldr	r0, [pc, #64]	; (8002478 <main+0x148>)
 8002438:	f000 fa4a 	bl	80028d0 <iprintf>

		gotoxy(1,4);
 800243c:	2104      	movs	r1, #4
 800243e:	2001      	movs	r0, #1
 8002440:	f7ff fd20 	bl	8001e84 <gotoxy>
		printf("Tone: %06d",buzzTone);
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <main+0x144>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	480c      	ldr	r0, [pc, #48]	; (800247c <main+0x14c>)
 800244c:	f000 fa40 	bl	80028d0 <iprintf>
	while (1) {
 8002450:	e7bd      	b.n	80023ce <main+0x9e>
 8002452:	bf00      	nop
 8002454:	200001dc 	.word	0x200001dc
 8002458:	200001e8 	.word	0x200001e8
 800245c:	080039d0 	.word	0x080039d0
 8002460:	200001c8 	.word	0x200001c8
 8002464:	080039f4 	.word	0x080039f4
 8002468:	08003a38 	.word	0x08003a38
 800246c:	00636261 	.word	0x00636261
 8002470:	200001d8 	.word	0x200001d8
 8002474:	200001c4 	.word	0x200001c4
 8002478:	080039a8 	.word	0x080039a8
 800247c:	080039c4 	.word	0x080039c4

08002480 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e00a      	b.n	80024a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002492:	f3af 8000 	nop.w
 8002496:	4601      	mov	r1, r0
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	60ba      	str	r2, [r7, #8]
 800249e:	b2ca      	uxtb	r2, r1
 80024a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dbf0      	blt.n	8002492 <_read+0x12>
	}

return len;
 80024b0:	687b      	ldr	r3, [r7, #4]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
	return -1;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024e2:	605a      	str	r2, [r3, #4]
	return 0;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <_isatty>:

int _isatty(int file)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	return 1;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
	return 0;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <_sbrk+0x50>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x16>
		heap_end = &end;
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <_sbrk+0x50>)
 8002536:	4a10      	ldr	r2, [pc, #64]	; (8002578 <_sbrk+0x54>)
 8002538:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <_sbrk+0x50>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <_sbrk+0x50>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	466a      	mov	r2, sp
 800254a:	4293      	cmp	r3, r2
 800254c:	d907      	bls.n	800255e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800254e:	f000 f97f 	bl	8002850 <__errno>
 8002552:	4603      	mov	r3, r0
 8002554:	220c      	movs	r2, #12
 8002556:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
 800255c:	e006      	b.n	800256c <_sbrk+0x48>
	}

	heap_end += incr;
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <_sbrk+0x50>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a03      	ldr	r2, [pc, #12]	; (8002574 <_sbrk+0x50>)
 8002568:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200001b0 	.word	0x200001b0
 8002578:	200003f8 	.word	0x200003f8

0800257c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002580:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <SystemInit+0x84>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <SystemInit+0x84>)
 8002588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800258c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <SystemInit+0x88>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <SystemInit+0x88>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <SystemInit+0x88>)
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4918      	ldr	r1, [pc, #96]	; (8002604 <SystemInit+0x88>)
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <SystemInit+0x8c>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <SystemInit+0x88>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a15      	ldr	r2, [pc, #84]	; (8002604 <SystemInit+0x88>)
 80025ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80025b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <SystemInit+0x88>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <SystemInit+0x88>)
 80025be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <SystemInit+0x88>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <SystemInit+0x88>)
 80025ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80025ce:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <SystemInit+0x88>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <SystemInit+0x88>)
 80025d6:	f023 030f 	bic.w	r3, r3, #15
 80025da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <SystemInit+0x88>)
 80025de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e0:	4908      	ldr	r1, [pc, #32]	; (8002604 <SystemInit+0x88>)
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <SystemInit+0x90>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <SystemInit+0x88>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80025ee:	f000 f80f 	bl	8002610 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025f2:	4b03      	ldr	r3, [pc, #12]	; (8002600 <SystemInit+0x84>)
 80025f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025f8:	609a      	str	r2, [r3, #8]
#endif  
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000ed00 	.word	0xe000ed00
 8002604:	40021000 	.word	0x40021000
 8002608:	f87fc00c 	.word	0xf87fc00c
 800260c:	ff00fccc 	.word	0xff00fccc

08002610 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <SetSysClock+0x8c>)
 8002616:	2212      	movs	r2, #18
 8002618:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800261a:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <SetSysClock+0x90>)
 800261c:	4a20      	ldr	r2, [pc, #128]	; (80026a0 <SetSysClock+0x90>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <SetSysClock+0x90>)
 8002624:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <SetSysClock+0x90>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <SetSysClock+0x90>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <SetSysClock+0x90>)
 8002630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002634:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <SetSysClock+0x90>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <SetSysClock+0x90>)
 800263c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002640:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <SetSysClock+0x90>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a16      	ldr	r2, [pc, #88]	; (80026a0 <SetSysClock+0x90>)
 8002648:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 800264c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <SetSysClock+0x90>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <SetSysClock+0x90>)
 8002654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002658:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800265a:	bf00      	nop
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <SetSysClock+0x90>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f9      	beq.n	800265c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <SetSysClock+0x90>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <SetSysClock+0x90>)
 800266e:	f023 0303 	bic.w	r3, r3, #3
 8002672:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <SetSysClock+0x90>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <SetSysClock+0x90>)
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002680:	bf00      	nop
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <SetSysClock+0x90>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d1f9      	bne.n	8002682 <SetSysClock+0x72>
  {
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40022000 	.word	0x40022000
 80026a0:	40021000 	.word	0x40021000

080026a4 <NVIC_EnableIRQ>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2201      	movs	r2, #1
 80026b6:	fa02 f103 	lsl.w	r1, r2, r3
 80026ba:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <NVIC_EnableIRQ+0x30>)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <NVIC_SetPriority>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da0b      	bge.n	8002704 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <NVIC_SetPriority+0x4c>)
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	3b04      	subs	r3, #4
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	761a      	strb	r2, [r3, #24]
}
 8002702:	e009      	b.n	8002718 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4907      	ldr	r1, [pc, #28]	; (8002728 <NVIC_SetPriority+0x50>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00
 8002728:	e000e100 	.word	0xe000e100

0800272c <initTimer>:
#include "ansi.h"
#include "stm32f30x_conf.h"
#include "timer.h"


void initTimer(){
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <initTimer+0x48>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <initTimer+0x48>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	6193      	str	r3, [r2, #24]
	TIM15->CR1 	= 0x0001; // Configure timer 15
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <initTimer+0x4c>)
 800273e:	2201      	movs	r2, #1
 8002740:	801a      	strh	r2, [r3, #0]
	TIM15->ARR 	= 0xF9FF; // Set reload value
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <initTimer+0x4c>)
 8002744:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->PSC 	= 0x0009; // Set prescale value
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <initTimer+0x4c>)
 800274c:	2209      	movs	r2, #9
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER	|= 0x0001;
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <initTimer+0x4c>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a08      	ldr	r2, [pc, #32]	; (8002778 <initTimer+0x4c>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	60d3      	str	r3, [r2, #12]
	TIM15->SR	= 0x0000;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <initTimer+0x4c>)
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]
	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0); // Set interrupt priority
 8002762:	2100      	movs	r1, #0
 8002764:	2018      	movs	r0, #24
 8002766:	f7ff ffb7 	bl	80026d8 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); // Enable interrupt
 800276a:	2018      	movs	r0, #24
 800276c:	f7ff ff9a 	bl	80026a4 <NVIC_EnableIRQ>
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	40014000 	.word	0x40014000

0800277c <TIM1_BRK_TIM15_IRQHandler>:


void TIM1_BRK_TIM15_IRQHandler(void) {
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
	if (t.mn == 60) {
		t.mn = 0;
		t.hr++;
	}*/

	lcdUpdate++;
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <TIM1_BRK_TIM15_IRQHandler+0x6c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <TIM1_BRK_TIM15_IRQHandler+0x6c>)
 8002788:	6013      	str	r3, [r2, #0]

	if (lcdUpdate >= refreshRate){
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <TIM1_BRK_TIM15_IRQHandler+0x6c>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <TIM1_BRK_TIM15_IRQHandler+0x70>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	db16      	blt.n	80027c4 <TIM1_BRK_TIM15_IRQHandler+0x48>

		if (led.blu == 0){
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <TIM1_BRK_TIM15_IRQHandler+0x74>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <TIM1_BRK_TIM15_IRQHandler+0x2a>
			led.blu = 1;
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <TIM1_BRK_TIM15_IRQHandler+0x74>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	e006      	b.n	80027b4 <TIM1_BRK_TIM15_IRQHandler+0x38>

		}
		else if (led.blu == 1){
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <TIM1_BRK_TIM15_IRQHandler+0x74>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <TIM1_BRK_TIM15_IRQHandler+0x38>
			led.blu = 0;
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <TIM1_BRK_TIM15_IRQHandler+0x74>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	605a      	str	r2, [r3, #4]

		}

		placeLCD--;
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <TIM1_BRK_TIM15_IRQHandler+0x78>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <TIM1_BRK_TIM15_IRQHandler+0x78>)
 80027bc:	6013      	str	r3, [r2, #0]
		lcdUpdate = 0;
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <TIM1_BRK_TIM15_IRQHandler+0x6c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]


	}

	if (placeLCD == 0){
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <TIM1_BRK_TIM15_IRQHandler+0x78>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <TIM1_BRK_TIM15_IRQHandler+0x56>
		placeLCD = 128;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <TIM1_BRK_TIM15_IRQHandler+0x78>)
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	601a      	str	r2, [r3, #0]





TIM15->SR &= ~0x0001; // Clear interrupt bit
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <TIM1_BRK_TIM15_IRQHandler+0x7c>)
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <TIM1_BRK_TIM15_IRQHandler+0x7c>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6113      	str	r3, [r2, #16]
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	200001d8 	.word	0x200001d8
 80027ec:	200001dc 	.word	0x200001dc
 80027f0:	200001cc 	.word	0x200001cc
 80027f4:	200001c8 	.word	0x200001c8
 80027f8:	40014000 	.word	0x40014000

080027fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027fc:	480d      	ldr	r0, [pc, #52]	; (8002834 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480d      	ldr	r0, [pc, #52]	; (8002838 <LoopForever+0x6>)
  ldr r1, =_edata
 8002802:	490e      	ldr	r1, [pc, #56]	; (800283c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <LoopForever+0xe>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002818:	4c0b      	ldr	r4, [pc, #44]	; (8002848 <LoopForever+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002826:	f7ff fea9 	bl	800257c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800282a:	f000 f817 	bl	800285c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800282e:	f7ff fd7f 	bl	8002330 <main>

08002832 <LoopForever>:

LoopForever:
    b LoopForever
 8002832:	e7fe      	b.n	8002832 <LoopForever>
  ldr   r0, =_estack
 8002834:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800283c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002840:	08003f20 	.word	0x08003f20
  ldr r2, =_sbss
 8002844:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002848:	200003f8 	.word	0x200003f8

0800284c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC1_2_IRQHandler>
	...

08002850 <__errno>:
 8002850:	4b01      	ldr	r3, [pc, #4]	; (8002858 <__errno+0x8>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000002c 	.word	0x2000002c

0800285c <__libc_init_array>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	4d0d      	ldr	r5, [pc, #52]	; (8002894 <__libc_init_array+0x38>)
 8002860:	4c0d      	ldr	r4, [pc, #52]	; (8002898 <__libc_init_array+0x3c>)
 8002862:	1b64      	subs	r4, r4, r5
 8002864:	10a4      	asrs	r4, r4, #2
 8002866:	2600      	movs	r6, #0
 8002868:	42a6      	cmp	r6, r4
 800286a:	d109      	bne.n	8002880 <__libc_init_array+0x24>
 800286c:	4d0b      	ldr	r5, [pc, #44]	; (800289c <__libc_init_array+0x40>)
 800286e:	4c0c      	ldr	r4, [pc, #48]	; (80028a0 <__libc_init_array+0x44>)
 8002870:	f001 f848 	bl	8003904 <_init>
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	2600      	movs	r6, #0
 800287a:	42a6      	cmp	r6, r4
 800287c:	d105      	bne.n	800288a <__libc_init_array+0x2e>
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	f855 3b04 	ldr.w	r3, [r5], #4
 8002884:	4798      	blx	r3
 8002886:	3601      	adds	r6, #1
 8002888:	e7ee      	b.n	8002868 <__libc_init_array+0xc>
 800288a:	f855 3b04 	ldr.w	r3, [r5], #4
 800288e:	4798      	blx	r3
 8002890:	3601      	adds	r6, #1
 8002892:	e7f2      	b.n	800287a <__libc_init_array+0x1e>
 8002894:	08003f18 	.word	0x08003f18
 8002898:	08003f18 	.word	0x08003f18
 800289c:	08003f18 	.word	0x08003f18
 80028a0:	08003f1c 	.word	0x08003f1c

080028a4 <memcpy>:
 80028a4:	440a      	add	r2, r1
 80028a6:	4291      	cmp	r1, r2
 80028a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80028ac:	d100      	bne.n	80028b0 <memcpy+0xc>
 80028ae:	4770      	bx	lr
 80028b0:	b510      	push	{r4, lr}
 80028b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028ba:	4291      	cmp	r1, r2
 80028bc:	d1f9      	bne.n	80028b2 <memcpy+0xe>
 80028be:	bd10      	pop	{r4, pc}

080028c0 <memset>:
 80028c0:	4402      	add	r2, r0
 80028c2:	4603      	mov	r3, r0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d100      	bne.n	80028ca <memset+0xa>
 80028c8:	4770      	bx	lr
 80028ca:	f803 1b01 	strb.w	r1, [r3], #1
 80028ce:	e7f9      	b.n	80028c4 <memset+0x4>

080028d0 <iprintf>:
 80028d0:	b40f      	push	{r0, r1, r2, r3}
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <iprintf+0x2c>)
 80028d4:	b513      	push	{r0, r1, r4, lr}
 80028d6:	681c      	ldr	r4, [r3, #0]
 80028d8:	b124      	cbz	r4, 80028e4 <iprintf+0x14>
 80028da:	69a3      	ldr	r3, [r4, #24]
 80028dc:	b913      	cbnz	r3, 80028e4 <iprintf+0x14>
 80028de:	4620      	mov	r0, r4
 80028e0:	f000 f9f6 	bl	8002cd0 <__sinit>
 80028e4:	ab05      	add	r3, sp, #20
 80028e6:	9a04      	ldr	r2, [sp, #16]
 80028e8:	68a1      	ldr	r1, [r4, #8]
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	4620      	mov	r0, r4
 80028ee:	f000 fbcf 	bl	8003090 <_vfiprintf_r>
 80028f2:	b002      	add	sp, #8
 80028f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f8:	b004      	add	sp, #16
 80028fa:	4770      	bx	lr
 80028fc:	2000002c 	.word	0x2000002c

08002900 <setbuf>:
 8002900:	2900      	cmp	r1, #0
 8002902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002906:	bf0c      	ite	eq
 8002908:	2202      	moveq	r2, #2
 800290a:	2200      	movne	r2, #0
 800290c:	f000 b800 	b.w	8002910 <setvbuf>

08002910 <setvbuf>:
 8002910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002914:	461d      	mov	r5, r3
 8002916:	4b5d      	ldr	r3, [pc, #372]	; (8002a8c <setvbuf+0x17c>)
 8002918:	681f      	ldr	r7, [r3, #0]
 800291a:	4604      	mov	r4, r0
 800291c:	460e      	mov	r6, r1
 800291e:	4690      	mov	r8, r2
 8002920:	b127      	cbz	r7, 800292c <setvbuf+0x1c>
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	b913      	cbnz	r3, 800292c <setvbuf+0x1c>
 8002926:	4638      	mov	r0, r7
 8002928:	f000 f9d2 	bl	8002cd0 <__sinit>
 800292c:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <setvbuf+0x180>)
 800292e:	429c      	cmp	r4, r3
 8002930:	d167      	bne.n	8002a02 <setvbuf+0xf2>
 8002932:	687c      	ldr	r4, [r7, #4]
 8002934:	f1b8 0f02 	cmp.w	r8, #2
 8002938:	d006      	beq.n	8002948 <setvbuf+0x38>
 800293a:	f1b8 0f01 	cmp.w	r8, #1
 800293e:	f200 809f 	bhi.w	8002a80 <setvbuf+0x170>
 8002942:	2d00      	cmp	r5, #0
 8002944:	f2c0 809c 	blt.w	8002a80 <setvbuf+0x170>
 8002948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800294a:	07db      	lsls	r3, r3, #31
 800294c:	d405      	bmi.n	800295a <setvbuf+0x4a>
 800294e:	89a3      	ldrh	r3, [r4, #12]
 8002950:	0598      	lsls	r0, r3, #22
 8002952:	d402      	bmi.n	800295a <setvbuf+0x4a>
 8002954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002956:	f000 fa59 	bl	8002e0c <__retarget_lock_acquire_recursive>
 800295a:	4621      	mov	r1, r4
 800295c:	4638      	mov	r0, r7
 800295e:	f000 f923 	bl	8002ba8 <_fflush_r>
 8002962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002964:	b141      	cbz	r1, 8002978 <setvbuf+0x68>
 8002966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800296a:	4299      	cmp	r1, r3
 800296c:	d002      	beq.n	8002974 <setvbuf+0x64>
 800296e:	4638      	mov	r0, r7
 8002970:	f000 faba 	bl	8002ee8 <_free_r>
 8002974:	2300      	movs	r3, #0
 8002976:	6363      	str	r3, [r4, #52]	; 0x34
 8002978:	2300      	movs	r3, #0
 800297a:	61a3      	str	r3, [r4, #24]
 800297c:	6063      	str	r3, [r4, #4]
 800297e:	89a3      	ldrh	r3, [r4, #12]
 8002980:	0619      	lsls	r1, r3, #24
 8002982:	d503      	bpl.n	800298c <setvbuf+0x7c>
 8002984:	6921      	ldr	r1, [r4, #16]
 8002986:	4638      	mov	r0, r7
 8002988:	f000 faae 	bl	8002ee8 <_free_r>
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	f1b8 0f02 	cmp.w	r8, #2
 800299a:	81a3      	strh	r3, [r4, #12]
 800299c:	d06c      	beq.n	8002a78 <setvbuf+0x168>
 800299e:	ab01      	add	r3, sp, #4
 80029a0:	466a      	mov	r2, sp
 80029a2:	4621      	mov	r1, r4
 80029a4:	4638      	mov	r0, r7
 80029a6:	f000 fa33 	bl	8002e10 <__swhatbuf_r>
 80029aa:	89a3      	ldrh	r3, [r4, #12]
 80029ac:	4318      	orrs	r0, r3
 80029ae:	81a0      	strh	r0, [r4, #12]
 80029b0:	2d00      	cmp	r5, #0
 80029b2:	d130      	bne.n	8002a16 <setvbuf+0x106>
 80029b4:	9d00      	ldr	r5, [sp, #0]
 80029b6:	4628      	mov	r0, r5
 80029b8:	f000 fa8e 	bl	8002ed8 <malloc>
 80029bc:	4606      	mov	r6, r0
 80029be:	2800      	cmp	r0, #0
 80029c0:	d155      	bne.n	8002a6e <setvbuf+0x15e>
 80029c2:	f8dd 9000 	ldr.w	r9, [sp]
 80029c6:	45a9      	cmp	r9, r5
 80029c8:	d14a      	bne.n	8002a60 <setvbuf+0x150>
 80029ca:	f04f 35ff 	mov.w	r5, #4294967295
 80029ce:	2200      	movs	r2, #0
 80029d0:	60a2      	str	r2, [r4, #8]
 80029d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80029d6:	6022      	str	r2, [r4, #0]
 80029d8:	6122      	str	r2, [r4, #16]
 80029da:	2201      	movs	r2, #1
 80029dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029e0:	6162      	str	r2, [r4, #20]
 80029e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	07d2      	lsls	r2, r2, #31
 80029ea:	81a3      	strh	r3, [r4, #12]
 80029ec:	d405      	bmi.n	80029fa <setvbuf+0xea>
 80029ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80029f2:	d102      	bne.n	80029fa <setvbuf+0xea>
 80029f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029f6:	f000 fa0a 	bl	8002e0e <__retarget_lock_release_recursive>
 80029fa:	4628      	mov	r0, r5
 80029fc:	b003      	add	sp, #12
 80029fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <setvbuf+0x184>)
 8002a04:	429c      	cmp	r4, r3
 8002a06:	d101      	bne.n	8002a0c <setvbuf+0xfc>
 8002a08:	68bc      	ldr	r4, [r7, #8]
 8002a0a:	e793      	b.n	8002934 <setvbuf+0x24>
 8002a0c:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <setvbuf+0x188>)
 8002a0e:	429c      	cmp	r4, r3
 8002a10:	bf08      	it	eq
 8002a12:	68fc      	ldreq	r4, [r7, #12]
 8002a14:	e78e      	b.n	8002934 <setvbuf+0x24>
 8002a16:	2e00      	cmp	r6, #0
 8002a18:	d0cd      	beq.n	80029b6 <setvbuf+0xa6>
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	b913      	cbnz	r3, 8002a24 <setvbuf+0x114>
 8002a1e:	4638      	mov	r0, r7
 8002a20:	f000 f956 	bl	8002cd0 <__sinit>
 8002a24:	f1b8 0f01 	cmp.w	r8, #1
 8002a28:	bf08      	it	eq
 8002a2a:	89a3      	ldrheq	r3, [r4, #12]
 8002a2c:	6026      	str	r6, [r4, #0]
 8002a2e:	bf04      	itt	eq
 8002a30:	f043 0301 	orreq.w	r3, r3, #1
 8002a34:	81a3      	strheq	r3, [r4, #12]
 8002a36:	89a2      	ldrh	r2, [r4, #12]
 8002a38:	f012 0308 	ands.w	r3, r2, #8
 8002a3c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002a40:	d01c      	beq.n	8002a7c <setvbuf+0x16c>
 8002a42:	07d3      	lsls	r3, r2, #31
 8002a44:	bf41      	itttt	mi
 8002a46:	2300      	movmi	r3, #0
 8002a48:	426d      	negmi	r5, r5
 8002a4a:	60a3      	strmi	r3, [r4, #8]
 8002a4c:	61a5      	strmi	r5, [r4, #24]
 8002a4e:	bf58      	it	pl
 8002a50:	60a5      	strpl	r5, [r4, #8]
 8002a52:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002a54:	f015 0501 	ands.w	r5, r5, #1
 8002a58:	d115      	bne.n	8002a86 <setvbuf+0x176>
 8002a5a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002a5e:	e7c8      	b.n	80029f2 <setvbuf+0xe2>
 8002a60:	4648      	mov	r0, r9
 8002a62:	f000 fa39 	bl	8002ed8 <malloc>
 8002a66:	4606      	mov	r6, r0
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d0ae      	beq.n	80029ca <setvbuf+0xba>
 8002a6c:	464d      	mov	r5, r9
 8002a6e:	89a3      	ldrh	r3, [r4, #12]
 8002a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a74:	81a3      	strh	r3, [r4, #12]
 8002a76:	e7d0      	b.n	8002a1a <setvbuf+0x10a>
 8002a78:	2500      	movs	r5, #0
 8002a7a:	e7a8      	b.n	80029ce <setvbuf+0xbe>
 8002a7c:	60a3      	str	r3, [r4, #8]
 8002a7e:	e7e8      	b.n	8002a52 <setvbuf+0x142>
 8002a80:	f04f 35ff 	mov.w	r5, #4294967295
 8002a84:	e7b9      	b.n	80029fa <setvbuf+0xea>
 8002a86:	2500      	movs	r5, #0
 8002a88:	e7b7      	b.n	80029fa <setvbuf+0xea>
 8002a8a:	bf00      	nop
 8002a8c:	2000002c 	.word	0x2000002c
 8002a90:	08003ea4 	.word	0x08003ea4
 8002a94:	08003ec4 	.word	0x08003ec4
 8002a98:	08003e84 	.word	0x08003e84

08002a9c <__sflush_r>:
 8002a9c:	898a      	ldrh	r2, [r1, #12]
 8002a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa2:	4605      	mov	r5, r0
 8002aa4:	0710      	lsls	r0, r2, #28
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	d458      	bmi.n	8002b5c <__sflush_r+0xc0>
 8002aaa:	684b      	ldr	r3, [r1, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	dc05      	bgt.n	8002abc <__sflush_r+0x20>
 8002ab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	dc02      	bgt.n	8002abc <__sflush_r+0x20>
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002abc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002abe:	2e00      	cmp	r6, #0
 8002ac0:	d0f9      	beq.n	8002ab6 <__sflush_r+0x1a>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ac8:	682f      	ldr	r7, [r5, #0]
 8002aca:	602b      	str	r3, [r5, #0]
 8002acc:	d032      	beq.n	8002b34 <__sflush_r+0x98>
 8002ace:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ad0:	89a3      	ldrh	r3, [r4, #12]
 8002ad2:	075a      	lsls	r2, r3, #29
 8002ad4:	d505      	bpl.n	8002ae2 <__sflush_r+0x46>
 8002ad6:	6863      	ldr	r3, [r4, #4]
 8002ad8:	1ac0      	subs	r0, r0, r3
 8002ada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002adc:	b10b      	cbz	r3, 8002ae2 <__sflush_r+0x46>
 8002ade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ae0:	1ac0      	subs	r0, r0, r3
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ae8:	6a21      	ldr	r1, [r4, #32]
 8002aea:	4628      	mov	r0, r5
 8002aec:	47b0      	blx	r6
 8002aee:	1c43      	adds	r3, r0, #1
 8002af0:	89a3      	ldrh	r3, [r4, #12]
 8002af2:	d106      	bne.n	8002b02 <__sflush_r+0x66>
 8002af4:	6829      	ldr	r1, [r5, #0]
 8002af6:	291d      	cmp	r1, #29
 8002af8:	d82c      	bhi.n	8002b54 <__sflush_r+0xb8>
 8002afa:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <__sflush_r+0x108>)
 8002afc:	40ca      	lsrs	r2, r1
 8002afe:	07d6      	lsls	r6, r2, #31
 8002b00:	d528      	bpl.n	8002b54 <__sflush_r+0xb8>
 8002b02:	2200      	movs	r2, #0
 8002b04:	6062      	str	r2, [r4, #4]
 8002b06:	04d9      	lsls	r1, r3, #19
 8002b08:	6922      	ldr	r2, [r4, #16]
 8002b0a:	6022      	str	r2, [r4, #0]
 8002b0c:	d504      	bpl.n	8002b18 <__sflush_r+0x7c>
 8002b0e:	1c42      	adds	r2, r0, #1
 8002b10:	d101      	bne.n	8002b16 <__sflush_r+0x7a>
 8002b12:	682b      	ldr	r3, [r5, #0]
 8002b14:	b903      	cbnz	r3, 8002b18 <__sflush_r+0x7c>
 8002b16:	6560      	str	r0, [r4, #84]	; 0x54
 8002b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b1a:	602f      	str	r7, [r5, #0]
 8002b1c:	2900      	cmp	r1, #0
 8002b1e:	d0ca      	beq.n	8002ab6 <__sflush_r+0x1a>
 8002b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b24:	4299      	cmp	r1, r3
 8002b26:	d002      	beq.n	8002b2e <__sflush_r+0x92>
 8002b28:	4628      	mov	r0, r5
 8002b2a:	f000 f9dd 	bl	8002ee8 <_free_r>
 8002b2e:	2000      	movs	r0, #0
 8002b30:	6360      	str	r0, [r4, #52]	; 0x34
 8002b32:	e7c1      	b.n	8002ab8 <__sflush_r+0x1c>
 8002b34:	6a21      	ldr	r1, [r4, #32]
 8002b36:	2301      	movs	r3, #1
 8002b38:	4628      	mov	r0, r5
 8002b3a:	47b0      	blx	r6
 8002b3c:	1c41      	adds	r1, r0, #1
 8002b3e:	d1c7      	bne.n	8002ad0 <__sflush_r+0x34>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0c4      	beq.n	8002ad0 <__sflush_r+0x34>
 8002b46:	2b1d      	cmp	r3, #29
 8002b48:	d001      	beq.n	8002b4e <__sflush_r+0xb2>
 8002b4a:	2b16      	cmp	r3, #22
 8002b4c:	d101      	bne.n	8002b52 <__sflush_r+0xb6>
 8002b4e:	602f      	str	r7, [r5, #0]
 8002b50:	e7b1      	b.n	8002ab6 <__sflush_r+0x1a>
 8002b52:	89a3      	ldrh	r3, [r4, #12]
 8002b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b58:	81a3      	strh	r3, [r4, #12]
 8002b5a:	e7ad      	b.n	8002ab8 <__sflush_r+0x1c>
 8002b5c:	690f      	ldr	r7, [r1, #16]
 8002b5e:	2f00      	cmp	r7, #0
 8002b60:	d0a9      	beq.n	8002ab6 <__sflush_r+0x1a>
 8002b62:	0793      	lsls	r3, r2, #30
 8002b64:	680e      	ldr	r6, [r1, #0]
 8002b66:	bf08      	it	eq
 8002b68:	694b      	ldreq	r3, [r1, #20]
 8002b6a:	600f      	str	r7, [r1, #0]
 8002b6c:	bf18      	it	ne
 8002b6e:	2300      	movne	r3, #0
 8002b70:	eba6 0807 	sub.w	r8, r6, r7
 8002b74:	608b      	str	r3, [r1, #8]
 8002b76:	f1b8 0f00 	cmp.w	r8, #0
 8002b7a:	dd9c      	ble.n	8002ab6 <__sflush_r+0x1a>
 8002b7c:	6a21      	ldr	r1, [r4, #32]
 8002b7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b80:	4643      	mov	r3, r8
 8002b82:	463a      	mov	r2, r7
 8002b84:	4628      	mov	r0, r5
 8002b86:	47b0      	blx	r6
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	dc06      	bgt.n	8002b9a <__sflush_r+0xfe>
 8002b8c:	89a3      	ldrh	r3, [r4, #12]
 8002b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b92:	81a3      	strh	r3, [r4, #12]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	e78e      	b.n	8002ab8 <__sflush_r+0x1c>
 8002b9a:	4407      	add	r7, r0
 8002b9c:	eba8 0800 	sub.w	r8, r8, r0
 8002ba0:	e7e9      	b.n	8002b76 <__sflush_r+0xda>
 8002ba2:	bf00      	nop
 8002ba4:	20400001 	.word	0x20400001

08002ba8 <_fflush_r>:
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	690b      	ldr	r3, [r1, #16]
 8002bac:	4605      	mov	r5, r0
 8002bae:	460c      	mov	r4, r1
 8002bb0:	b913      	cbnz	r3, 8002bb8 <_fflush_r+0x10>
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	bd38      	pop	{r3, r4, r5, pc}
 8002bb8:	b118      	cbz	r0, 8002bc2 <_fflush_r+0x1a>
 8002bba:	6983      	ldr	r3, [r0, #24]
 8002bbc:	b90b      	cbnz	r3, 8002bc2 <_fflush_r+0x1a>
 8002bbe:	f000 f887 	bl	8002cd0 <__sinit>
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <_fflush_r+0x6c>)
 8002bc4:	429c      	cmp	r4, r3
 8002bc6:	d11b      	bne.n	8002c00 <_fflush_r+0x58>
 8002bc8:	686c      	ldr	r4, [r5, #4]
 8002bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ef      	beq.n	8002bb2 <_fflush_r+0xa>
 8002bd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002bd4:	07d0      	lsls	r0, r2, #31
 8002bd6:	d404      	bmi.n	8002be2 <_fflush_r+0x3a>
 8002bd8:	0599      	lsls	r1, r3, #22
 8002bda:	d402      	bmi.n	8002be2 <_fflush_r+0x3a>
 8002bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bde:	f000 f915 	bl	8002e0c <__retarget_lock_acquire_recursive>
 8002be2:	4628      	mov	r0, r5
 8002be4:	4621      	mov	r1, r4
 8002be6:	f7ff ff59 	bl	8002a9c <__sflush_r>
 8002bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bec:	07da      	lsls	r2, r3, #31
 8002bee:	4605      	mov	r5, r0
 8002bf0:	d4e0      	bmi.n	8002bb4 <_fflush_r+0xc>
 8002bf2:	89a3      	ldrh	r3, [r4, #12]
 8002bf4:	059b      	lsls	r3, r3, #22
 8002bf6:	d4dd      	bmi.n	8002bb4 <_fflush_r+0xc>
 8002bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bfa:	f000 f908 	bl	8002e0e <__retarget_lock_release_recursive>
 8002bfe:	e7d9      	b.n	8002bb4 <_fflush_r+0xc>
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <_fflush_r+0x70>)
 8002c02:	429c      	cmp	r4, r3
 8002c04:	d101      	bne.n	8002c0a <_fflush_r+0x62>
 8002c06:	68ac      	ldr	r4, [r5, #8]
 8002c08:	e7df      	b.n	8002bca <_fflush_r+0x22>
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <_fflush_r+0x74>)
 8002c0c:	429c      	cmp	r4, r3
 8002c0e:	bf08      	it	eq
 8002c10:	68ec      	ldreq	r4, [r5, #12]
 8002c12:	e7da      	b.n	8002bca <_fflush_r+0x22>
 8002c14:	08003ea4 	.word	0x08003ea4
 8002c18:	08003ec4 	.word	0x08003ec4
 8002c1c:	08003e84 	.word	0x08003e84

08002c20 <std>:
 8002c20:	2300      	movs	r3, #0
 8002c22:	b510      	push	{r4, lr}
 8002c24:	4604      	mov	r4, r0
 8002c26:	e9c0 3300 	strd	r3, r3, [r0]
 8002c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c2e:	6083      	str	r3, [r0, #8]
 8002c30:	8181      	strh	r1, [r0, #12]
 8002c32:	6643      	str	r3, [r0, #100]	; 0x64
 8002c34:	81c2      	strh	r2, [r0, #14]
 8002c36:	6183      	str	r3, [r0, #24]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	305c      	adds	r0, #92	; 0x5c
 8002c3e:	f7ff fe3f 	bl	80028c0 <memset>
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <std+0x38>)
 8002c44:	6263      	str	r3, [r4, #36]	; 0x24
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <std+0x3c>)
 8002c48:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <std+0x40>)
 8002c4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <std+0x44>)
 8002c50:	6224      	str	r4, [r4, #32]
 8002c52:	6323      	str	r3, [r4, #48]	; 0x30
 8002c54:	bd10      	pop	{r4, pc}
 8002c56:	bf00      	nop
 8002c58:	08003639 	.word	0x08003639
 8002c5c:	0800365b 	.word	0x0800365b
 8002c60:	08003693 	.word	0x08003693
 8002c64:	080036b7 	.word	0x080036b7

08002c68 <_cleanup_r>:
 8002c68:	4901      	ldr	r1, [pc, #4]	; (8002c70 <_cleanup_r+0x8>)
 8002c6a:	f000 b8af 	b.w	8002dcc <_fwalk_reent>
 8002c6e:	bf00      	nop
 8002c70:	08002ba9 	.word	0x08002ba9

08002c74 <__sfmoreglue>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	1e4a      	subs	r2, r1, #1
 8002c78:	2568      	movs	r5, #104	; 0x68
 8002c7a:	4355      	muls	r5, r2
 8002c7c:	460e      	mov	r6, r1
 8002c7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c82:	f000 f981 	bl	8002f88 <_malloc_r>
 8002c86:	4604      	mov	r4, r0
 8002c88:	b140      	cbz	r0, 8002c9c <__sfmoreglue+0x28>
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	e9c0 1600 	strd	r1, r6, [r0]
 8002c90:	300c      	adds	r0, #12
 8002c92:	60a0      	str	r0, [r4, #8]
 8002c94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c98:	f7ff fe12 	bl	80028c0 <memset>
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}

08002ca0 <__sfp_lock_acquire>:
 8002ca0:	4801      	ldr	r0, [pc, #4]	; (8002ca8 <__sfp_lock_acquire+0x8>)
 8002ca2:	f000 b8b3 	b.w	8002e0c <__retarget_lock_acquire_recursive>
 8002ca6:	bf00      	nop
 8002ca8:	200003f0 	.word	0x200003f0

08002cac <__sfp_lock_release>:
 8002cac:	4801      	ldr	r0, [pc, #4]	; (8002cb4 <__sfp_lock_release+0x8>)
 8002cae:	f000 b8ae 	b.w	8002e0e <__retarget_lock_release_recursive>
 8002cb2:	bf00      	nop
 8002cb4:	200003f0 	.word	0x200003f0

08002cb8 <__sinit_lock_acquire>:
 8002cb8:	4801      	ldr	r0, [pc, #4]	; (8002cc0 <__sinit_lock_acquire+0x8>)
 8002cba:	f000 b8a7 	b.w	8002e0c <__retarget_lock_acquire_recursive>
 8002cbe:	bf00      	nop
 8002cc0:	200003eb 	.word	0x200003eb

08002cc4 <__sinit_lock_release>:
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <__sinit_lock_release+0x8>)
 8002cc6:	f000 b8a2 	b.w	8002e0e <__retarget_lock_release_recursive>
 8002cca:	bf00      	nop
 8002ccc:	200003eb 	.word	0x200003eb

08002cd0 <__sinit>:
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	f7ff fff0 	bl	8002cb8 <__sinit_lock_acquire>
 8002cd8:	69a3      	ldr	r3, [r4, #24]
 8002cda:	b11b      	cbz	r3, 8002ce4 <__sinit+0x14>
 8002cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ce0:	f7ff bff0 	b.w	8002cc4 <__sinit_lock_release>
 8002ce4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ce8:	6523      	str	r3, [r4, #80]	; 0x50
 8002cea:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <__sinit+0x68>)
 8002cec:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <__sinit+0x6c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002cf2:	42a3      	cmp	r3, r4
 8002cf4:	bf04      	itt	eq
 8002cf6:	2301      	moveq	r3, #1
 8002cf8:	61a3      	streq	r3, [r4, #24]
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f000 f820 	bl	8002d40 <__sfp>
 8002d00:	6060      	str	r0, [r4, #4]
 8002d02:	4620      	mov	r0, r4
 8002d04:	f000 f81c 	bl	8002d40 <__sfp>
 8002d08:	60a0      	str	r0, [r4, #8]
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f000 f818 	bl	8002d40 <__sfp>
 8002d10:	2200      	movs	r2, #0
 8002d12:	60e0      	str	r0, [r4, #12]
 8002d14:	2104      	movs	r1, #4
 8002d16:	6860      	ldr	r0, [r4, #4]
 8002d18:	f7ff ff82 	bl	8002c20 <std>
 8002d1c:	68a0      	ldr	r0, [r4, #8]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2109      	movs	r1, #9
 8002d22:	f7ff ff7d 	bl	8002c20 <std>
 8002d26:	68e0      	ldr	r0, [r4, #12]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	2112      	movs	r1, #18
 8002d2c:	f7ff ff78 	bl	8002c20 <std>
 8002d30:	2301      	movs	r3, #1
 8002d32:	61a3      	str	r3, [r4, #24]
 8002d34:	e7d2      	b.n	8002cdc <__sinit+0xc>
 8002d36:	bf00      	nop
 8002d38:	08003e80 	.word	0x08003e80
 8002d3c:	08002c69 	.word	0x08002c69

08002d40 <__sfp>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	4607      	mov	r7, r0
 8002d44:	f7ff ffac 	bl	8002ca0 <__sfp_lock_acquire>
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <__sfp+0x84>)
 8002d4a:	681e      	ldr	r6, [r3, #0]
 8002d4c:	69b3      	ldr	r3, [r6, #24]
 8002d4e:	b913      	cbnz	r3, 8002d56 <__sfp+0x16>
 8002d50:	4630      	mov	r0, r6
 8002d52:	f7ff ffbd 	bl	8002cd0 <__sinit>
 8002d56:	3648      	adds	r6, #72	; 0x48
 8002d58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	d503      	bpl.n	8002d68 <__sfp+0x28>
 8002d60:	6833      	ldr	r3, [r6, #0]
 8002d62:	b30b      	cbz	r3, 8002da8 <__sfp+0x68>
 8002d64:	6836      	ldr	r6, [r6, #0]
 8002d66:	e7f7      	b.n	8002d58 <__sfp+0x18>
 8002d68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d6c:	b9d5      	cbnz	r5, 8002da4 <__sfp+0x64>
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <__sfp+0x88>)
 8002d70:	60e3      	str	r3, [r4, #12]
 8002d72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d76:	6665      	str	r5, [r4, #100]	; 0x64
 8002d78:	f000 f847 	bl	8002e0a <__retarget_lock_init_recursive>
 8002d7c:	f7ff ff96 	bl	8002cac <__sfp_lock_release>
 8002d80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002d84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002d88:	6025      	str	r5, [r4, #0]
 8002d8a:	61a5      	str	r5, [r4, #24]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d94:	f7ff fd94 	bl	80028c0 <memset>
 8002d98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002da0:	4620      	mov	r0, r4
 8002da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002da4:	3468      	adds	r4, #104	; 0x68
 8002da6:	e7d9      	b.n	8002d5c <__sfp+0x1c>
 8002da8:	2104      	movs	r1, #4
 8002daa:	4638      	mov	r0, r7
 8002dac:	f7ff ff62 	bl	8002c74 <__sfmoreglue>
 8002db0:	4604      	mov	r4, r0
 8002db2:	6030      	str	r0, [r6, #0]
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d1d5      	bne.n	8002d64 <__sfp+0x24>
 8002db8:	f7ff ff78 	bl	8002cac <__sfp_lock_release>
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	e7ee      	b.n	8002da0 <__sfp+0x60>
 8002dc2:	bf00      	nop
 8002dc4:	08003e80 	.word	0x08003e80
 8002dc8:	ffff0001 	.word	0xffff0001

08002dcc <_fwalk_reent>:
 8002dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	4688      	mov	r8, r1
 8002dd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002dd8:	2700      	movs	r7, #0
 8002dda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002dde:	f1b9 0901 	subs.w	r9, r9, #1
 8002de2:	d505      	bpl.n	8002df0 <_fwalk_reent+0x24>
 8002de4:	6824      	ldr	r4, [r4, #0]
 8002de6:	2c00      	cmp	r4, #0
 8002de8:	d1f7      	bne.n	8002dda <_fwalk_reent+0xe>
 8002dea:	4638      	mov	r0, r7
 8002dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002df0:	89ab      	ldrh	r3, [r5, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d907      	bls.n	8002e06 <_fwalk_reent+0x3a>
 8002df6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	d003      	beq.n	8002e06 <_fwalk_reent+0x3a>
 8002dfe:	4629      	mov	r1, r5
 8002e00:	4630      	mov	r0, r6
 8002e02:	47c0      	blx	r8
 8002e04:	4307      	orrs	r7, r0
 8002e06:	3568      	adds	r5, #104	; 0x68
 8002e08:	e7e9      	b.n	8002dde <_fwalk_reent+0x12>

08002e0a <__retarget_lock_init_recursive>:
 8002e0a:	4770      	bx	lr

08002e0c <__retarget_lock_acquire_recursive>:
 8002e0c:	4770      	bx	lr

08002e0e <__retarget_lock_release_recursive>:
 8002e0e:	4770      	bx	lr

08002e10 <__swhatbuf_r>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	460e      	mov	r6, r1
 8002e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	b096      	sub	sp, #88	; 0x58
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	da07      	bge.n	8002e32 <__swhatbuf_r+0x22>
 8002e22:	2300      	movs	r3, #0
 8002e24:	602b      	str	r3, [r5, #0]
 8002e26:	89b3      	ldrh	r3, [r6, #12]
 8002e28:	061a      	lsls	r2, r3, #24
 8002e2a:	d410      	bmi.n	8002e4e <__swhatbuf_r+0x3e>
 8002e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e30:	e00e      	b.n	8002e50 <__swhatbuf_r+0x40>
 8002e32:	466a      	mov	r2, sp
 8002e34:	f000 fd14 	bl	8003860 <_fstat_r>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	dbf2      	blt.n	8002e22 <__swhatbuf_r+0x12>
 8002e3c:	9a01      	ldr	r2, [sp, #4]
 8002e3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e46:	425a      	negs	r2, r3
 8002e48:	415a      	adcs	r2, r3
 8002e4a:	602a      	str	r2, [r5, #0]
 8002e4c:	e7ee      	b.n	8002e2c <__swhatbuf_r+0x1c>
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	2000      	movs	r0, #0
 8002e52:	6023      	str	r3, [r4, #0]
 8002e54:	b016      	add	sp, #88	; 0x58
 8002e56:	bd70      	pop	{r4, r5, r6, pc}

08002e58 <__smakebuf_r>:
 8002e58:	898b      	ldrh	r3, [r1, #12]
 8002e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e5c:	079d      	lsls	r5, r3, #30
 8002e5e:	4606      	mov	r6, r0
 8002e60:	460c      	mov	r4, r1
 8002e62:	d507      	bpl.n	8002e74 <__smakebuf_r+0x1c>
 8002e64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e68:	6023      	str	r3, [r4, #0]
 8002e6a:	6123      	str	r3, [r4, #16]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	6163      	str	r3, [r4, #20]
 8002e70:	b002      	add	sp, #8
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	ab01      	add	r3, sp, #4
 8002e76:	466a      	mov	r2, sp
 8002e78:	f7ff ffca 	bl	8002e10 <__swhatbuf_r>
 8002e7c:	9900      	ldr	r1, [sp, #0]
 8002e7e:	4605      	mov	r5, r0
 8002e80:	4630      	mov	r0, r6
 8002e82:	f000 f881 	bl	8002f88 <_malloc_r>
 8002e86:	b948      	cbnz	r0, 8002e9c <__smakebuf_r+0x44>
 8002e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e8c:	059a      	lsls	r2, r3, #22
 8002e8e:	d4ef      	bmi.n	8002e70 <__smakebuf_r+0x18>
 8002e90:	f023 0303 	bic.w	r3, r3, #3
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	81a3      	strh	r3, [r4, #12]
 8002e9a:	e7e3      	b.n	8002e64 <__smakebuf_r+0xc>
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <__smakebuf_r+0x7c>)
 8002e9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	6020      	str	r0, [r4, #0]
 8002ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea8:	81a3      	strh	r3, [r4, #12]
 8002eaa:	9b00      	ldr	r3, [sp, #0]
 8002eac:	6163      	str	r3, [r4, #20]
 8002eae:	9b01      	ldr	r3, [sp, #4]
 8002eb0:	6120      	str	r0, [r4, #16]
 8002eb2:	b15b      	cbz	r3, 8002ecc <__smakebuf_r+0x74>
 8002eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f000 fce3 	bl	8003884 <_isatty_r>
 8002ebe:	b128      	cbz	r0, 8002ecc <__smakebuf_r+0x74>
 8002ec0:	89a3      	ldrh	r3, [r4, #12]
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	89a0      	ldrh	r0, [r4, #12]
 8002ece:	4305      	orrs	r5, r0
 8002ed0:	81a5      	strh	r5, [r4, #12]
 8002ed2:	e7cd      	b.n	8002e70 <__smakebuf_r+0x18>
 8002ed4:	08002c69 	.word	0x08002c69

08002ed8 <malloc>:
 8002ed8:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <malloc+0xc>)
 8002eda:	4601      	mov	r1, r0
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	f000 b853 	b.w	8002f88 <_malloc_r>
 8002ee2:	bf00      	nop
 8002ee4:	2000002c 	.word	0x2000002c

08002ee8 <_free_r>:
 8002ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d048      	beq.n	8002f80 <_free_r+0x98>
 8002eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef2:	9001      	str	r0, [sp, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8002efa:	bfb8      	it	lt
 8002efc:	18e4      	addlt	r4, r4, r3
 8002efe:	f000 fce3 	bl	80038c8 <__malloc_lock>
 8002f02:	4a20      	ldr	r2, [pc, #128]	; (8002f84 <_free_r+0x9c>)
 8002f04:	9801      	ldr	r0, [sp, #4]
 8002f06:	6813      	ldr	r3, [r2, #0]
 8002f08:	4615      	mov	r5, r2
 8002f0a:	b933      	cbnz	r3, 8002f1a <_free_r+0x32>
 8002f0c:	6063      	str	r3, [r4, #4]
 8002f0e:	6014      	str	r4, [r2, #0]
 8002f10:	b003      	add	sp, #12
 8002f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f16:	f000 bcdd 	b.w	80038d4 <__malloc_unlock>
 8002f1a:	42a3      	cmp	r3, r4
 8002f1c:	d90b      	bls.n	8002f36 <_free_r+0x4e>
 8002f1e:	6821      	ldr	r1, [r4, #0]
 8002f20:	1862      	adds	r2, r4, r1
 8002f22:	4293      	cmp	r3, r2
 8002f24:	bf04      	itt	eq
 8002f26:	681a      	ldreq	r2, [r3, #0]
 8002f28:	685b      	ldreq	r3, [r3, #4]
 8002f2a:	6063      	str	r3, [r4, #4]
 8002f2c:	bf04      	itt	eq
 8002f2e:	1852      	addeq	r2, r2, r1
 8002f30:	6022      	streq	r2, [r4, #0]
 8002f32:	602c      	str	r4, [r5, #0]
 8002f34:	e7ec      	b.n	8002f10 <_free_r+0x28>
 8002f36:	461a      	mov	r2, r3
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	b10b      	cbz	r3, 8002f40 <_free_r+0x58>
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	d9fa      	bls.n	8002f36 <_free_r+0x4e>
 8002f40:	6811      	ldr	r1, [r2, #0]
 8002f42:	1855      	adds	r5, r2, r1
 8002f44:	42a5      	cmp	r5, r4
 8002f46:	d10b      	bne.n	8002f60 <_free_r+0x78>
 8002f48:	6824      	ldr	r4, [r4, #0]
 8002f4a:	4421      	add	r1, r4
 8002f4c:	1854      	adds	r4, r2, r1
 8002f4e:	42a3      	cmp	r3, r4
 8002f50:	6011      	str	r1, [r2, #0]
 8002f52:	d1dd      	bne.n	8002f10 <_free_r+0x28>
 8002f54:	681c      	ldr	r4, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	6053      	str	r3, [r2, #4]
 8002f5a:	4421      	add	r1, r4
 8002f5c:	6011      	str	r1, [r2, #0]
 8002f5e:	e7d7      	b.n	8002f10 <_free_r+0x28>
 8002f60:	d902      	bls.n	8002f68 <_free_r+0x80>
 8002f62:	230c      	movs	r3, #12
 8002f64:	6003      	str	r3, [r0, #0]
 8002f66:	e7d3      	b.n	8002f10 <_free_r+0x28>
 8002f68:	6825      	ldr	r5, [r4, #0]
 8002f6a:	1961      	adds	r1, r4, r5
 8002f6c:	428b      	cmp	r3, r1
 8002f6e:	bf04      	itt	eq
 8002f70:	6819      	ldreq	r1, [r3, #0]
 8002f72:	685b      	ldreq	r3, [r3, #4]
 8002f74:	6063      	str	r3, [r4, #4]
 8002f76:	bf04      	itt	eq
 8002f78:	1949      	addeq	r1, r1, r5
 8002f7a:	6021      	streq	r1, [r4, #0]
 8002f7c:	6054      	str	r4, [r2, #4]
 8002f7e:	e7c7      	b.n	8002f10 <_free_r+0x28>
 8002f80:	b003      	add	sp, #12
 8002f82:	bd30      	pop	{r4, r5, pc}
 8002f84:	200001b4 	.word	0x200001b4

08002f88 <_malloc_r>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	1ccd      	adds	r5, r1, #3
 8002f8c:	f025 0503 	bic.w	r5, r5, #3
 8002f90:	3508      	adds	r5, #8
 8002f92:	2d0c      	cmp	r5, #12
 8002f94:	bf38      	it	cc
 8002f96:	250c      	movcc	r5, #12
 8002f98:	2d00      	cmp	r5, #0
 8002f9a:	4606      	mov	r6, r0
 8002f9c:	db01      	blt.n	8002fa2 <_malloc_r+0x1a>
 8002f9e:	42a9      	cmp	r1, r5
 8002fa0:	d903      	bls.n	8002faa <_malloc_r+0x22>
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	6033      	str	r3, [r6, #0]
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002faa:	f000 fc8d 	bl	80038c8 <__malloc_lock>
 8002fae:	4921      	ldr	r1, [pc, #132]	; (8003034 <_malloc_r+0xac>)
 8002fb0:	680a      	ldr	r2, [r1, #0]
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	b99c      	cbnz	r4, 8002fde <_malloc_r+0x56>
 8002fb6:	4f20      	ldr	r7, [pc, #128]	; (8003038 <_malloc_r+0xb0>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b923      	cbnz	r3, 8002fc6 <_malloc_r+0x3e>
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	f000 fb2a 	bl	8003618 <_sbrk_r>
 8002fc4:	6038      	str	r0, [r7, #0]
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	4630      	mov	r0, r6
 8002fca:	f000 fb25 	bl	8003618 <_sbrk_r>
 8002fce:	1c43      	adds	r3, r0, #1
 8002fd0:	d123      	bne.n	800301a <_malloc_r+0x92>
 8002fd2:	230c      	movs	r3, #12
 8002fd4:	6033      	str	r3, [r6, #0]
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f000 fc7c 	bl	80038d4 <__malloc_unlock>
 8002fdc:	e7e3      	b.n	8002fa6 <_malloc_r+0x1e>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	1b5b      	subs	r3, r3, r5
 8002fe2:	d417      	bmi.n	8003014 <_malloc_r+0x8c>
 8002fe4:	2b0b      	cmp	r3, #11
 8002fe6:	d903      	bls.n	8002ff0 <_malloc_r+0x68>
 8002fe8:	6023      	str	r3, [r4, #0]
 8002fea:	441c      	add	r4, r3
 8002fec:	6025      	str	r5, [r4, #0]
 8002fee:	e004      	b.n	8002ffa <_malloc_r+0x72>
 8002ff0:	6863      	ldr	r3, [r4, #4]
 8002ff2:	42a2      	cmp	r2, r4
 8002ff4:	bf0c      	ite	eq
 8002ff6:	600b      	streq	r3, [r1, #0]
 8002ff8:	6053      	strne	r3, [r2, #4]
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	f000 fc6a 	bl	80038d4 <__malloc_unlock>
 8003000:	f104 000b 	add.w	r0, r4, #11
 8003004:	1d23      	adds	r3, r4, #4
 8003006:	f020 0007 	bic.w	r0, r0, #7
 800300a:	1ac2      	subs	r2, r0, r3
 800300c:	d0cc      	beq.n	8002fa8 <_malloc_r+0x20>
 800300e:	1a1b      	subs	r3, r3, r0
 8003010:	50a3      	str	r3, [r4, r2]
 8003012:	e7c9      	b.n	8002fa8 <_malloc_r+0x20>
 8003014:	4622      	mov	r2, r4
 8003016:	6864      	ldr	r4, [r4, #4]
 8003018:	e7cc      	b.n	8002fb4 <_malloc_r+0x2c>
 800301a:	1cc4      	adds	r4, r0, #3
 800301c:	f024 0403 	bic.w	r4, r4, #3
 8003020:	42a0      	cmp	r0, r4
 8003022:	d0e3      	beq.n	8002fec <_malloc_r+0x64>
 8003024:	1a21      	subs	r1, r4, r0
 8003026:	4630      	mov	r0, r6
 8003028:	f000 faf6 	bl	8003618 <_sbrk_r>
 800302c:	3001      	adds	r0, #1
 800302e:	d1dd      	bne.n	8002fec <_malloc_r+0x64>
 8003030:	e7cf      	b.n	8002fd2 <_malloc_r+0x4a>
 8003032:	bf00      	nop
 8003034:	200001b4 	.word	0x200001b4
 8003038:	200001b8 	.word	0x200001b8

0800303c <__sfputc_r>:
 800303c:	6893      	ldr	r3, [r2, #8]
 800303e:	3b01      	subs	r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	b410      	push	{r4}
 8003044:	6093      	str	r3, [r2, #8]
 8003046:	da08      	bge.n	800305a <__sfputc_r+0x1e>
 8003048:	6994      	ldr	r4, [r2, #24]
 800304a:	42a3      	cmp	r3, r4
 800304c:	db01      	blt.n	8003052 <__sfputc_r+0x16>
 800304e:	290a      	cmp	r1, #10
 8003050:	d103      	bne.n	800305a <__sfputc_r+0x1e>
 8003052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003056:	f000 bb33 	b.w	80036c0 <__swbuf_r>
 800305a:	6813      	ldr	r3, [r2, #0]
 800305c:	1c58      	adds	r0, r3, #1
 800305e:	6010      	str	r0, [r2, #0]
 8003060:	7019      	strb	r1, [r3, #0]
 8003062:	4608      	mov	r0, r1
 8003064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003068:	4770      	bx	lr

0800306a <__sfputs_r>:
 800306a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306c:	4606      	mov	r6, r0
 800306e:	460f      	mov	r7, r1
 8003070:	4614      	mov	r4, r2
 8003072:	18d5      	adds	r5, r2, r3
 8003074:	42ac      	cmp	r4, r5
 8003076:	d101      	bne.n	800307c <__sfputs_r+0x12>
 8003078:	2000      	movs	r0, #0
 800307a:	e007      	b.n	800308c <__sfputs_r+0x22>
 800307c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003080:	463a      	mov	r2, r7
 8003082:	4630      	mov	r0, r6
 8003084:	f7ff ffda 	bl	800303c <__sfputc_r>
 8003088:	1c43      	adds	r3, r0, #1
 800308a:	d1f3      	bne.n	8003074 <__sfputs_r+0xa>
 800308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003090 <_vfiprintf_r>:
 8003090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003094:	460d      	mov	r5, r1
 8003096:	b09d      	sub	sp, #116	; 0x74
 8003098:	4614      	mov	r4, r2
 800309a:	4698      	mov	r8, r3
 800309c:	4606      	mov	r6, r0
 800309e:	b118      	cbz	r0, 80030a8 <_vfiprintf_r+0x18>
 80030a0:	6983      	ldr	r3, [r0, #24]
 80030a2:	b90b      	cbnz	r3, 80030a8 <_vfiprintf_r+0x18>
 80030a4:	f7ff fe14 	bl	8002cd0 <__sinit>
 80030a8:	4b89      	ldr	r3, [pc, #548]	; (80032d0 <_vfiprintf_r+0x240>)
 80030aa:	429d      	cmp	r5, r3
 80030ac:	d11b      	bne.n	80030e6 <_vfiprintf_r+0x56>
 80030ae:	6875      	ldr	r5, [r6, #4]
 80030b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030b2:	07d9      	lsls	r1, r3, #31
 80030b4:	d405      	bmi.n	80030c2 <_vfiprintf_r+0x32>
 80030b6:	89ab      	ldrh	r3, [r5, #12]
 80030b8:	059a      	lsls	r2, r3, #22
 80030ba:	d402      	bmi.n	80030c2 <_vfiprintf_r+0x32>
 80030bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030be:	f7ff fea5 	bl	8002e0c <__retarget_lock_acquire_recursive>
 80030c2:	89ab      	ldrh	r3, [r5, #12]
 80030c4:	071b      	lsls	r3, r3, #28
 80030c6:	d501      	bpl.n	80030cc <_vfiprintf_r+0x3c>
 80030c8:	692b      	ldr	r3, [r5, #16]
 80030ca:	b9eb      	cbnz	r3, 8003108 <_vfiprintf_r+0x78>
 80030cc:	4629      	mov	r1, r5
 80030ce:	4630      	mov	r0, r6
 80030d0:	f000 fb48 	bl	8003764 <__swsetup_r>
 80030d4:	b1c0      	cbz	r0, 8003108 <_vfiprintf_r+0x78>
 80030d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030d8:	07dc      	lsls	r4, r3, #31
 80030da:	d50e      	bpl.n	80030fa <_vfiprintf_r+0x6a>
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	b01d      	add	sp, #116	; 0x74
 80030e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e6:	4b7b      	ldr	r3, [pc, #492]	; (80032d4 <_vfiprintf_r+0x244>)
 80030e8:	429d      	cmp	r5, r3
 80030ea:	d101      	bne.n	80030f0 <_vfiprintf_r+0x60>
 80030ec:	68b5      	ldr	r5, [r6, #8]
 80030ee:	e7df      	b.n	80030b0 <_vfiprintf_r+0x20>
 80030f0:	4b79      	ldr	r3, [pc, #484]	; (80032d8 <_vfiprintf_r+0x248>)
 80030f2:	429d      	cmp	r5, r3
 80030f4:	bf08      	it	eq
 80030f6:	68f5      	ldreq	r5, [r6, #12]
 80030f8:	e7da      	b.n	80030b0 <_vfiprintf_r+0x20>
 80030fa:	89ab      	ldrh	r3, [r5, #12]
 80030fc:	0598      	lsls	r0, r3, #22
 80030fe:	d4ed      	bmi.n	80030dc <_vfiprintf_r+0x4c>
 8003100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003102:	f7ff fe84 	bl	8002e0e <__retarget_lock_release_recursive>
 8003106:	e7e9      	b.n	80030dc <_vfiprintf_r+0x4c>
 8003108:	2300      	movs	r3, #0
 800310a:	9309      	str	r3, [sp, #36]	; 0x24
 800310c:	2320      	movs	r3, #32
 800310e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003112:	f8cd 800c 	str.w	r8, [sp, #12]
 8003116:	2330      	movs	r3, #48	; 0x30
 8003118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80032dc <_vfiprintf_r+0x24c>
 800311c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003120:	f04f 0901 	mov.w	r9, #1
 8003124:	4623      	mov	r3, r4
 8003126:	469a      	mov	sl, r3
 8003128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800312c:	b10a      	cbz	r2, 8003132 <_vfiprintf_r+0xa2>
 800312e:	2a25      	cmp	r2, #37	; 0x25
 8003130:	d1f9      	bne.n	8003126 <_vfiprintf_r+0x96>
 8003132:	ebba 0b04 	subs.w	fp, sl, r4
 8003136:	d00b      	beq.n	8003150 <_vfiprintf_r+0xc0>
 8003138:	465b      	mov	r3, fp
 800313a:	4622      	mov	r2, r4
 800313c:	4629      	mov	r1, r5
 800313e:	4630      	mov	r0, r6
 8003140:	f7ff ff93 	bl	800306a <__sfputs_r>
 8003144:	3001      	adds	r0, #1
 8003146:	f000 80aa 	beq.w	800329e <_vfiprintf_r+0x20e>
 800314a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800314c:	445a      	add	r2, fp
 800314e:	9209      	str	r2, [sp, #36]	; 0x24
 8003150:	f89a 3000 	ldrb.w	r3, [sl]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a2 	beq.w	800329e <_vfiprintf_r+0x20e>
 800315a:	2300      	movs	r3, #0
 800315c:	f04f 32ff 	mov.w	r2, #4294967295
 8003160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003164:	f10a 0a01 	add.w	sl, sl, #1
 8003168:	9304      	str	r3, [sp, #16]
 800316a:	9307      	str	r3, [sp, #28]
 800316c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003170:	931a      	str	r3, [sp, #104]	; 0x68
 8003172:	4654      	mov	r4, sl
 8003174:	2205      	movs	r2, #5
 8003176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800317a:	4858      	ldr	r0, [pc, #352]	; (80032dc <_vfiprintf_r+0x24c>)
 800317c:	f7fd f830 	bl	80001e0 <memchr>
 8003180:	9a04      	ldr	r2, [sp, #16]
 8003182:	b9d8      	cbnz	r0, 80031bc <_vfiprintf_r+0x12c>
 8003184:	06d1      	lsls	r1, r2, #27
 8003186:	bf44      	itt	mi
 8003188:	2320      	movmi	r3, #32
 800318a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800318e:	0713      	lsls	r3, r2, #28
 8003190:	bf44      	itt	mi
 8003192:	232b      	movmi	r3, #43	; 0x2b
 8003194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003198:	f89a 3000 	ldrb.w	r3, [sl]
 800319c:	2b2a      	cmp	r3, #42	; 0x2a
 800319e:	d015      	beq.n	80031cc <_vfiprintf_r+0x13c>
 80031a0:	9a07      	ldr	r2, [sp, #28]
 80031a2:	4654      	mov	r4, sl
 80031a4:	2000      	movs	r0, #0
 80031a6:	f04f 0c0a 	mov.w	ip, #10
 80031aa:	4621      	mov	r1, r4
 80031ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031b0:	3b30      	subs	r3, #48	; 0x30
 80031b2:	2b09      	cmp	r3, #9
 80031b4:	d94e      	bls.n	8003254 <_vfiprintf_r+0x1c4>
 80031b6:	b1b0      	cbz	r0, 80031e6 <_vfiprintf_r+0x156>
 80031b8:	9207      	str	r2, [sp, #28]
 80031ba:	e014      	b.n	80031e6 <_vfiprintf_r+0x156>
 80031bc:	eba0 0308 	sub.w	r3, r0, r8
 80031c0:	fa09 f303 	lsl.w	r3, r9, r3
 80031c4:	4313      	orrs	r3, r2
 80031c6:	9304      	str	r3, [sp, #16]
 80031c8:	46a2      	mov	sl, r4
 80031ca:	e7d2      	b.n	8003172 <_vfiprintf_r+0xe2>
 80031cc:	9b03      	ldr	r3, [sp, #12]
 80031ce:	1d19      	adds	r1, r3, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	9103      	str	r1, [sp, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bfbb      	ittet	lt
 80031d8:	425b      	neglt	r3, r3
 80031da:	f042 0202 	orrlt.w	r2, r2, #2
 80031de:	9307      	strge	r3, [sp, #28]
 80031e0:	9307      	strlt	r3, [sp, #28]
 80031e2:	bfb8      	it	lt
 80031e4:	9204      	strlt	r2, [sp, #16]
 80031e6:	7823      	ldrb	r3, [r4, #0]
 80031e8:	2b2e      	cmp	r3, #46	; 0x2e
 80031ea:	d10c      	bne.n	8003206 <_vfiprintf_r+0x176>
 80031ec:	7863      	ldrb	r3, [r4, #1]
 80031ee:	2b2a      	cmp	r3, #42	; 0x2a
 80031f0:	d135      	bne.n	800325e <_vfiprintf_r+0x1ce>
 80031f2:	9b03      	ldr	r3, [sp, #12]
 80031f4:	1d1a      	adds	r2, r3, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	9203      	str	r2, [sp, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bfb8      	it	lt
 80031fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003202:	3402      	adds	r4, #2
 8003204:	9305      	str	r3, [sp, #20]
 8003206:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80032ec <_vfiprintf_r+0x25c>
 800320a:	7821      	ldrb	r1, [r4, #0]
 800320c:	2203      	movs	r2, #3
 800320e:	4650      	mov	r0, sl
 8003210:	f7fc ffe6 	bl	80001e0 <memchr>
 8003214:	b140      	cbz	r0, 8003228 <_vfiprintf_r+0x198>
 8003216:	2340      	movs	r3, #64	; 0x40
 8003218:	eba0 000a 	sub.w	r0, r0, sl
 800321c:	fa03 f000 	lsl.w	r0, r3, r0
 8003220:	9b04      	ldr	r3, [sp, #16]
 8003222:	4303      	orrs	r3, r0
 8003224:	3401      	adds	r4, #1
 8003226:	9304      	str	r3, [sp, #16]
 8003228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800322c:	482c      	ldr	r0, [pc, #176]	; (80032e0 <_vfiprintf_r+0x250>)
 800322e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003232:	2206      	movs	r2, #6
 8003234:	f7fc ffd4 	bl	80001e0 <memchr>
 8003238:	2800      	cmp	r0, #0
 800323a:	d03f      	beq.n	80032bc <_vfiprintf_r+0x22c>
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <_vfiprintf_r+0x254>)
 800323e:	bb1b      	cbnz	r3, 8003288 <_vfiprintf_r+0x1f8>
 8003240:	9b03      	ldr	r3, [sp, #12]
 8003242:	3307      	adds	r3, #7
 8003244:	f023 0307 	bic.w	r3, r3, #7
 8003248:	3308      	adds	r3, #8
 800324a:	9303      	str	r3, [sp, #12]
 800324c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800324e:	443b      	add	r3, r7
 8003250:	9309      	str	r3, [sp, #36]	; 0x24
 8003252:	e767      	b.n	8003124 <_vfiprintf_r+0x94>
 8003254:	fb0c 3202 	mla	r2, ip, r2, r3
 8003258:	460c      	mov	r4, r1
 800325a:	2001      	movs	r0, #1
 800325c:	e7a5      	b.n	80031aa <_vfiprintf_r+0x11a>
 800325e:	2300      	movs	r3, #0
 8003260:	3401      	adds	r4, #1
 8003262:	9305      	str	r3, [sp, #20]
 8003264:	4619      	mov	r1, r3
 8003266:	f04f 0c0a 	mov.w	ip, #10
 800326a:	4620      	mov	r0, r4
 800326c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003270:	3a30      	subs	r2, #48	; 0x30
 8003272:	2a09      	cmp	r2, #9
 8003274:	d903      	bls.n	800327e <_vfiprintf_r+0x1ee>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0c5      	beq.n	8003206 <_vfiprintf_r+0x176>
 800327a:	9105      	str	r1, [sp, #20]
 800327c:	e7c3      	b.n	8003206 <_vfiprintf_r+0x176>
 800327e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003282:	4604      	mov	r4, r0
 8003284:	2301      	movs	r3, #1
 8003286:	e7f0      	b.n	800326a <_vfiprintf_r+0x1da>
 8003288:	ab03      	add	r3, sp, #12
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	462a      	mov	r2, r5
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <_vfiprintf_r+0x258>)
 8003290:	a904      	add	r1, sp, #16
 8003292:	4630      	mov	r0, r6
 8003294:	f3af 8000 	nop.w
 8003298:	4607      	mov	r7, r0
 800329a:	1c78      	adds	r0, r7, #1
 800329c:	d1d6      	bne.n	800324c <_vfiprintf_r+0x1bc>
 800329e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032a0:	07d9      	lsls	r1, r3, #31
 80032a2:	d405      	bmi.n	80032b0 <_vfiprintf_r+0x220>
 80032a4:	89ab      	ldrh	r3, [r5, #12]
 80032a6:	059a      	lsls	r2, r3, #22
 80032a8:	d402      	bmi.n	80032b0 <_vfiprintf_r+0x220>
 80032aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032ac:	f7ff fdaf 	bl	8002e0e <__retarget_lock_release_recursive>
 80032b0:	89ab      	ldrh	r3, [r5, #12]
 80032b2:	065b      	lsls	r3, r3, #25
 80032b4:	f53f af12 	bmi.w	80030dc <_vfiprintf_r+0x4c>
 80032b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032ba:	e711      	b.n	80030e0 <_vfiprintf_r+0x50>
 80032bc:	ab03      	add	r3, sp, #12
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	462a      	mov	r2, r5
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <_vfiprintf_r+0x258>)
 80032c4:	a904      	add	r1, sp, #16
 80032c6:	4630      	mov	r0, r6
 80032c8:	f000 f880 	bl	80033cc <_printf_i>
 80032cc:	e7e4      	b.n	8003298 <_vfiprintf_r+0x208>
 80032ce:	bf00      	nop
 80032d0:	08003ea4 	.word	0x08003ea4
 80032d4:	08003ec4 	.word	0x08003ec4
 80032d8:	08003e84 	.word	0x08003e84
 80032dc:	08003ee4 	.word	0x08003ee4
 80032e0:	08003eee 	.word	0x08003eee
 80032e4:	00000000 	.word	0x00000000
 80032e8:	0800306b 	.word	0x0800306b
 80032ec:	08003eea 	.word	0x08003eea

080032f0 <_printf_common>:
 80032f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f4:	4616      	mov	r6, r2
 80032f6:	4699      	mov	r9, r3
 80032f8:	688a      	ldr	r2, [r1, #8]
 80032fa:	690b      	ldr	r3, [r1, #16]
 80032fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003300:	4293      	cmp	r3, r2
 8003302:	bfb8      	it	lt
 8003304:	4613      	movlt	r3, r2
 8003306:	6033      	str	r3, [r6, #0]
 8003308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800330c:	4607      	mov	r7, r0
 800330e:	460c      	mov	r4, r1
 8003310:	b10a      	cbz	r2, 8003316 <_printf_common+0x26>
 8003312:	3301      	adds	r3, #1
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	0699      	lsls	r1, r3, #26
 800331a:	bf42      	ittt	mi
 800331c:	6833      	ldrmi	r3, [r6, #0]
 800331e:	3302      	addmi	r3, #2
 8003320:	6033      	strmi	r3, [r6, #0]
 8003322:	6825      	ldr	r5, [r4, #0]
 8003324:	f015 0506 	ands.w	r5, r5, #6
 8003328:	d106      	bne.n	8003338 <_printf_common+0x48>
 800332a:	f104 0a19 	add.w	sl, r4, #25
 800332e:	68e3      	ldr	r3, [r4, #12]
 8003330:	6832      	ldr	r2, [r6, #0]
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	42ab      	cmp	r3, r5
 8003336:	dc26      	bgt.n	8003386 <_printf_common+0x96>
 8003338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800333c:	1e13      	subs	r3, r2, #0
 800333e:	6822      	ldr	r2, [r4, #0]
 8003340:	bf18      	it	ne
 8003342:	2301      	movne	r3, #1
 8003344:	0692      	lsls	r2, r2, #26
 8003346:	d42b      	bmi.n	80033a0 <_printf_common+0xb0>
 8003348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800334c:	4649      	mov	r1, r9
 800334e:	4638      	mov	r0, r7
 8003350:	47c0      	blx	r8
 8003352:	3001      	adds	r0, #1
 8003354:	d01e      	beq.n	8003394 <_printf_common+0xa4>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	68e5      	ldr	r5, [r4, #12]
 800335a:	6832      	ldr	r2, [r6, #0]
 800335c:	f003 0306 	and.w	r3, r3, #6
 8003360:	2b04      	cmp	r3, #4
 8003362:	bf08      	it	eq
 8003364:	1aad      	subeq	r5, r5, r2
 8003366:	68a3      	ldr	r3, [r4, #8]
 8003368:	6922      	ldr	r2, [r4, #16]
 800336a:	bf0c      	ite	eq
 800336c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003370:	2500      	movne	r5, #0
 8003372:	4293      	cmp	r3, r2
 8003374:	bfc4      	itt	gt
 8003376:	1a9b      	subgt	r3, r3, r2
 8003378:	18ed      	addgt	r5, r5, r3
 800337a:	2600      	movs	r6, #0
 800337c:	341a      	adds	r4, #26
 800337e:	42b5      	cmp	r5, r6
 8003380:	d11a      	bne.n	80033b8 <_printf_common+0xc8>
 8003382:	2000      	movs	r0, #0
 8003384:	e008      	b.n	8003398 <_printf_common+0xa8>
 8003386:	2301      	movs	r3, #1
 8003388:	4652      	mov	r2, sl
 800338a:	4649      	mov	r1, r9
 800338c:	4638      	mov	r0, r7
 800338e:	47c0      	blx	r8
 8003390:	3001      	adds	r0, #1
 8003392:	d103      	bne.n	800339c <_printf_common+0xac>
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339c:	3501      	adds	r5, #1
 800339e:	e7c6      	b.n	800332e <_printf_common+0x3e>
 80033a0:	18e1      	adds	r1, r4, r3
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	2030      	movs	r0, #48	; 0x30
 80033a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033aa:	4422      	add	r2, r4
 80033ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033b4:	3302      	adds	r3, #2
 80033b6:	e7c7      	b.n	8003348 <_printf_common+0x58>
 80033b8:	2301      	movs	r3, #1
 80033ba:	4622      	mov	r2, r4
 80033bc:	4649      	mov	r1, r9
 80033be:	4638      	mov	r0, r7
 80033c0:	47c0      	blx	r8
 80033c2:	3001      	adds	r0, #1
 80033c4:	d0e6      	beq.n	8003394 <_printf_common+0xa4>
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7d9      	b.n	800337e <_printf_common+0x8e>
	...

080033cc <_printf_i>:
 80033cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	460c      	mov	r4, r1
 80033d2:	4691      	mov	r9, r2
 80033d4:	7e27      	ldrb	r7, [r4, #24]
 80033d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033d8:	2f78      	cmp	r7, #120	; 0x78
 80033da:	4680      	mov	r8, r0
 80033dc:	469a      	mov	sl, r3
 80033de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033e2:	d807      	bhi.n	80033f4 <_printf_i+0x28>
 80033e4:	2f62      	cmp	r7, #98	; 0x62
 80033e6:	d80a      	bhi.n	80033fe <_printf_i+0x32>
 80033e8:	2f00      	cmp	r7, #0
 80033ea:	f000 80d8 	beq.w	800359e <_printf_i+0x1d2>
 80033ee:	2f58      	cmp	r7, #88	; 0x58
 80033f0:	f000 80a3 	beq.w	800353a <_printf_i+0x16e>
 80033f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033fc:	e03a      	b.n	8003474 <_printf_i+0xa8>
 80033fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003402:	2b15      	cmp	r3, #21
 8003404:	d8f6      	bhi.n	80033f4 <_printf_i+0x28>
 8003406:	a001      	add	r0, pc, #4	; (adr r0, 800340c <_printf_i+0x40>)
 8003408:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800340c:	08003465 	.word	0x08003465
 8003410:	08003479 	.word	0x08003479
 8003414:	080033f5 	.word	0x080033f5
 8003418:	080033f5 	.word	0x080033f5
 800341c:	080033f5 	.word	0x080033f5
 8003420:	080033f5 	.word	0x080033f5
 8003424:	08003479 	.word	0x08003479
 8003428:	080033f5 	.word	0x080033f5
 800342c:	080033f5 	.word	0x080033f5
 8003430:	080033f5 	.word	0x080033f5
 8003434:	080033f5 	.word	0x080033f5
 8003438:	08003585 	.word	0x08003585
 800343c:	080034a9 	.word	0x080034a9
 8003440:	08003567 	.word	0x08003567
 8003444:	080033f5 	.word	0x080033f5
 8003448:	080033f5 	.word	0x080033f5
 800344c:	080035a7 	.word	0x080035a7
 8003450:	080033f5 	.word	0x080033f5
 8003454:	080034a9 	.word	0x080034a9
 8003458:	080033f5 	.word	0x080033f5
 800345c:	080033f5 	.word	0x080033f5
 8003460:	0800356f 	.word	0x0800356f
 8003464:	680b      	ldr	r3, [r1, #0]
 8003466:	1d1a      	adds	r2, r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	600a      	str	r2, [r1, #0]
 800346c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003474:	2301      	movs	r3, #1
 8003476:	e0a3      	b.n	80035c0 <_printf_i+0x1f4>
 8003478:	6825      	ldr	r5, [r4, #0]
 800347a:	6808      	ldr	r0, [r1, #0]
 800347c:	062e      	lsls	r6, r5, #24
 800347e:	f100 0304 	add.w	r3, r0, #4
 8003482:	d50a      	bpl.n	800349a <_printf_i+0xce>
 8003484:	6805      	ldr	r5, [r0, #0]
 8003486:	600b      	str	r3, [r1, #0]
 8003488:	2d00      	cmp	r5, #0
 800348a:	da03      	bge.n	8003494 <_printf_i+0xc8>
 800348c:	232d      	movs	r3, #45	; 0x2d
 800348e:	426d      	negs	r5, r5
 8003490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003494:	485e      	ldr	r0, [pc, #376]	; (8003610 <_printf_i+0x244>)
 8003496:	230a      	movs	r3, #10
 8003498:	e019      	b.n	80034ce <_printf_i+0x102>
 800349a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800349e:	6805      	ldr	r5, [r0, #0]
 80034a0:	600b      	str	r3, [r1, #0]
 80034a2:	bf18      	it	ne
 80034a4:	b22d      	sxthne	r5, r5
 80034a6:	e7ef      	b.n	8003488 <_printf_i+0xbc>
 80034a8:	680b      	ldr	r3, [r1, #0]
 80034aa:	6825      	ldr	r5, [r4, #0]
 80034ac:	1d18      	adds	r0, r3, #4
 80034ae:	6008      	str	r0, [r1, #0]
 80034b0:	0628      	lsls	r0, r5, #24
 80034b2:	d501      	bpl.n	80034b8 <_printf_i+0xec>
 80034b4:	681d      	ldr	r5, [r3, #0]
 80034b6:	e002      	b.n	80034be <_printf_i+0xf2>
 80034b8:	0669      	lsls	r1, r5, #25
 80034ba:	d5fb      	bpl.n	80034b4 <_printf_i+0xe8>
 80034bc:	881d      	ldrh	r5, [r3, #0]
 80034be:	4854      	ldr	r0, [pc, #336]	; (8003610 <_printf_i+0x244>)
 80034c0:	2f6f      	cmp	r7, #111	; 0x6f
 80034c2:	bf0c      	ite	eq
 80034c4:	2308      	moveq	r3, #8
 80034c6:	230a      	movne	r3, #10
 80034c8:	2100      	movs	r1, #0
 80034ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034ce:	6866      	ldr	r6, [r4, #4]
 80034d0:	60a6      	str	r6, [r4, #8]
 80034d2:	2e00      	cmp	r6, #0
 80034d4:	bfa2      	ittt	ge
 80034d6:	6821      	ldrge	r1, [r4, #0]
 80034d8:	f021 0104 	bicge.w	r1, r1, #4
 80034dc:	6021      	strge	r1, [r4, #0]
 80034de:	b90d      	cbnz	r5, 80034e4 <_printf_i+0x118>
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	d04d      	beq.n	8003580 <_printf_i+0x1b4>
 80034e4:	4616      	mov	r6, r2
 80034e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80034ea:	fb03 5711 	mls	r7, r3, r1, r5
 80034ee:	5dc7      	ldrb	r7, [r0, r7]
 80034f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034f4:	462f      	mov	r7, r5
 80034f6:	42bb      	cmp	r3, r7
 80034f8:	460d      	mov	r5, r1
 80034fa:	d9f4      	bls.n	80034e6 <_printf_i+0x11a>
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d10b      	bne.n	8003518 <_printf_i+0x14c>
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	07df      	lsls	r7, r3, #31
 8003504:	d508      	bpl.n	8003518 <_printf_i+0x14c>
 8003506:	6923      	ldr	r3, [r4, #16]
 8003508:	6861      	ldr	r1, [r4, #4]
 800350a:	4299      	cmp	r1, r3
 800350c:	bfde      	ittt	le
 800350e:	2330      	movle	r3, #48	; 0x30
 8003510:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003514:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003518:	1b92      	subs	r2, r2, r6
 800351a:	6122      	str	r2, [r4, #16]
 800351c:	f8cd a000 	str.w	sl, [sp]
 8003520:	464b      	mov	r3, r9
 8003522:	aa03      	add	r2, sp, #12
 8003524:	4621      	mov	r1, r4
 8003526:	4640      	mov	r0, r8
 8003528:	f7ff fee2 	bl	80032f0 <_printf_common>
 800352c:	3001      	adds	r0, #1
 800352e:	d14c      	bne.n	80035ca <_printf_i+0x1fe>
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	b004      	add	sp, #16
 8003536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800353a:	4835      	ldr	r0, [pc, #212]	; (8003610 <_printf_i+0x244>)
 800353c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	680e      	ldr	r6, [r1, #0]
 8003544:	061f      	lsls	r7, r3, #24
 8003546:	f856 5b04 	ldr.w	r5, [r6], #4
 800354a:	600e      	str	r6, [r1, #0]
 800354c:	d514      	bpl.n	8003578 <_printf_i+0x1ac>
 800354e:	07d9      	lsls	r1, r3, #31
 8003550:	bf44      	itt	mi
 8003552:	f043 0320 	orrmi.w	r3, r3, #32
 8003556:	6023      	strmi	r3, [r4, #0]
 8003558:	b91d      	cbnz	r5, 8003562 <_printf_i+0x196>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	f023 0320 	bic.w	r3, r3, #32
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	2310      	movs	r3, #16
 8003564:	e7b0      	b.n	80034c8 <_printf_i+0xfc>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	f043 0320 	orr.w	r3, r3, #32
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	2378      	movs	r3, #120	; 0x78
 8003570:	4828      	ldr	r0, [pc, #160]	; (8003614 <_printf_i+0x248>)
 8003572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003576:	e7e3      	b.n	8003540 <_printf_i+0x174>
 8003578:	065e      	lsls	r6, r3, #25
 800357a:	bf48      	it	mi
 800357c:	b2ad      	uxthmi	r5, r5
 800357e:	e7e6      	b.n	800354e <_printf_i+0x182>
 8003580:	4616      	mov	r6, r2
 8003582:	e7bb      	b.n	80034fc <_printf_i+0x130>
 8003584:	680b      	ldr	r3, [r1, #0]
 8003586:	6826      	ldr	r6, [r4, #0]
 8003588:	6960      	ldr	r0, [r4, #20]
 800358a:	1d1d      	adds	r5, r3, #4
 800358c:	600d      	str	r5, [r1, #0]
 800358e:	0635      	lsls	r5, r6, #24
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	d501      	bpl.n	8003598 <_printf_i+0x1cc>
 8003594:	6018      	str	r0, [r3, #0]
 8003596:	e002      	b.n	800359e <_printf_i+0x1d2>
 8003598:	0671      	lsls	r1, r6, #25
 800359a:	d5fb      	bpl.n	8003594 <_printf_i+0x1c8>
 800359c:	8018      	strh	r0, [r3, #0]
 800359e:	2300      	movs	r3, #0
 80035a0:	6123      	str	r3, [r4, #16]
 80035a2:	4616      	mov	r6, r2
 80035a4:	e7ba      	b.n	800351c <_printf_i+0x150>
 80035a6:	680b      	ldr	r3, [r1, #0]
 80035a8:	1d1a      	adds	r2, r3, #4
 80035aa:	600a      	str	r2, [r1, #0]
 80035ac:	681e      	ldr	r6, [r3, #0]
 80035ae:	6862      	ldr	r2, [r4, #4]
 80035b0:	2100      	movs	r1, #0
 80035b2:	4630      	mov	r0, r6
 80035b4:	f7fc fe14 	bl	80001e0 <memchr>
 80035b8:	b108      	cbz	r0, 80035be <_printf_i+0x1f2>
 80035ba:	1b80      	subs	r0, r0, r6
 80035bc:	6060      	str	r0, [r4, #4]
 80035be:	6863      	ldr	r3, [r4, #4]
 80035c0:	6123      	str	r3, [r4, #16]
 80035c2:	2300      	movs	r3, #0
 80035c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035c8:	e7a8      	b.n	800351c <_printf_i+0x150>
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	4632      	mov	r2, r6
 80035ce:	4649      	mov	r1, r9
 80035d0:	4640      	mov	r0, r8
 80035d2:	47d0      	blx	sl
 80035d4:	3001      	adds	r0, #1
 80035d6:	d0ab      	beq.n	8003530 <_printf_i+0x164>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	079b      	lsls	r3, r3, #30
 80035dc:	d413      	bmi.n	8003606 <_printf_i+0x23a>
 80035de:	68e0      	ldr	r0, [r4, #12]
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	4298      	cmp	r0, r3
 80035e4:	bfb8      	it	lt
 80035e6:	4618      	movlt	r0, r3
 80035e8:	e7a4      	b.n	8003534 <_printf_i+0x168>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4632      	mov	r2, r6
 80035ee:	4649      	mov	r1, r9
 80035f0:	4640      	mov	r0, r8
 80035f2:	47d0      	blx	sl
 80035f4:	3001      	adds	r0, #1
 80035f6:	d09b      	beq.n	8003530 <_printf_i+0x164>
 80035f8:	3501      	adds	r5, #1
 80035fa:	68e3      	ldr	r3, [r4, #12]
 80035fc:	9903      	ldr	r1, [sp, #12]
 80035fe:	1a5b      	subs	r3, r3, r1
 8003600:	42ab      	cmp	r3, r5
 8003602:	dcf2      	bgt.n	80035ea <_printf_i+0x21e>
 8003604:	e7eb      	b.n	80035de <_printf_i+0x212>
 8003606:	2500      	movs	r5, #0
 8003608:	f104 0619 	add.w	r6, r4, #25
 800360c:	e7f5      	b.n	80035fa <_printf_i+0x22e>
 800360e:	bf00      	nop
 8003610:	08003ef5 	.word	0x08003ef5
 8003614:	08003f06 	.word	0x08003f06

08003618 <_sbrk_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4d06      	ldr	r5, [pc, #24]	; (8003634 <_sbrk_r+0x1c>)
 800361c:	2300      	movs	r3, #0
 800361e:	4604      	mov	r4, r0
 8003620:	4608      	mov	r0, r1
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	f7fe ff7e 	bl	8002524 <_sbrk>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d102      	bne.n	8003632 <_sbrk_r+0x1a>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	b103      	cbz	r3, 8003632 <_sbrk_r+0x1a>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	200003f4 	.word	0x200003f4

08003638 <__sread>:
 8003638:	b510      	push	{r4, lr}
 800363a:	460c      	mov	r4, r1
 800363c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003640:	f000 f94e 	bl	80038e0 <_read_r>
 8003644:	2800      	cmp	r0, #0
 8003646:	bfab      	itete	ge
 8003648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800364a:	89a3      	ldrhlt	r3, [r4, #12]
 800364c:	181b      	addge	r3, r3, r0
 800364e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003652:	bfac      	ite	ge
 8003654:	6563      	strge	r3, [r4, #84]	; 0x54
 8003656:	81a3      	strhlt	r3, [r4, #12]
 8003658:	bd10      	pop	{r4, pc}

0800365a <__swrite>:
 800365a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800365e:	461f      	mov	r7, r3
 8003660:	898b      	ldrh	r3, [r1, #12]
 8003662:	05db      	lsls	r3, r3, #23
 8003664:	4605      	mov	r5, r0
 8003666:	460c      	mov	r4, r1
 8003668:	4616      	mov	r6, r2
 800366a:	d505      	bpl.n	8003678 <__swrite+0x1e>
 800366c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003670:	2302      	movs	r3, #2
 8003672:	2200      	movs	r2, #0
 8003674:	f000 f916 	bl	80038a4 <_lseek_r>
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800367e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003682:	81a3      	strh	r3, [r4, #12]
 8003684:	4632      	mov	r2, r6
 8003686:	463b      	mov	r3, r7
 8003688:	4628      	mov	r0, r5
 800368a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800368e:	f7fd bd67 	b.w	8001160 <_write_r>

08003692 <__sseek>:
 8003692:	b510      	push	{r4, lr}
 8003694:	460c      	mov	r4, r1
 8003696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369a:	f000 f903 	bl	80038a4 <_lseek_r>
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	bf15      	itete	ne
 80036a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80036a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036ae:	81a3      	strheq	r3, [r4, #12]
 80036b0:	bf18      	it	ne
 80036b2:	81a3      	strhne	r3, [r4, #12]
 80036b4:	bd10      	pop	{r4, pc}

080036b6 <__sclose>:
 80036b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ba:	f000 b8c1 	b.w	8003840 <_close_r>
	...

080036c0 <__swbuf_r>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	460e      	mov	r6, r1
 80036c4:	4614      	mov	r4, r2
 80036c6:	4605      	mov	r5, r0
 80036c8:	b118      	cbz	r0, 80036d2 <__swbuf_r+0x12>
 80036ca:	6983      	ldr	r3, [r0, #24]
 80036cc:	b90b      	cbnz	r3, 80036d2 <__swbuf_r+0x12>
 80036ce:	f7ff faff 	bl	8002cd0 <__sinit>
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <__swbuf_r+0x98>)
 80036d4:	429c      	cmp	r4, r3
 80036d6:	d12b      	bne.n	8003730 <__swbuf_r+0x70>
 80036d8:	686c      	ldr	r4, [r5, #4]
 80036da:	69a3      	ldr	r3, [r4, #24]
 80036dc:	60a3      	str	r3, [r4, #8]
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	071a      	lsls	r2, r3, #28
 80036e2:	d52f      	bpl.n	8003744 <__swbuf_r+0x84>
 80036e4:	6923      	ldr	r3, [r4, #16]
 80036e6:	b36b      	cbz	r3, 8003744 <__swbuf_r+0x84>
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	6820      	ldr	r0, [r4, #0]
 80036ec:	1ac0      	subs	r0, r0, r3
 80036ee:	6963      	ldr	r3, [r4, #20]
 80036f0:	b2f6      	uxtb	r6, r6
 80036f2:	4283      	cmp	r3, r0
 80036f4:	4637      	mov	r7, r6
 80036f6:	dc04      	bgt.n	8003702 <__swbuf_r+0x42>
 80036f8:	4621      	mov	r1, r4
 80036fa:	4628      	mov	r0, r5
 80036fc:	f7ff fa54 	bl	8002ba8 <_fflush_r>
 8003700:	bb30      	cbnz	r0, 8003750 <__swbuf_r+0x90>
 8003702:	68a3      	ldr	r3, [r4, #8]
 8003704:	3b01      	subs	r3, #1
 8003706:	60a3      	str	r3, [r4, #8]
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	6022      	str	r2, [r4, #0]
 800370e:	701e      	strb	r6, [r3, #0]
 8003710:	6963      	ldr	r3, [r4, #20]
 8003712:	3001      	adds	r0, #1
 8003714:	4283      	cmp	r3, r0
 8003716:	d004      	beq.n	8003722 <__swbuf_r+0x62>
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	07db      	lsls	r3, r3, #31
 800371c:	d506      	bpl.n	800372c <__swbuf_r+0x6c>
 800371e:	2e0a      	cmp	r6, #10
 8003720:	d104      	bne.n	800372c <__swbuf_r+0x6c>
 8003722:	4621      	mov	r1, r4
 8003724:	4628      	mov	r0, r5
 8003726:	f7ff fa3f 	bl	8002ba8 <_fflush_r>
 800372a:	b988      	cbnz	r0, 8003750 <__swbuf_r+0x90>
 800372c:	4638      	mov	r0, r7
 800372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <__swbuf_r+0x9c>)
 8003732:	429c      	cmp	r4, r3
 8003734:	d101      	bne.n	800373a <__swbuf_r+0x7a>
 8003736:	68ac      	ldr	r4, [r5, #8]
 8003738:	e7cf      	b.n	80036da <__swbuf_r+0x1a>
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <__swbuf_r+0xa0>)
 800373c:	429c      	cmp	r4, r3
 800373e:	bf08      	it	eq
 8003740:	68ec      	ldreq	r4, [r5, #12]
 8003742:	e7ca      	b.n	80036da <__swbuf_r+0x1a>
 8003744:	4621      	mov	r1, r4
 8003746:	4628      	mov	r0, r5
 8003748:	f000 f80c 	bl	8003764 <__swsetup_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	d0cb      	beq.n	80036e8 <__swbuf_r+0x28>
 8003750:	f04f 37ff 	mov.w	r7, #4294967295
 8003754:	e7ea      	b.n	800372c <__swbuf_r+0x6c>
 8003756:	bf00      	nop
 8003758:	08003ea4 	.word	0x08003ea4
 800375c:	08003ec4 	.word	0x08003ec4
 8003760:	08003e84 	.word	0x08003e84

08003764 <__swsetup_r>:
 8003764:	4b32      	ldr	r3, [pc, #200]	; (8003830 <__swsetup_r+0xcc>)
 8003766:	b570      	push	{r4, r5, r6, lr}
 8003768:	681d      	ldr	r5, [r3, #0]
 800376a:	4606      	mov	r6, r0
 800376c:	460c      	mov	r4, r1
 800376e:	b125      	cbz	r5, 800377a <__swsetup_r+0x16>
 8003770:	69ab      	ldr	r3, [r5, #24]
 8003772:	b913      	cbnz	r3, 800377a <__swsetup_r+0x16>
 8003774:	4628      	mov	r0, r5
 8003776:	f7ff faab 	bl	8002cd0 <__sinit>
 800377a:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <__swsetup_r+0xd0>)
 800377c:	429c      	cmp	r4, r3
 800377e:	d10f      	bne.n	80037a0 <__swsetup_r+0x3c>
 8003780:	686c      	ldr	r4, [r5, #4]
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003788:	0719      	lsls	r1, r3, #28
 800378a:	d42c      	bmi.n	80037e6 <__swsetup_r+0x82>
 800378c:	06dd      	lsls	r5, r3, #27
 800378e:	d411      	bmi.n	80037b4 <__swsetup_r+0x50>
 8003790:	2309      	movs	r3, #9
 8003792:	6033      	str	r3, [r6, #0]
 8003794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003798:	81a3      	strh	r3, [r4, #12]
 800379a:	f04f 30ff 	mov.w	r0, #4294967295
 800379e:	e03e      	b.n	800381e <__swsetup_r+0xba>
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <__swsetup_r+0xd4>)
 80037a2:	429c      	cmp	r4, r3
 80037a4:	d101      	bne.n	80037aa <__swsetup_r+0x46>
 80037a6:	68ac      	ldr	r4, [r5, #8]
 80037a8:	e7eb      	b.n	8003782 <__swsetup_r+0x1e>
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <__swsetup_r+0xd8>)
 80037ac:	429c      	cmp	r4, r3
 80037ae:	bf08      	it	eq
 80037b0:	68ec      	ldreq	r4, [r5, #12]
 80037b2:	e7e6      	b.n	8003782 <__swsetup_r+0x1e>
 80037b4:	0758      	lsls	r0, r3, #29
 80037b6:	d512      	bpl.n	80037de <__swsetup_r+0x7a>
 80037b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037ba:	b141      	cbz	r1, 80037ce <__swsetup_r+0x6a>
 80037bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037c0:	4299      	cmp	r1, r3
 80037c2:	d002      	beq.n	80037ca <__swsetup_r+0x66>
 80037c4:	4630      	mov	r0, r6
 80037c6:	f7ff fb8f 	bl	8002ee8 <_free_r>
 80037ca:	2300      	movs	r3, #0
 80037cc:	6363      	str	r3, [r4, #52]	; 0x34
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	2300      	movs	r3, #0
 80037d8:	6063      	str	r3, [r4, #4]
 80037da:	6923      	ldr	r3, [r4, #16]
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	81a3      	strh	r3, [r4, #12]
 80037e6:	6923      	ldr	r3, [r4, #16]
 80037e8:	b94b      	cbnz	r3, 80037fe <__swsetup_r+0x9a>
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f4:	d003      	beq.n	80037fe <__swsetup_r+0x9a>
 80037f6:	4621      	mov	r1, r4
 80037f8:	4630      	mov	r0, r6
 80037fa:	f7ff fb2d 	bl	8002e58 <__smakebuf_r>
 80037fe:	89a0      	ldrh	r0, [r4, #12]
 8003800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003804:	f010 0301 	ands.w	r3, r0, #1
 8003808:	d00a      	beq.n	8003820 <__swsetup_r+0xbc>
 800380a:	2300      	movs	r3, #0
 800380c:	60a3      	str	r3, [r4, #8]
 800380e:	6963      	ldr	r3, [r4, #20]
 8003810:	425b      	negs	r3, r3
 8003812:	61a3      	str	r3, [r4, #24]
 8003814:	6923      	ldr	r3, [r4, #16]
 8003816:	b943      	cbnz	r3, 800382a <__swsetup_r+0xc6>
 8003818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800381c:	d1ba      	bne.n	8003794 <__swsetup_r+0x30>
 800381e:	bd70      	pop	{r4, r5, r6, pc}
 8003820:	0781      	lsls	r1, r0, #30
 8003822:	bf58      	it	pl
 8003824:	6963      	ldrpl	r3, [r4, #20]
 8003826:	60a3      	str	r3, [r4, #8]
 8003828:	e7f4      	b.n	8003814 <__swsetup_r+0xb0>
 800382a:	2000      	movs	r0, #0
 800382c:	e7f7      	b.n	800381e <__swsetup_r+0xba>
 800382e:	bf00      	nop
 8003830:	2000002c 	.word	0x2000002c
 8003834:	08003ea4 	.word	0x08003ea4
 8003838:	08003ec4 	.word	0x08003ec4
 800383c:	08003e84 	.word	0x08003e84

08003840 <_close_r>:
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	4d06      	ldr	r5, [pc, #24]	; (800385c <_close_r+0x1c>)
 8003844:	2300      	movs	r3, #0
 8003846:	4604      	mov	r4, r0
 8003848:	4608      	mov	r0, r1
 800384a:	602b      	str	r3, [r5, #0]
 800384c:	f7fe fe35 	bl	80024ba <_close>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d102      	bne.n	800385a <_close_r+0x1a>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	b103      	cbz	r3, 800385a <_close_r+0x1a>
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	200003f4 	.word	0x200003f4

08003860 <_fstat_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4d07      	ldr	r5, [pc, #28]	; (8003880 <_fstat_r+0x20>)
 8003864:	2300      	movs	r3, #0
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	f7fe fe30 	bl	80024d2 <_fstat>
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	d102      	bne.n	800387c <_fstat_r+0x1c>
 8003876:	682b      	ldr	r3, [r5, #0]
 8003878:	b103      	cbz	r3, 800387c <_fstat_r+0x1c>
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	bd38      	pop	{r3, r4, r5, pc}
 800387e:	bf00      	nop
 8003880:	200003f4 	.word	0x200003f4

08003884 <_isatty_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4d06      	ldr	r5, [pc, #24]	; (80038a0 <_isatty_r+0x1c>)
 8003888:	2300      	movs	r3, #0
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fe fe2f 	bl	80024f2 <_isatty>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_isatty_r+0x1a>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_isatty_r+0x1a>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	200003f4 	.word	0x200003f4

080038a4 <_lseek_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d07      	ldr	r5, [pc, #28]	; (80038c4 <_lseek_r+0x20>)
 80038a8:	4604      	mov	r4, r0
 80038aa:	4608      	mov	r0, r1
 80038ac:	4611      	mov	r1, r2
 80038ae:	2200      	movs	r2, #0
 80038b0:	602a      	str	r2, [r5, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7fe fe28 	bl	8002508 <_lseek>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_lseek_r+0x1e>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_lseek_r+0x1e>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	200003f4 	.word	0x200003f4

080038c8 <__malloc_lock>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <__malloc_lock+0x8>)
 80038ca:	f7ff ba9f 	b.w	8002e0c <__retarget_lock_acquire_recursive>
 80038ce:	bf00      	nop
 80038d0:	200003ec 	.word	0x200003ec

080038d4 <__malloc_unlock>:
 80038d4:	4801      	ldr	r0, [pc, #4]	; (80038dc <__malloc_unlock+0x8>)
 80038d6:	f7ff ba9a 	b.w	8002e0e <__retarget_lock_release_recursive>
 80038da:	bf00      	nop
 80038dc:	200003ec 	.word	0x200003ec

080038e0 <_read_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4d07      	ldr	r5, [pc, #28]	; (8003900 <_read_r+0x20>)
 80038e4:	4604      	mov	r4, r0
 80038e6:	4608      	mov	r0, r1
 80038e8:	4611      	mov	r1, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	602a      	str	r2, [r5, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f7fe fdc6 	bl	8002480 <_read>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_read_r+0x1e>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_read_r+0x1e>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	200003f4 	.word	0x200003f4

08003904 <_init>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr

08003910 <_fini>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr
