
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08002380  08002380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002918  08002918  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002918  08002918  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002918  08002918  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002918  08002918  00012918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000090  080029b0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080029b0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066fd  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001229  00000000  00000000  000267bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  000279e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004d0  00000000  00000000  00027f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032c9  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004fd4  00000000  00000000  0002b6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a08c  00000000  00000000  000306c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008a751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee0  00000000  00000000  0008a7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002368 	.word	0x08002368

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08002368 	.word	0x08002368

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000270:	b480      	push	{r7}
 8000272:	b08b      	sub	sp, #44	; 0x2c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000298:	4b91      	ldr	r3, [pc, #580]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	2b08      	cmp	r3, #8
 80002a6:	d011      	beq.n	80002cc <RCC_GetClocksFreq+0x5c>
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	2b08      	cmp	r3, #8
 80002ac:	d837      	bhi.n	800031e <RCC_GetClocksFreq+0xae>
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <RCC_GetClocksFreq+0x4c>
 80002b4:	6a3b      	ldr	r3, [r7, #32]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d004      	beq.n	80002c4 <RCC_GetClocksFreq+0x54>
 80002ba:	e030      	b.n	800031e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a89      	ldr	r2, [pc, #548]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c0:	601a      	str	r2, [r3, #0]
      break;
 80002c2:	e030      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a87      	ldr	r2, [pc, #540]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 80002c8:	601a      	str	r2, [r3, #0]
      break;
 80002ca:	e02c      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002cc:	4b84      	ldr	r3, [pc, #528]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002d4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002d6:	4b82      	ldr	r3, [pc, #520]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	0c9b      	lsrs	r3, r3, #18
 80002e4:	3302      	adds	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4a7d      	ldr	r2, [pc, #500]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e00d      	b.n	8000316 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002fa:	4b79      	ldr	r3, [pc, #484]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000306:	4a77      	ldr	r2, [pc, #476]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fbb2 f2f3 	udiv	r2, r2, r3
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	fb02 f303 	mul.w	r3, r2, r3
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031a:	601a      	str	r2, [r3, #0]
      break;
 800031c:	e003      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a70      	ldr	r2, [pc, #448]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000322:	601a      	str	r2, [r3, #0]
      break;
 8000324:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000326:	4b6e      	ldr	r3, [pc, #440]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800032e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000336:	4a6d      	ldr	r2, [pc, #436]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	40da      	lsrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800034e:	4b64      	ldr	r3, [pc, #400]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000356:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000358:	6a3b      	ldr	r3, [r7, #32]
 800035a:	0a1b      	lsrs	r3, r3, #8
 800035c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800035e:	4a63      	ldr	r2, [pc, #396]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	40da      	lsrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000376:	4b5a      	ldr	r3, [pc, #360]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800037e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	0adb      	lsrs	r3, r3, #11
 8000384:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000386:	4a59      	ldr	r2, [pc, #356]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000388:	6a3b      	ldr	r3, [r7, #32]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	40da      	lsrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800039e:	4b50      	ldr	r3, [pc, #320]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003a8:	6a3b      	ldr	r3, [r7, #32]
 80003aa:	091b      	lsrs	r3, r3, #4
 80003ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ae:	4a50      	ldr	r2, [pc, #320]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d006      	beq.n	80003d2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	e003      	b.n	80003da <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003da:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80003dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003de:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	0a5b      	lsrs	r3, r3, #9
 80003e8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ea:	4a41      	ldr	r2, [pc, #260]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	fbb2 f2f3 	udiv	r2, r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	e003      	b.n	8000416 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000416:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	f003 0310 	and.w	r3, r3, #16
 800041e:	2b10      	cmp	r3, #16
 8000420:	d003      	beq.n	800042a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	e003      	b.n	8000432 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	2b20      	cmp	r3, #32
 800043c:	d003      	beq.n	8000446 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a28      	ldr	r2, [pc, #160]	; (80004e4 <RCC_GetClocksFreq+0x274>)
 8000442:	61da      	str	r2, [r3, #28]
 8000444:	e003      	b.n	800044e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045a:	d10d      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000462:	429a      	cmp	r2, r3
 8000464:	d108      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	429a      	cmp	r2, r3
 800046c:	d104      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	005a      	lsls	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	e003      	b.n	8000480 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048c:	d10d      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000494:	429a      	cmp	r2, r3
 8000496:	d108      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	d104      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	005a      	lsls	r2, r3, #1
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
 80004a8:	e003      	b.n	80004b2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d104      	bne.n	80004c8 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
 80004c6:	e029      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <RCC_GetClocksFreq+0x270>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d10f      	bne.n	80004f4 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
 80004dc:	e01e      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	007a1200 	.word	0x007a1200
 80004e8:	003d0900 	.word	0x003d0900
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80004f4:	4b66      	ldr	r3, [pc, #408]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f003 0303 	and.w	r3, r3, #3
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d104      	bne.n	800050a <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
 8000508:	e008      	b.n	800051c <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800050a:	4b61      	ldr	r3, [pc, #388]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	2b03      	cmp	r3, #3
 8000514:	d102      	bne.n	800051c <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a5e      	ldr	r2, [pc, #376]	; (8000694 <RCC_GetClocksFreq+0x424>)
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689a      	ldr	r2, [r3, #8]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000530:	e021      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000532:	4b57      	ldr	r3, [pc, #348]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800053a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053e:	d104      	bne.n	800054a <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
 8000548:	e015      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800054a:	4b51      	ldr	r3, [pc, #324]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000556:	d104      	bne.n	8000562 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000560:	e009      	b.n	8000576 <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800056a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800056e:	d102      	bne.n	8000576 <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a48      	ldr	r2, [pc, #288]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d104      	bne.n	800058c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
 800058a:	e021      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000598:	d104      	bne.n	80005a4 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	631a      	str	r2, [r3, #48]	; 0x30
 80005a2:	e015      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005b0:	d104      	bne.n	80005bc <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ba:	e009      	b.n	80005d0 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005c8:	d102      	bne.n	80005d0 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a31      	ldr	r2, [pc, #196]	; (8000694 <RCC_GetClocksFreq+0x424>)
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
 80005e4:	e021      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80005f2:	d104      	bne.n	80005fe <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
 80005fc:	e015      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800060a:	d104      	bne.n	8000616 <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
 8000614:	e009      	b.n	800062a <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800061e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000622:	d102      	bne.n	800062a <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d104      	bne.n	8000640 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800063e:	e021      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800064c:	d104      	bne.n	8000658 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000656:	e015      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000664:	d104      	bne.n	8000670 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800066e:	e009      	b.n	8000684 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000678:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800067c:	d102      	bne.n	8000684 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000682:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000684:	bf00      	nop
 8000686:	372c      	adds	r7, #44	; 0x2c
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	007a1200 	.word	0x007a1200

08000698 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006ee:	2201      	movs	r2, #1
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d103      	bne.n	8000706 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e005      	b.n	8000712 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d102      	bne.n	8000712 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3308      	adds	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000724:	e006      	b.n	8000734 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43da      	mvns	r2, r3
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3724      	adds	r7, #36	; 0x24
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000772:	b480      	push	{r7}
 8000774:	b087      	sub	sp, #28
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b29b      	uxth	r3, r3
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800079c:	2201      	movs	r2, #1
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d105      	bne.n	80007b8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	4013      	ands	r3, r2
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e00d      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d105      	bne.n	80007ca <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4013      	ands	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e004      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4013      	ands	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007da:	2201      	movs	r2, #1
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <USART_GetITStatus+0x8e>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80007fa:	2301      	movs	r3, #1
 80007fc:	74fb      	strb	r3, [r7, #19]
 80007fe:	e001      	b.n	8000804 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000804:	7cfb      	ldrb	r3, [r7, #19]
}
 8000806:	4618      	mov	r0, r3
 8000808:	371c      	adds	r7, #28
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2201      	movs	r2, #1
 8000826:	fa02 f103 	lsl.w	r1, r2, r3
 800082a:	4a06      	ldr	r2, [pc, #24]	; (8000844 <NVIC_EnableIRQ+0x30>)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	095b      	lsrs	r3, r3, #5
 8000832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	b29b      	uxth	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <uart_put_char+0x30>)
 800085a:	f7ff ff1d 	bl	8000698 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800085e:	bf00      	nop
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <uart_put_char+0x30>)
 8000864:	f7ff ff6c 	bl	8000740 <USART_GetFlagStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f8      	beq.n	8000860 <uart_put_char+0x18>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40004400 	.word	0x40004400

0800087c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e012      	b.n	80008b6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b0a      	cmp	r3, #10
 800089a:	d102      	bne.n	80008a2 <_write_r+0x26>
            uart_put_char('\r');
 800089c:	200d      	movs	r0, #13
 800089e:	f7ff ffd3 	bl	8000848 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffcc 	bl	8000848 <uart_put_char>
    for (n = 0; n < len; n++) {
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	3301      	adds	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	dbe8      	blt.n	8000890 <_write_r+0x14>
    }

    return len;
 80008be:	683b      	ldr	r3, [r7, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80008cc:	4915      	ldr	r1, [pc, #84]	; (8000924 <USART2_IRQHandler+0x5c>)
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <USART2_IRQHandler+0x60>)
 80008d0:	f7ff ff4f 	bl	8000772 <USART_GetITStatus>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d021      	beq.n	800091e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <USART2_IRQHandler+0x60>)
 80008dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008de:	b299      	uxth	r1, r3
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <USART2_IRQHandler+0x64>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	b2d0      	uxtb	r0, r2
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <USART2_IRQHandler+0x64>)
 80008ec:	7010      	strb	r0, [r2, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	b2c9      	uxtb	r1, r1
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <USART2_IRQHandler+0x68>)
 80008f4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <USART2_IRQHandler+0x6c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d107      	bne.n	8000910 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <USART2_IRQHandler+0x70>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	3301      	adds	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <USART2_IRQHandler+0x70>)
 800090c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800090e:	e006      	b.n	800091e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <USART2_IRQHandler+0x6c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <USART2_IRQHandler+0x6c>)
 800091c:	701a      	strb	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	00050105 	.word	0x00050105
 8000928:	40004400 	.word	0x40004400
 800092c:	200001ac 	.word	0x200001ac
 8000930:	200000ac 	.word	0x200000ac
 8000934:	200001ae 	.word	0x200001ae
 8000938:	200001ad 	.word	0x200001ad

0800093c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000944:	4b86      	ldr	r3, [pc, #536]	; (8000b60 <uart_init+0x224>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fcc1 	bl	80012d4 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000952:	4b83      	ldr	r3, [pc, #524]	; (8000b60 <uart_init+0x224>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fcba 	bl	80012d4 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000960:	4b80      	ldr	r3, [pc, #512]	; (8000b64 <uart_init+0x228>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	4a7f      	ldr	r2, [pc, #508]	; (8000b64 <uart_init+0x228>)
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800096c:	4b7d      	ldr	r3, [pc, #500]	; (8000b64 <uart_init+0x228>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a7c      	ldr	r2, [pc, #496]	; (8000b64 <uart_init+0x228>)
 8000972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000976:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800097c:	6a1b      	ldr	r3, [r3, #32]
 800097e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000986:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000996:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80009a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80009a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ac:	6a1b      	ldr	r3, [r3, #32]
 80009ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009b2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80009b6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80009b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009c6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80009c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009d2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009d6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80009d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009dc:	889b      	ldrh	r3, [r3, #4]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e4:	f023 030c 	bic.w	r3, r3, #12
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80009ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f4:	8892      	ldrh	r2, [r2, #4]
 80009f6:	b292      	uxth	r2, r2
 80009f8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80009fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a08:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a14:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a18:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a28:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a34:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a38:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a3a:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <uart_init+0x22c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a4a      	ldr	r2, [pc, #296]	; (8000b68 <uart_init+0x22c>)
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000a46:	4b48      	ldr	r3, [pc, #288]	; (8000b68 <uart_init+0x22c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4a47      	ldr	r2, [pc, #284]	; (8000b68 <uart_init+0x22c>)
 8000a4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a50:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000a52:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <uart_init+0x22c>)
 8000a54:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <uart_init+0x22c>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <uart_init+0x22c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a42      	ldr	r2, [pc, #264]	; (8000b68 <uart_init+0x22c>)
 8000a60:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a64:	f023 030c 	bic.w	r3, r3, #12
 8000a68:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <uart_init+0x22c>)
 8000a6c:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <uart_init+0x22c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <uart_init+0x22c>)
 8000a74:	4a3c      	ldr	r2, [pc, #240]	; (8000b68 <uart_init+0x22c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <uart_init+0x22c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <uart_init+0x22c>)
 8000a80:	f043 030c 	orr.w	r3, r3, #12
 8000a84:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <uart_init+0x22c>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	4a37      	ldr	r2, [pc, #220]	; (8000b68 <uart_init+0x22c>)
 8000a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a90:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <uart_init+0x22c>)
 8000a94:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <uart_init+0x22c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fbe0 	bl	8000270 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <uart_init+0x22c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d010      	beq.n	8000ae2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ac2:	005a      	lsls	r2, r3, #1
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	fb01 f202 	mul.w	r2, r1, r2
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ae0:	e00d      	b.n	8000afe <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	fb01 f202 	mul.w	r2, r1, r2
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d302      	bcc.n	8000b0e <uart_init+0x1d2>
        divider++;
 8000b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <uart_init+0x22c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00b      	beq.n	8000b32 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b26:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <uart_init+0x22c>)
 8000b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b36:	b292      	uxth	r2, r2
 8000b38:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <uart_init+0x22c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <uart_init+0x22c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b46:	2201      	movs	r2, #1
 8000b48:	4908      	ldr	r1, [pc, #32]	; (8000b6c <uart_init+0x230>)
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <uart_init+0x22c>)
 8000b4c:	f7ff fdb6 	bl	80006bc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000b50:	2026      	movs	r0, #38	; 0x26
 8000b52:	f7ff fe5f 	bl	8000814 <NVIC_EnableIRQ>
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000002c 	.word	0x2000002c
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	00050105 	.word	0x00050105

08000b70 <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
	printf("%c[m", ESC);
}

void clrscr() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	printf("%c[%s", ESC, "2J");
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <clrscr+0x1c>)
 8000b76:	211b      	movs	r1, #27
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <clrscr+0x20>)
 8000b7a:	f000 fb07 	bl	800118c <iprintf>
	printf("%c[%s", ESC, "3J");
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <clrscr+0x24>)
 8000b80:	211b      	movs	r1, #27
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <clrscr+0x20>)
 8000b84:	f000 fb02 	bl	800118c <iprintf>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	080023ac 	.word	0x080023ac
 8000b90:	080023b0 	.word	0x080023b0
 8000b94:	080023b8 	.word	0x080023b8

08000b98 <printFix>:
		printf("%c", btt);
	}
	printf("%c\n", br);
}

void printFix(int32_t i) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
// Prints a signed 16.16 fixed point number
if ((i & 0x80000000) != 0) { // Handle negative numbers
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	da05      	bge.n	8000bb2 <printFix+0x1a>
printf("-");
 8000ba6:	202d      	movs	r0, #45	; 0x2d
 8000ba8:	f000 fb08 	bl	80011bc <putchar>
i = ~i + 1;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	425b      	negs	r3, r3
 8000bb0:	607b      	str	r3, [r7, #4]
}
printf("%ld.%04ld", i >> 16, 10000 * (uint32_t)(i & 0xFFFF) >> 16);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	1419      	asrs	r1, r3, #16
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bbe:	fb02 f303 	mul.w	r3, r2, r3
 8000bc2:	0c1b      	lsrs	r3, r3, #16
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <printFix+0x3c>)
 8000bc8:	f000 fae0 	bl	800118c <iprintf>
// Print a maximum of 4 decimal digits to avoid overflow
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08002418 	.word	0x08002418

08000bd8 <expand>:

int32_t expand(int32_t i) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
// Converts an 18.14 fixed point number to 16.16
return i << 2;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	009b      	lsls	r3, r3, #2
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <sinus>:

int32_t sinus(int32_t i) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	//input int i out 16.16 tal/fixpoint
	if (i < 0) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da08      	bge.n	8000c10 <sinus+0x20>
		return -SIN[-i & 0x1FF];
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	425b      	negs	r3, r3
 8000c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <sinus+0x38>)
 8000c08:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	e005      	b.n	8000c1c <sinus+0x2c>
	}
	else {
		return SIN[i & 0x1FF];
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <sinus+0x38>)
 8000c18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
	}
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	08002480 	.word	0x08002480

08000c2c <cosinus>:

int32_t cosinus(int32_t i) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	i += 128;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3380      	adds	r3, #128	; 0x80
 8000c38:	607b      	str	r3, [r7, #4]
	//input int i out 16.16 tal/fixpoint
	if (i < 0) {
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	da08      	bge.n	8000c52 <cosinus+0x26>
		return -SIN[-i & 0x1FF];
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	425b      	negs	r3, r3
 8000c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c48:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <cosinus+0x40>)
 8000c4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c4e:	425b      	negs	r3, r3
 8000c50:	e005      	b.n	8000c5e <cosinus+0x32>
	}
	else {
		return SIN[i & 0x1FF];
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <cosinus+0x40>)
 8000c5a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
	}
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	08002480 	.word	0x08002480

08000c70 <printSin>:

int32_t printSin(int32_t x){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	printf("Sin(%d%c): ",x,248);
 8000c78:	22f8      	movs	r2, #248	; 0xf8
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <printSin+0x38>)
 8000c7e:	f000 fa85 	bl	800118c <iprintf>
	printFix(expand(sinus(x)));
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffb4 	bl	8000bf0 <sinus>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffa4 	bl	8000bd8 <expand>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff80 	bl	8000b98 <printFix>
	printf("\n");
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f000 fa8f 	bl	80011bc <putchar>
 }
 8000c9e:	bf00      	nop
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	08002424 	.word	0x08002424

08000cac <printCos>:


int32_t printCos(int32_t x){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	printf("Cos(%d%c): ",x,248);
 8000cb4:	22f8      	movs	r2, #248	; 0xf8
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <printCos+0x3c>)
 8000cba:	f000 fa67 	bl	800118c <iprintf>
	printFix(expand(sinus(x+128)));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3380      	adds	r3, #128	; 0x80
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff94 	bl	8000bf0 <sinus>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff84 	bl	8000bd8 <expand>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff60 	bl	8000b98 <printFix>
	printf("\n");
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f000 fa6f 	bl	80011bc <putchar>
 }
 8000cde:	bf00      	nop
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08002430 	.word	0x08002430

08000cec <rotateVector>:
void initVector(vector_t* v){
	v -> x = 10;
	v -> y = 20;
}

void rotateVector(vector_t *vec, int32_t angle){
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
	int32_t x = vec->x;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	60fb      	str	r3, [r7, #12]
	int32_t y = vec->y;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	60bb      	str	r3, [r7, #8]

	vec -> x = FIX14_MULTI(x, cosinus(angle)) - FIX14_MULTI(y,   sinus(angle));
 8000d02:	6838      	ldr	r0, [r7, #0]
 8000d04:	f7ff ff92 	bl	8000c2c <cosinus>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	fb03 f302 	mul.w	r3, r3, r2
 8000d10:	139c      	asrs	r4, r3, #14
 8000d12:	6838      	ldr	r0, [r7, #0]
 8000d14:	f7ff ff6c 	bl	8000bf0 <sinus>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	fb03 f302 	mul.w	r3, r3, r2
 8000d20:	139b      	asrs	r3, r3, #14
 8000d22:	1ae2      	subs	r2, r4, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
	vec -> y = FIX14_MULTI(x, 	sinus(angle)) + FIX14_MULTI(y, cosinus(angle));
 8000d28:	6838      	ldr	r0, [r7, #0]
 8000d2a:	f7ff ff61 	bl	8000bf0 <sinus>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	fb03 f302 	mul.w	r3, r3, r2
 8000d36:	139c      	asrs	r4, r3, #14
 8000d38:	6838      	ldr	r0, [r7, #0]
 8000d3a:	f7ff ff77 	bl	8000c2c <cosinus>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	fb03 f302 	mul.w	r3, r3, r2
 8000d46:	139b      	asrs	r3, r3, #14
 8000d48:	18e2      	adds	r2, r4, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	605a      	str	r2, [r3, #4]

	//vec->x = x * cosinus(angle) - y * sinus(angle);
	//vec->y = x * sinus(angle) + y * cosinus(angle);

}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
	...

08000d58 <printVec>:

void printVec(vector_t v, int32_t angle){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d66:	607a      	str	r2, [r7, #4]
	printf("Rotated Vector: (");
 8000d68:	4810      	ldr	r0, [pc, #64]	; (8000dac <printVec+0x54>)
 8000d6a:	f000 fa0f 	bl	800118c <iprintf>
	printFix(expand(v.x));
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff31 	bl	8000bd8 <expand>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff0d 	bl	8000b98 <printFix>
	printf(",");
 8000d7e:	202c      	movs	r0, #44	; 0x2c
 8000d80:	f000 fa1c 	bl	80011bc <putchar>
	printFix(expand(v.y));
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff26 	bl	8000bd8 <expand>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff02 	bl	8000b98 <printFix>
	printf("),\t%d%c",angle,248);
 8000d94:	22f8      	movs	r2, #248	; 0xf8
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <printVec+0x58>)
 8000d9a:	f000 f9f7 	bl	800118c <iprintf>
	printf(", ");
	printFix(expand(v.y));
	printf(" | %d, %d\n",expand(v.x) << 14,expand(v.y)>> 14);
	*/

	printf("\n");
 8000d9e:	200a      	movs	r0, #10
 8000da0:	f000 fa0c 	bl	80011bc <putchar>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	0800243c 	.word	0x0800243c
 8000db0:	08002450 	.word	0x08002450

08000db4 <main>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "ansi.h"


int main(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0

	// Setup communication with the PC
	uart_init(9600);
 8000dba:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000dbe:	f7ff fdbd 	bl	800093c <uart_init>
	 window(0,0,10,2,"Hello Wolrd",1);
	 window(2,2,20,5,"Hello Wolrd2",2);
	 window(5,5,30,10,"Hello Wolrd3",1);
	 window(0,0,20,20,"Window Panel",2);
	 */
	clrscr();
 8000dc2:	f7ff fed5 	bl	8000b70 <clrscr>
	printf("\n\n===========\n");
 8000dc6:	4836      	ldr	r0, [pc, #216]	; (8000ea0 <main+0xec>)
 8000dc8:	f000 fa7c 	bl	80012c4 <puts>

	printSin(0);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff ff4f 	bl	8000c70 <printSin>

	//printSin(45);
	printSin(64); // 45
 8000dd2:	2040      	movs	r0, #64	; 0x40
 8000dd4:	f7ff ff4c 	bl	8000c70 <printSin>

	//printSin(-78);
	printSin(-111);
 8000dd8:	f06f 006e 	mvn.w	r0, #110	; 0x6e
 8000ddc:	f7ff ff48 	bl	8000c70 <printSin>


	//printSin(649);
	printSin(923);
 8000de0:	f240 309b 	movw	r0, #923	; 0x39b
 8000de4:	f7ff ff44 	bl	8000c70 <printSin>

	printf("\n-------\n\n");
 8000de8:	482e      	ldr	r0, [pc, #184]	; (8000ea4 <main+0xf0>)
 8000dea:	f000 fa6b 	bl	80012c4 <puts>

	printCos(0);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff ff5c 	bl	8000cac <printCos>

	//printCos(45);
	printCos(64);
 8000df4:	2040      	movs	r0, #64	; 0x40
 8000df6:	f7ff ff59 	bl	8000cac <printCos>

	//printCos(-78);
	printCos(-111);
 8000dfa:	f06f 006e 	mvn.w	r0, #110	; 0x6e
 8000dfe:	f7ff ff55 	bl	8000cac <printCos>

	//printCos(649);
	printCos(923);
 8000e02:	f240 309b 	movw	r0, #923	; 0x39b
 8000e06:	f7ff ff51 	bl	8000cac <printCos>

	printf("\n-------\n\n");
 8000e0a:	4826      	ldr	r0, [pc, #152]	; (8000ea4 <main+0xf0>)
 8000e0c:	f000 fa5a 	bl	80012c4 <puts>

	printf("%l\n",printFix(expand(sinus(256))));
 8000e10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e14:	f7ff feec 	bl	8000bf0 <sinus>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fedc 	bl	8000bd8 <expand>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff feb8 	bl	8000b98 <printFix>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481e      	ldr	r0, [pc, #120]	; (8000ea8 <main+0xf4>)
 8000e2e:	f000 f9ad 	bl	800118c <iprintf>
	printf("%l\n",printFix(expand(cosinus(256))));
 8000e32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e36:	f7ff fef9 	bl	8000c2c <cosinus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fecb 	bl	8000bd8 <expand>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fea7 	bl	8000b98 <printFix>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <main+0xf4>)
 8000e50:	f000 f99c 	bl	800118c <iprintf>

	printf("\n-------\n\n");
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <main+0xf0>)
 8000e56:	f000 fa35 	bl	80012c4 <puts>

	vector_t v = {1 << FIX14_SHIFT, 2 << FIX14_SHIFT};
 8000e5a:	4a14      	ldr	r2, [pc, #80]	; (8000eac <main+0xf8>)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e62:	e883 0003 	stmia.w	r3, {r0, r1}
	int32_t angle = 128;
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	60bb      	str	r3, [r7, #8]
	printVec(v, angle);
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e72:	f7ff ff71 	bl	8000d58 <printVec>

	for (int i=0; i<4;i++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	e00d      	b.n	8000e98 <main+0xe4>
		rotateVector(&v, angle);
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	68b9      	ldr	r1, [r7, #8]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff33 	bl	8000cec <rotateVector>
		printVec(v, angle);
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	463b      	mov	r3, r7
 8000e8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e8e:	f7ff ff63 	bl	8000d58 <printVec>
	for (int i=0; i<4;i++){
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	ddee      	ble.n	8000e7c <main+0xc8>
	}



	while (1) {
 8000e9e:	e7fe      	b.n	8000e9e <main+0xea>
 8000ea0:	08002458 	.word	0x08002458
 8000ea4:	08002468 	.word	0x08002468
 8000ea8:	08002474 	.word	0x08002474
 8000eac:	08002478 	.word	0x08002478

08000eb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e00a      	b.n	8000ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ec2:	f3af 8000 	nop.w
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	60ba      	str	r2, [r7, #8]
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbf0      	blt.n	8000ec2 <_read+0x12>
	}

return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_close>:
	}
	return len;
}

int _close(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f12:	605a      	str	r2, [r3, #4]
	return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_isatty>:

int _isatty(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x50>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x16>
		heap_end = &end;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <_sbrk+0x50>)
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <_sbrk+0x54>)
 8000f68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <_sbrk+0x50>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <_sbrk+0x50>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	466a      	mov	r2, sp
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d907      	bls.n	8000f8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f7e:	f000 f8d3 	bl	8001128 <__errno>
 8000f82:	4603      	mov	r3, r0
 8000f84:	220c      	movs	r2, #12
 8000f86:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	e006      	b.n	8000f9c <_sbrk+0x48>
	}

	heap_end += incr;
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <_sbrk+0x50>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <_sbrk+0x50>)
 8000f98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200001b0 	.word	0x200001b0
 8000fa8:	200001d0 	.word	0x200001d0

08000fac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <SystemInit+0x84>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <SystemInit+0x84>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <SystemInit+0x88>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <SystemInit+0x88>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <SystemInit+0x88>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	4918      	ldr	r1, [pc, #96]	; (8001034 <SystemInit+0x88>)
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <SystemInit+0x8c>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <SystemInit+0x88>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a15      	ldr	r2, [pc, #84]	; (8001034 <SystemInit+0x88>)
 8000fde:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <SystemInit+0x88>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a11      	ldr	r2, [pc, #68]	; (8001034 <SystemInit+0x88>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <SystemInit+0x88>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <SystemInit+0x88>)
 8000ffa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ffe:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <SystemInit+0x88>)
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <SystemInit+0x88>)
 8001006:	f023 030f 	bic.w	r3, r3, #15
 800100a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <SystemInit+0x88>)
 800100e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001010:	4908      	ldr	r1, [pc, #32]	; (8001034 <SystemInit+0x88>)
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <SystemInit+0x90>)
 8001014:	4013      	ands	r3, r2
 8001016:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x88>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800101e:	f000 f80f 	bl	8001040 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001022:	4b03      	ldr	r3, [pc, #12]	; (8001030 <SystemInit+0x84>)
 8001024:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001028:	609a      	str	r2, [r3, #8]
#endif  
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	40021000 	.word	0x40021000
 8001038:	f87fc00c 	.word	0xf87fc00c
 800103c:	ff00fccc 	.word	0xff00fccc

08001040 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <SetSysClock+0x8c>)
 8001046:	2212      	movs	r2, #18
 8001048:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <SetSysClock+0x90>)
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <SetSysClock+0x90>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <SetSysClock+0x90>)
 8001054:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <SetSysClock+0x90>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <SetSysClock+0x90>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <SetSysClock+0x90>)
 8001060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001064:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <SetSysClock+0x90>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <SetSysClock+0x90>)
 800106c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001070:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <SetSysClock+0x90>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <SetSysClock+0x90>)
 8001078:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 800107c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <SetSysClock+0x90>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <SetSysClock+0x90>)
 8001084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001088:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800108a:	bf00      	nop
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <SetSysClock+0x90>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f9      	beq.n	800108c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <SetSysClock+0x90>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <SetSysClock+0x90>)
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <SetSysClock+0x90>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <SetSysClock+0x90>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80010b0:	bf00      	nop
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <SetSysClock+0x90>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d1f9      	bne.n	80010b2 <SetSysClock+0x72>
  {
  }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40022000 	.word	0x40022000
 80010d0:	40021000 	.word	0x40021000

080010d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f0:	4c0b      	ldr	r4, [pc, #44]	; (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010fe:	f7ff ff55 	bl	8000fac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001102:	f000 f817 	bl	8001134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001106:	f7ff fe55 	bl	8000db4 <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   r0, =_estack
 800110c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001118:	08002920 	.word	0x08002920
  ldr r2, =_sbss
 800111c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001120:	200001cc 	.word	0x200001cc

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <__errno>:
 8001128:	4b01      	ldr	r3, [pc, #4]	; (8001130 <__errno+0x8>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000002c 	.word	0x2000002c

08001134 <__libc_init_array>:
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	4d0d      	ldr	r5, [pc, #52]	; (800116c <__libc_init_array+0x38>)
 8001138:	4c0d      	ldr	r4, [pc, #52]	; (8001170 <__libc_init_array+0x3c>)
 800113a:	1b64      	subs	r4, r4, r5
 800113c:	10a4      	asrs	r4, r4, #2
 800113e:	2600      	movs	r6, #0
 8001140:	42a6      	cmp	r6, r4
 8001142:	d109      	bne.n	8001158 <__libc_init_array+0x24>
 8001144:	4d0b      	ldr	r5, [pc, #44]	; (8001174 <__libc_init_array+0x40>)
 8001146:	4c0c      	ldr	r4, [pc, #48]	; (8001178 <__libc_init_array+0x44>)
 8001148:	f001 f90e 	bl	8002368 <_init>
 800114c:	1b64      	subs	r4, r4, r5
 800114e:	10a4      	asrs	r4, r4, #2
 8001150:	2600      	movs	r6, #0
 8001152:	42a6      	cmp	r6, r4
 8001154:	d105      	bne.n	8001162 <__libc_init_array+0x2e>
 8001156:	bd70      	pop	{r4, r5, r6, pc}
 8001158:	f855 3b04 	ldr.w	r3, [r5], #4
 800115c:	4798      	blx	r3
 800115e:	3601      	adds	r6, #1
 8001160:	e7ee      	b.n	8001140 <__libc_init_array+0xc>
 8001162:	f855 3b04 	ldr.w	r3, [r5], #4
 8001166:	4798      	blx	r3
 8001168:	3601      	adds	r6, #1
 800116a:	e7f2      	b.n	8001152 <__libc_init_array+0x1e>
 800116c:	08002918 	.word	0x08002918
 8001170:	08002918 	.word	0x08002918
 8001174:	08002918 	.word	0x08002918
 8001178:	0800291c 	.word	0x0800291c

0800117c <memset>:
 800117c:	4402      	add	r2, r0
 800117e:	4603      	mov	r3, r0
 8001180:	4293      	cmp	r3, r2
 8001182:	d100      	bne.n	8001186 <memset+0xa>
 8001184:	4770      	bx	lr
 8001186:	f803 1b01 	strb.w	r1, [r3], #1
 800118a:	e7f9      	b.n	8001180 <memset+0x4>

0800118c <iprintf>:
 800118c:	b40f      	push	{r0, r1, r2, r3}
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <iprintf+0x2c>)
 8001190:	b513      	push	{r0, r1, r4, lr}
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	b124      	cbz	r4, 80011a0 <iprintf+0x14>
 8001196:	69a3      	ldr	r3, [r4, #24]
 8001198:	b913      	cbnz	r3, 80011a0 <iprintf+0x14>
 800119a:	4620      	mov	r0, r4
 800119c:	f000 fb42 	bl	8001824 <__sinit>
 80011a0:	ab05      	add	r3, sp, #20
 80011a2:	9a04      	ldr	r2, [sp, #16]
 80011a4:	68a1      	ldr	r1, [r4, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	4620      	mov	r0, r4
 80011aa:	f000 fd1b 	bl	8001be4 <_vfiprintf_r>
 80011ae:	b002      	add	sp, #8
 80011b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr
 80011b8:	2000002c 	.word	0x2000002c

080011bc <putchar>:
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <putchar+0x28>)
 80011be:	b513      	push	{r0, r1, r4, lr}
 80011c0:	681c      	ldr	r4, [r3, #0]
 80011c2:	4601      	mov	r1, r0
 80011c4:	b134      	cbz	r4, 80011d4 <putchar+0x18>
 80011c6:	69a3      	ldr	r3, [r4, #24]
 80011c8:	b923      	cbnz	r3, 80011d4 <putchar+0x18>
 80011ca:	9001      	str	r0, [sp, #4]
 80011cc:	4620      	mov	r0, r4
 80011ce:	f000 fb29 	bl	8001824 <__sinit>
 80011d2:	9901      	ldr	r1, [sp, #4]
 80011d4:	68a2      	ldr	r2, [r4, #8]
 80011d6:	4620      	mov	r0, r4
 80011d8:	b002      	add	sp, #8
 80011da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011de:	f000 bfc5 	b.w	800216c <_putc_r>
 80011e2:	bf00      	nop
 80011e4:	2000002c 	.word	0x2000002c

080011e8 <_puts_r>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	460e      	mov	r6, r1
 80011ec:	4605      	mov	r5, r0
 80011ee:	b118      	cbz	r0, 80011f8 <_puts_r+0x10>
 80011f0:	6983      	ldr	r3, [r0, #24]
 80011f2:	b90b      	cbnz	r3, 80011f8 <_puts_r+0x10>
 80011f4:	f000 fb16 	bl	8001824 <__sinit>
 80011f8:	69ab      	ldr	r3, [r5, #24]
 80011fa:	68ac      	ldr	r4, [r5, #8]
 80011fc:	b913      	cbnz	r3, 8001204 <_puts_r+0x1c>
 80011fe:	4628      	mov	r0, r5
 8001200:	f000 fb10 	bl	8001824 <__sinit>
 8001204:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <_puts_r+0xd0>)
 8001206:	429c      	cmp	r4, r3
 8001208:	d120      	bne.n	800124c <_puts_r+0x64>
 800120a:	686c      	ldr	r4, [r5, #4]
 800120c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800120e:	07db      	lsls	r3, r3, #31
 8001210:	d405      	bmi.n	800121e <_puts_r+0x36>
 8001212:	89a3      	ldrh	r3, [r4, #12]
 8001214:	0598      	lsls	r0, r3, #22
 8001216:	d402      	bmi.n	800121e <_puts_r+0x36>
 8001218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800121a:	f000 fba1 	bl	8001960 <__retarget_lock_acquire_recursive>
 800121e:	89a3      	ldrh	r3, [r4, #12]
 8001220:	0719      	lsls	r1, r3, #28
 8001222:	d51d      	bpl.n	8001260 <_puts_r+0x78>
 8001224:	6923      	ldr	r3, [r4, #16]
 8001226:	b1db      	cbz	r3, 8001260 <_puts_r+0x78>
 8001228:	3e01      	subs	r6, #1
 800122a:	68a3      	ldr	r3, [r4, #8]
 800122c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001230:	3b01      	subs	r3, #1
 8001232:	60a3      	str	r3, [r4, #8]
 8001234:	bb39      	cbnz	r1, 8001286 <_puts_r+0x9e>
 8001236:	2b00      	cmp	r3, #0
 8001238:	da38      	bge.n	80012ac <_puts_r+0xc4>
 800123a:	4622      	mov	r2, r4
 800123c:	210a      	movs	r1, #10
 800123e:	4628      	mov	r0, r5
 8001240:	f000 f916 	bl	8001470 <__swbuf_r>
 8001244:	3001      	adds	r0, #1
 8001246:	d011      	beq.n	800126c <_puts_r+0x84>
 8001248:	250a      	movs	r5, #10
 800124a:	e011      	b.n	8001270 <_puts_r+0x88>
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <_puts_r+0xd4>)
 800124e:	429c      	cmp	r4, r3
 8001250:	d101      	bne.n	8001256 <_puts_r+0x6e>
 8001252:	68ac      	ldr	r4, [r5, #8]
 8001254:	e7da      	b.n	800120c <_puts_r+0x24>
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <_puts_r+0xd8>)
 8001258:	429c      	cmp	r4, r3
 800125a:	bf08      	it	eq
 800125c:	68ec      	ldreq	r4, [r5, #12]
 800125e:	e7d5      	b.n	800120c <_puts_r+0x24>
 8001260:	4621      	mov	r1, r4
 8001262:	4628      	mov	r0, r5
 8001264:	f000 f956 	bl	8001514 <__swsetup_r>
 8001268:	2800      	cmp	r0, #0
 800126a:	d0dd      	beq.n	8001228 <_puts_r+0x40>
 800126c:	f04f 35ff 	mov.w	r5, #4294967295
 8001270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001272:	07da      	lsls	r2, r3, #31
 8001274:	d405      	bmi.n	8001282 <_puts_r+0x9a>
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	059b      	lsls	r3, r3, #22
 800127a:	d402      	bmi.n	8001282 <_puts_r+0x9a>
 800127c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800127e:	f000 fb70 	bl	8001962 <__retarget_lock_release_recursive>
 8001282:	4628      	mov	r0, r5
 8001284:	bd70      	pop	{r4, r5, r6, pc}
 8001286:	2b00      	cmp	r3, #0
 8001288:	da04      	bge.n	8001294 <_puts_r+0xac>
 800128a:	69a2      	ldr	r2, [r4, #24]
 800128c:	429a      	cmp	r2, r3
 800128e:	dc06      	bgt.n	800129e <_puts_r+0xb6>
 8001290:	290a      	cmp	r1, #10
 8001292:	d004      	beq.n	800129e <_puts_r+0xb6>
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	6022      	str	r2, [r4, #0]
 800129a:	7019      	strb	r1, [r3, #0]
 800129c:	e7c5      	b.n	800122a <_puts_r+0x42>
 800129e:	4622      	mov	r2, r4
 80012a0:	4628      	mov	r0, r5
 80012a2:	f000 f8e5 	bl	8001470 <__swbuf_r>
 80012a6:	3001      	adds	r0, #1
 80012a8:	d1bf      	bne.n	800122a <_puts_r+0x42>
 80012aa:	e7df      	b.n	800126c <_puts_r+0x84>
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	250a      	movs	r5, #10
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	6022      	str	r2, [r4, #0]
 80012b4:	701d      	strb	r5, [r3, #0]
 80012b6:	e7db      	b.n	8001270 <_puts_r+0x88>
 80012b8:	080028a4 	.word	0x080028a4
 80012bc:	080028c4 	.word	0x080028c4
 80012c0:	08002884 	.word	0x08002884

080012c4 <puts>:
 80012c4:	4b02      	ldr	r3, [pc, #8]	; (80012d0 <puts+0xc>)
 80012c6:	4601      	mov	r1, r0
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	f7ff bf8d 	b.w	80011e8 <_puts_r>
 80012ce:	bf00      	nop
 80012d0:	2000002c 	.word	0x2000002c

080012d4 <setbuf>:
 80012d4:	2900      	cmp	r1, #0
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	bf0c      	ite	eq
 80012dc:	2202      	moveq	r2, #2
 80012de:	2200      	movne	r2, #0
 80012e0:	f000 b800 	b.w	80012e4 <setvbuf>

080012e4 <setvbuf>:
 80012e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80012e8:	461d      	mov	r5, r3
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <setvbuf+0x17c>)
 80012ec:	681f      	ldr	r7, [r3, #0]
 80012ee:	4604      	mov	r4, r0
 80012f0:	460e      	mov	r6, r1
 80012f2:	4690      	mov	r8, r2
 80012f4:	b127      	cbz	r7, 8001300 <setvbuf+0x1c>
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	b913      	cbnz	r3, 8001300 <setvbuf+0x1c>
 80012fa:	4638      	mov	r0, r7
 80012fc:	f000 fa92 	bl	8001824 <__sinit>
 8001300:	4b58      	ldr	r3, [pc, #352]	; (8001464 <setvbuf+0x180>)
 8001302:	429c      	cmp	r4, r3
 8001304:	d167      	bne.n	80013d6 <setvbuf+0xf2>
 8001306:	687c      	ldr	r4, [r7, #4]
 8001308:	f1b8 0f02 	cmp.w	r8, #2
 800130c:	d006      	beq.n	800131c <setvbuf+0x38>
 800130e:	f1b8 0f01 	cmp.w	r8, #1
 8001312:	f200 809f 	bhi.w	8001454 <setvbuf+0x170>
 8001316:	2d00      	cmp	r5, #0
 8001318:	f2c0 809c 	blt.w	8001454 <setvbuf+0x170>
 800131c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800131e:	07db      	lsls	r3, r3, #31
 8001320:	d405      	bmi.n	800132e <setvbuf+0x4a>
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	0598      	lsls	r0, r3, #22
 8001326:	d402      	bmi.n	800132e <setvbuf+0x4a>
 8001328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800132a:	f000 fb19 	bl	8001960 <__retarget_lock_acquire_recursive>
 800132e:	4621      	mov	r1, r4
 8001330:	4638      	mov	r0, r7
 8001332:	f000 f9e3 	bl	80016fc <_fflush_r>
 8001336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001338:	b141      	cbz	r1, 800134c <setvbuf+0x68>
 800133a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800133e:	4299      	cmp	r1, r3
 8001340:	d002      	beq.n	8001348 <setvbuf+0x64>
 8001342:	4638      	mov	r0, r7
 8001344:	f000 fb7a 	bl	8001a3c <_free_r>
 8001348:	2300      	movs	r3, #0
 800134a:	6363      	str	r3, [r4, #52]	; 0x34
 800134c:	2300      	movs	r3, #0
 800134e:	61a3      	str	r3, [r4, #24]
 8001350:	6063      	str	r3, [r4, #4]
 8001352:	89a3      	ldrh	r3, [r4, #12]
 8001354:	0619      	lsls	r1, r3, #24
 8001356:	d503      	bpl.n	8001360 <setvbuf+0x7c>
 8001358:	6921      	ldr	r1, [r4, #16]
 800135a:	4638      	mov	r0, r7
 800135c:	f000 fb6e 	bl	8001a3c <_free_r>
 8001360:	89a3      	ldrh	r3, [r4, #12]
 8001362:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	f1b8 0f02 	cmp.w	r8, #2
 800136e:	81a3      	strh	r3, [r4, #12]
 8001370:	d06c      	beq.n	800144c <setvbuf+0x168>
 8001372:	ab01      	add	r3, sp, #4
 8001374:	466a      	mov	r2, sp
 8001376:	4621      	mov	r1, r4
 8001378:	4638      	mov	r0, r7
 800137a:	f000 faf3 	bl	8001964 <__swhatbuf_r>
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	4318      	orrs	r0, r3
 8001382:	81a0      	strh	r0, [r4, #12]
 8001384:	2d00      	cmp	r5, #0
 8001386:	d130      	bne.n	80013ea <setvbuf+0x106>
 8001388:	9d00      	ldr	r5, [sp, #0]
 800138a:	4628      	mov	r0, r5
 800138c:	f000 fb4e 	bl	8001a2c <malloc>
 8001390:	4606      	mov	r6, r0
 8001392:	2800      	cmp	r0, #0
 8001394:	d155      	bne.n	8001442 <setvbuf+0x15e>
 8001396:	f8dd 9000 	ldr.w	r9, [sp]
 800139a:	45a9      	cmp	r9, r5
 800139c:	d14a      	bne.n	8001434 <setvbuf+0x150>
 800139e:	f04f 35ff 	mov.w	r5, #4294967295
 80013a2:	2200      	movs	r2, #0
 80013a4:	60a2      	str	r2, [r4, #8]
 80013a6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80013aa:	6022      	str	r2, [r4, #0]
 80013ac:	6122      	str	r2, [r4, #16]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013b4:	6162      	str	r2, [r4, #20]
 80013b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	07d2      	lsls	r2, r2, #31
 80013be:	81a3      	strh	r3, [r4, #12]
 80013c0:	d405      	bmi.n	80013ce <setvbuf+0xea>
 80013c2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80013c6:	d102      	bne.n	80013ce <setvbuf+0xea>
 80013c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ca:	f000 faca 	bl	8001962 <__retarget_lock_release_recursive>
 80013ce:	4628      	mov	r0, r5
 80013d0:	b003      	add	sp, #12
 80013d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <setvbuf+0x184>)
 80013d8:	429c      	cmp	r4, r3
 80013da:	d101      	bne.n	80013e0 <setvbuf+0xfc>
 80013dc:	68bc      	ldr	r4, [r7, #8]
 80013de:	e793      	b.n	8001308 <setvbuf+0x24>
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <setvbuf+0x188>)
 80013e2:	429c      	cmp	r4, r3
 80013e4:	bf08      	it	eq
 80013e6:	68fc      	ldreq	r4, [r7, #12]
 80013e8:	e78e      	b.n	8001308 <setvbuf+0x24>
 80013ea:	2e00      	cmp	r6, #0
 80013ec:	d0cd      	beq.n	800138a <setvbuf+0xa6>
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	b913      	cbnz	r3, 80013f8 <setvbuf+0x114>
 80013f2:	4638      	mov	r0, r7
 80013f4:	f000 fa16 	bl	8001824 <__sinit>
 80013f8:	f1b8 0f01 	cmp.w	r8, #1
 80013fc:	bf08      	it	eq
 80013fe:	89a3      	ldrheq	r3, [r4, #12]
 8001400:	6026      	str	r6, [r4, #0]
 8001402:	bf04      	itt	eq
 8001404:	f043 0301 	orreq.w	r3, r3, #1
 8001408:	81a3      	strheq	r3, [r4, #12]
 800140a:	89a2      	ldrh	r2, [r4, #12]
 800140c:	f012 0308 	ands.w	r3, r2, #8
 8001410:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001414:	d01c      	beq.n	8001450 <setvbuf+0x16c>
 8001416:	07d3      	lsls	r3, r2, #31
 8001418:	bf41      	itttt	mi
 800141a:	2300      	movmi	r3, #0
 800141c:	426d      	negmi	r5, r5
 800141e:	60a3      	strmi	r3, [r4, #8]
 8001420:	61a5      	strmi	r5, [r4, #24]
 8001422:	bf58      	it	pl
 8001424:	60a5      	strpl	r5, [r4, #8]
 8001426:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001428:	f015 0501 	ands.w	r5, r5, #1
 800142c:	d115      	bne.n	800145a <setvbuf+0x176>
 800142e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001432:	e7c8      	b.n	80013c6 <setvbuf+0xe2>
 8001434:	4648      	mov	r0, r9
 8001436:	f000 faf9 	bl	8001a2c <malloc>
 800143a:	4606      	mov	r6, r0
 800143c:	2800      	cmp	r0, #0
 800143e:	d0ae      	beq.n	800139e <setvbuf+0xba>
 8001440:	464d      	mov	r5, r9
 8001442:	89a3      	ldrh	r3, [r4, #12]
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	81a3      	strh	r3, [r4, #12]
 800144a:	e7d0      	b.n	80013ee <setvbuf+0x10a>
 800144c:	2500      	movs	r5, #0
 800144e:	e7a8      	b.n	80013a2 <setvbuf+0xbe>
 8001450:	60a3      	str	r3, [r4, #8]
 8001452:	e7e8      	b.n	8001426 <setvbuf+0x142>
 8001454:	f04f 35ff 	mov.w	r5, #4294967295
 8001458:	e7b9      	b.n	80013ce <setvbuf+0xea>
 800145a:	2500      	movs	r5, #0
 800145c:	e7b7      	b.n	80013ce <setvbuf+0xea>
 800145e:	bf00      	nop
 8001460:	2000002c 	.word	0x2000002c
 8001464:	080028a4 	.word	0x080028a4
 8001468:	080028c4 	.word	0x080028c4
 800146c:	08002884 	.word	0x08002884

08001470 <__swbuf_r>:
 8001470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001472:	460e      	mov	r6, r1
 8001474:	4614      	mov	r4, r2
 8001476:	4605      	mov	r5, r0
 8001478:	b118      	cbz	r0, 8001482 <__swbuf_r+0x12>
 800147a:	6983      	ldr	r3, [r0, #24]
 800147c:	b90b      	cbnz	r3, 8001482 <__swbuf_r+0x12>
 800147e:	f000 f9d1 	bl	8001824 <__sinit>
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <__swbuf_r+0x98>)
 8001484:	429c      	cmp	r4, r3
 8001486:	d12b      	bne.n	80014e0 <__swbuf_r+0x70>
 8001488:	686c      	ldr	r4, [r5, #4]
 800148a:	69a3      	ldr	r3, [r4, #24]
 800148c:	60a3      	str	r3, [r4, #8]
 800148e:	89a3      	ldrh	r3, [r4, #12]
 8001490:	071a      	lsls	r2, r3, #28
 8001492:	d52f      	bpl.n	80014f4 <__swbuf_r+0x84>
 8001494:	6923      	ldr	r3, [r4, #16]
 8001496:	b36b      	cbz	r3, 80014f4 <__swbuf_r+0x84>
 8001498:	6923      	ldr	r3, [r4, #16]
 800149a:	6820      	ldr	r0, [r4, #0]
 800149c:	1ac0      	subs	r0, r0, r3
 800149e:	6963      	ldr	r3, [r4, #20]
 80014a0:	b2f6      	uxtb	r6, r6
 80014a2:	4283      	cmp	r3, r0
 80014a4:	4637      	mov	r7, r6
 80014a6:	dc04      	bgt.n	80014b2 <__swbuf_r+0x42>
 80014a8:	4621      	mov	r1, r4
 80014aa:	4628      	mov	r0, r5
 80014ac:	f000 f926 	bl	80016fc <_fflush_r>
 80014b0:	bb30      	cbnz	r0, 8001500 <__swbuf_r+0x90>
 80014b2:	68a3      	ldr	r3, [r4, #8]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60a3      	str	r3, [r4, #8]
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	6022      	str	r2, [r4, #0]
 80014be:	701e      	strb	r6, [r3, #0]
 80014c0:	6963      	ldr	r3, [r4, #20]
 80014c2:	3001      	adds	r0, #1
 80014c4:	4283      	cmp	r3, r0
 80014c6:	d004      	beq.n	80014d2 <__swbuf_r+0x62>
 80014c8:	89a3      	ldrh	r3, [r4, #12]
 80014ca:	07db      	lsls	r3, r3, #31
 80014cc:	d506      	bpl.n	80014dc <__swbuf_r+0x6c>
 80014ce:	2e0a      	cmp	r6, #10
 80014d0:	d104      	bne.n	80014dc <__swbuf_r+0x6c>
 80014d2:	4621      	mov	r1, r4
 80014d4:	4628      	mov	r0, r5
 80014d6:	f000 f911 	bl	80016fc <_fflush_r>
 80014da:	b988      	cbnz	r0, 8001500 <__swbuf_r+0x90>
 80014dc:	4638      	mov	r0, r7
 80014de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <__swbuf_r+0x9c>)
 80014e2:	429c      	cmp	r4, r3
 80014e4:	d101      	bne.n	80014ea <__swbuf_r+0x7a>
 80014e6:	68ac      	ldr	r4, [r5, #8]
 80014e8:	e7cf      	b.n	800148a <__swbuf_r+0x1a>
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <__swbuf_r+0xa0>)
 80014ec:	429c      	cmp	r4, r3
 80014ee:	bf08      	it	eq
 80014f0:	68ec      	ldreq	r4, [r5, #12]
 80014f2:	e7ca      	b.n	800148a <__swbuf_r+0x1a>
 80014f4:	4621      	mov	r1, r4
 80014f6:	4628      	mov	r0, r5
 80014f8:	f000 f80c 	bl	8001514 <__swsetup_r>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d0cb      	beq.n	8001498 <__swbuf_r+0x28>
 8001500:	f04f 37ff 	mov.w	r7, #4294967295
 8001504:	e7ea      	b.n	80014dc <__swbuf_r+0x6c>
 8001506:	bf00      	nop
 8001508:	080028a4 	.word	0x080028a4
 800150c:	080028c4 	.word	0x080028c4
 8001510:	08002884 	.word	0x08002884

08001514 <__swsetup_r>:
 8001514:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <__swsetup_r+0xcc>)
 8001516:	b570      	push	{r4, r5, r6, lr}
 8001518:	681d      	ldr	r5, [r3, #0]
 800151a:	4606      	mov	r6, r0
 800151c:	460c      	mov	r4, r1
 800151e:	b125      	cbz	r5, 800152a <__swsetup_r+0x16>
 8001520:	69ab      	ldr	r3, [r5, #24]
 8001522:	b913      	cbnz	r3, 800152a <__swsetup_r+0x16>
 8001524:	4628      	mov	r0, r5
 8001526:	f000 f97d 	bl	8001824 <__sinit>
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <__swsetup_r+0xd0>)
 800152c:	429c      	cmp	r4, r3
 800152e:	d10f      	bne.n	8001550 <__swsetup_r+0x3c>
 8001530:	686c      	ldr	r4, [r5, #4]
 8001532:	89a3      	ldrh	r3, [r4, #12]
 8001534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001538:	0719      	lsls	r1, r3, #28
 800153a:	d42c      	bmi.n	8001596 <__swsetup_r+0x82>
 800153c:	06dd      	lsls	r5, r3, #27
 800153e:	d411      	bmi.n	8001564 <__swsetup_r+0x50>
 8001540:	2309      	movs	r3, #9
 8001542:	6033      	str	r3, [r6, #0]
 8001544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001548:	81a3      	strh	r3, [r4, #12]
 800154a:	f04f 30ff 	mov.w	r0, #4294967295
 800154e:	e03e      	b.n	80015ce <__swsetup_r+0xba>
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <__swsetup_r+0xd4>)
 8001552:	429c      	cmp	r4, r3
 8001554:	d101      	bne.n	800155a <__swsetup_r+0x46>
 8001556:	68ac      	ldr	r4, [r5, #8]
 8001558:	e7eb      	b.n	8001532 <__swsetup_r+0x1e>
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <__swsetup_r+0xd8>)
 800155c:	429c      	cmp	r4, r3
 800155e:	bf08      	it	eq
 8001560:	68ec      	ldreq	r4, [r5, #12]
 8001562:	e7e6      	b.n	8001532 <__swsetup_r+0x1e>
 8001564:	0758      	lsls	r0, r3, #29
 8001566:	d512      	bpl.n	800158e <__swsetup_r+0x7a>
 8001568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800156a:	b141      	cbz	r1, 800157e <__swsetup_r+0x6a>
 800156c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001570:	4299      	cmp	r1, r3
 8001572:	d002      	beq.n	800157a <__swsetup_r+0x66>
 8001574:	4630      	mov	r0, r6
 8001576:	f000 fa61 	bl	8001a3c <_free_r>
 800157a:	2300      	movs	r3, #0
 800157c:	6363      	str	r3, [r4, #52]	; 0x34
 800157e:	89a3      	ldrh	r3, [r4, #12]
 8001580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001584:	81a3      	strh	r3, [r4, #12]
 8001586:	2300      	movs	r3, #0
 8001588:	6063      	str	r3, [r4, #4]
 800158a:	6923      	ldr	r3, [r4, #16]
 800158c:	6023      	str	r3, [r4, #0]
 800158e:	89a3      	ldrh	r3, [r4, #12]
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	81a3      	strh	r3, [r4, #12]
 8001596:	6923      	ldr	r3, [r4, #16]
 8001598:	b94b      	cbnz	r3, 80015ae <__swsetup_r+0x9a>
 800159a:	89a3      	ldrh	r3, [r4, #12]
 800159c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d003      	beq.n	80015ae <__swsetup_r+0x9a>
 80015a6:	4621      	mov	r1, r4
 80015a8:	4630      	mov	r0, r6
 80015aa:	f000 f9ff 	bl	80019ac <__smakebuf_r>
 80015ae:	89a0      	ldrh	r0, [r4, #12]
 80015b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015b4:	f010 0301 	ands.w	r3, r0, #1
 80015b8:	d00a      	beq.n	80015d0 <__swsetup_r+0xbc>
 80015ba:	2300      	movs	r3, #0
 80015bc:	60a3      	str	r3, [r4, #8]
 80015be:	6963      	ldr	r3, [r4, #20]
 80015c0:	425b      	negs	r3, r3
 80015c2:	61a3      	str	r3, [r4, #24]
 80015c4:	6923      	ldr	r3, [r4, #16]
 80015c6:	b943      	cbnz	r3, 80015da <__swsetup_r+0xc6>
 80015c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80015cc:	d1ba      	bne.n	8001544 <__swsetup_r+0x30>
 80015ce:	bd70      	pop	{r4, r5, r6, pc}
 80015d0:	0781      	lsls	r1, r0, #30
 80015d2:	bf58      	it	pl
 80015d4:	6963      	ldrpl	r3, [r4, #20]
 80015d6:	60a3      	str	r3, [r4, #8]
 80015d8:	e7f4      	b.n	80015c4 <__swsetup_r+0xb0>
 80015da:	2000      	movs	r0, #0
 80015dc:	e7f7      	b.n	80015ce <__swsetup_r+0xba>
 80015de:	bf00      	nop
 80015e0:	2000002c 	.word	0x2000002c
 80015e4:	080028a4 	.word	0x080028a4
 80015e8:	080028c4 	.word	0x080028c4
 80015ec:	08002884 	.word	0x08002884

080015f0 <__sflush_r>:
 80015f0:	898a      	ldrh	r2, [r1, #12]
 80015f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015f6:	4605      	mov	r5, r0
 80015f8:	0710      	lsls	r0, r2, #28
 80015fa:	460c      	mov	r4, r1
 80015fc:	d458      	bmi.n	80016b0 <__sflush_r+0xc0>
 80015fe:	684b      	ldr	r3, [r1, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	dc05      	bgt.n	8001610 <__sflush_r+0x20>
 8001604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	dc02      	bgt.n	8001610 <__sflush_r+0x20>
 800160a:	2000      	movs	r0, #0
 800160c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001612:	2e00      	cmp	r6, #0
 8001614:	d0f9      	beq.n	800160a <__sflush_r+0x1a>
 8001616:	2300      	movs	r3, #0
 8001618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800161c:	682f      	ldr	r7, [r5, #0]
 800161e:	602b      	str	r3, [r5, #0]
 8001620:	d032      	beq.n	8001688 <__sflush_r+0x98>
 8001622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001624:	89a3      	ldrh	r3, [r4, #12]
 8001626:	075a      	lsls	r2, r3, #29
 8001628:	d505      	bpl.n	8001636 <__sflush_r+0x46>
 800162a:	6863      	ldr	r3, [r4, #4]
 800162c:	1ac0      	subs	r0, r0, r3
 800162e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001630:	b10b      	cbz	r3, 8001636 <__sflush_r+0x46>
 8001632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001634:	1ac0      	subs	r0, r0, r3
 8001636:	2300      	movs	r3, #0
 8001638:	4602      	mov	r2, r0
 800163a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800163c:	6a21      	ldr	r1, [r4, #32]
 800163e:	4628      	mov	r0, r5
 8001640:	47b0      	blx	r6
 8001642:	1c43      	adds	r3, r0, #1
 8001644:	89a3      	ldrh	r3, [r4, #12]
 8001646:	d106      	bne.n	8001656 <__sflush_r+0x66>
 8001648:	6829      	ldr	r1, [r5, #0]
 800164a:	291d      	cmp	r1, #29
 800164c:	d82c      	bhi.n	80016a8 <__sflush_r+0xb8>
 800164e:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <__sflush_r+0x108>)
 8001650:	40ca      	lsrs	r2, r1
 8001652:	07d6      	lsls	r6, r2, #31
 8001654:	d528      	bpl.n	80016a8 <__sflush_r+0xb8>
 8001656:	2200      	movs	r2, #0
 8001658:	6062      	str	r2, [r4, #4]
 800165a:	04d9      	lsls	r1, r3, #19
 800165c:	6922      	ldr	r2, [r4, #16]
 800165e:	6022      	str	r2, [r4, #0]
 8001660:	d504      	bpl.n	800166c <__sflush_r+0x7c>
 8001662:	1c42      	adds	r2, r0, #1
 8001664:	d101      	bne.n	800166a <__sflush_r+0x7a>
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	b903      	cbnz	r3, 800166c <__sflush_r+0x7c>
 800166a:	6560      	str	r0, [r4, #84]	; 0x54
 800166c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800166e:	602f      	str	r7, [r5, #0]
 8001670:	2900      	cmp	r1, #0
 8001672:	d0ca      	beq.n	800160a <__sflush_r+0x1a>
 8001674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001678:	4299      	cmp	r1, r3
 800167a:	d002      	beq.n	8001682 <__sflush_r+0x92>
 800167c:	4628      	mov	r0, r5
 800167e:	f000 f9dd 	bl	8001a3c <_free_r>
 8001682:	2000      	movs	r0, #0
 8001684:	6360      	str	r0, [r4, #52]	; 0x34
 8001686:	e7c1      	b.n	800160c <__sflush_r+0x1c>
 8001688:	6a21      	ldr	r1, [r4, #32]
 800168a:	2301      	movs	r3, #1
 800168c:	4628      	mov	r0, r5
 800168e:	47b0      	blx	r6
 8001690:	1c41      	adds	r1, r0, #1
 8001692:	d1c7      	bne.n	8001624 <__sflush_r+0x34>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0c4      	beq.n	8001624 <__sflush_r+0x34>
 800169a:	2b1d      	cmp	r3, #29
 800169c:	d001      	beq.n	80016a2 <__sflush_r+0xb2>
 800169e:	2b16      	cmp	r3, #22
 80016a0:	d101      	bne.n	80016a6 <__sflush_r+0xb6>
 80016a2:	602f      	str	r7, [r5, #0]
 80016a4:	e7b1      	b.n	800160a <__sflush_r+0x1a>
 80016a6:	89a3      	ldrh	r3, [r4, #12]
 80016a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ac:	81a3      	strh	r3, [r4, #12]
 80016ae:	e7ad      	b.n	800160c <__sflush_r+0x1c>
 80016b0:	690f      	ldr	r7, [r1, #16]
 80016b2:	2f00      	cmp	r7, #0
 80016b4:	d0a9      	beq.n	800160a <__sflush_r+0x1a>
 80016b6:	0793      	lsls	r3, r2, #30
 80016b8:	680e      	ldr	r6, [r1, #0]
 80016ba:	bf08      	it	eq
 80016bc:	694b      	ldreq	r3, [r1, #20]
 80016be:	600f      	str	r7, [r1, #0]
 80016c0:	bf18      	it	ne
 80016c2:	2300      	movne	r3, #0
 80016c4:	eba6 0807 	sub.w	r8, r6, r7
 80016c8:	608b      	str	r3, [r1, #8]
 80016ca:	f1b8 0f00 	cmp.w	r8, #0
 80016ce:	dd9c      	ble.n	800160a <__sflush_r+0x1a>
 80016d0:	6a21      	ldr	r1, [r4, #32]
 80016d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80016d4:	4643      	mov	r3, r8
 80016d6:	463a      	mov	r2, r7
 80016d8:	4628      	mov	r0, r5
 80016da:	47b0      	blx	r6
 80016dc:	2800      	cmp	r0, #0
 80016de:	dc06      	bgt.n	80016ee <__sflush_r+0xfe>
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e6:	81a3      	strh	r3, [r4, #12]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	e78e      	b.n	800160c <__sflush_r+0x1c>
 80016ee:	4407      	add	r7, r0
 80016f0:	eba8 0800 	sub.w	r8, r8, r0
 80016f4:	e7e9      	b.n	80016ca <__sflush_r+0xda>
 80016f6:	bf00      	nop
 80016f8:	20400001 	.word	0x20400001

080016fc <_fflush_r>:
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	690b      	ldr	r3, [r1, #16]
 8001700:	4605      	mov	r5, r0
 8001702:	460c      	mov	r4, r1
 8001704:	b913      	cbnz	r3, 800170c <_fflush_r+0x10>
 8001706:	2500      	movs	r5, #0
 8001708:	4628      	mov	r0, r5
 800170a:	bd38      	pop	{r3, r4, r5, pc}
 800170c:	b118      	cbz	r0, 8001716 <_fflush_r+0x1a>
 800170e:	6983      	ldr	r3, [r0, #24]
 8001710:	b90b      	cbnz	r3, 8001716 <_fflush_r+0x1a>
 8001712:	f000 f887 	bl	8001824 <__sinit>
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <_fflush_r+0x6c>)
 8001718:	429c      	cmp	r4, r3
 800171a:	d11b      	bne.n	8001754 <_fflush_r+0x58>
 800171c:	686c      	ldr	r4, [r5, #4]
 800171e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ef      	beq.n	8001706 <_fflush_r+0xa>
 8001726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001728:	07d0      	lsls	r0, r2, #31
 800172a:	d404      	bmi.n	8001736 <_fflush_r+0x3a>
 800172c:	0599      	lsls	r1, r3, #22
 800172e:	d402      	bmi.n	8001736 <_fflush_r+0x3a>
 8001730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001732:	f000 f915 	bl	8001960 <__retarget_lock_acquire_recursive>
 8001736:	4628      	mov	r0, r5
 8001738:	4621      	mov	r1, r4
 800173a:	f7ff ff59 	bl	80015f0 <__sflush_r>
 800173e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001740:	07da      	lsls	r2, r3, #31
 8001742:	4605      	mov	r5, r0
 8001744:	d4e0      	bmi.n	8001708 <_fflush_r+0xc>
 8001746:	89a3      	ldrh	r3, [r4, #12]
 8001748:	059b      	lsls	r3, r3, #22
 800174a:	d4dd      	bmi.n	8001708 <_fflush_r+0xc>
 800174c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800174e:	f000 f908 	bl	8001962 <__retarget_lock_release_recursive>
 8001752:	e7d9      	b.n	8001708 <_fflush_r+0xc>
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <_fflush_r+0x70>)
 8001756:	429c      	cmp	r4, r3
 8001758:	d101      	bne.n	800175e <_fflush_r+0x62>
 800175a:	68ac      	ldr	r4, [r5, #8]
 800175c:	e7df      	b.n	800171e <_fflush_r+0x22>
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <_fflush_r+0x74>)
 8001760:	429c      	cmp	r4, r3
 8001762:	bf08      	it	eq
 8001764:	68ec      	ldreq	r4, [r5, #12]
 8001766:	e7da      	b.n	800171e <_fflush_r+0x22>
 8001768:	080028a4 	.word	0x080028a4
 800176c:	080028c4 	.word	0x080028c4
 8001770:	08002884 	.word	0x08002884

08001774 <std>:
 8001774:	2300      	movs	r3, #0
 8001776:	b510      	push	{r4, lr}
 8001778:	4604      	mov	r4, r0
 800177a:	e9c0 3300 	strd	r3, r3, [r0]
 800177e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001782:	6083      	str	r3, [r0, #8]
 8001784:	8181      	strh	r1, [r0, #12]
 8001786:	6643      	str	r3, [r0, #100]	; 0x64
 8001788:	81c2      	strh	r2, [r0, #14]
 800178a:	6183      	str	r3, [r0, #24]
 800178c:	4619      	mov	r1, r3
 800178e:	2208      	movs	r2, #8
 8001790:	305c      	adds	r0, #92	; 0x5c
 8001792:	f7ff fcf3 	bl	800117c <memset>
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <std+0x38>)
 8001798:	6263      	str	r3, [r4, #36]	; 0x24
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <std+0x3c>)
 800179c:	62a3      	str	r3, [r4, #40]	; 0x28
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <std+0x40>)
 80017a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <std+0x44>)
 80017a4:	6224      	str	r4, [r4, #32]
 80017a6:	6323      	str	r3, [r4, #48]	; 0x30
 80017a8:	bd10      	pop	{r4, pc}
 80017aa:	bf00      	nop
 80017ac:	0800221d 	.word	0x0800221d
 80017b0:	0800223f 	.word	0x0800223f
 80017b4:	08002277 	.word	0x08002277
 80017b8:	0800229b 	.word	0x0800229b

080017bc <_cleanup_r>:
 80017bc:	4901      	ldr	r1, [pc, #4]	; (80017c4 <_cleanup_r+0x8>)
 80017be:	f000 b8af 	b.w	8001920 <_fwalk_reent>
 80017c2:	bf00      	nop
 80017c4:	080016fd 	.word	0x080016fd

080017c8 <__sfmoreglue>:
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	1e4a      	subs	r2, r1, #1
 80017cc:	2568      	movs	r5, #104	; 0x68
 80017ce:	4355      	muls	r5, r2
 80017d0:	460e      	mov	r6, r1
 80017d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80017d6:	f000 f981 	bl	8001adc <_malloc_r>
 80017da:	4604      	mov	r4, r0
 80017dc:	b140      	cbz	r0, 80017f0 <__sfmoreglue+0x28>
 80017de:	2100      	movs	r1, #0
 80017e0:	e9c0 1600 	strd	r1, r6, [r0]
 80017e4:	300c      	adds	r0, #12
 80017e6:	60a0      	str	r0, [r4, #8]
 80017e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017ec:	f7ff fcc6 	bl	800117c <memset>
 80017f0:	4620      	mov	r0, r4
 80017f2:	bd70      	pop	{r4, r5, r6, pc}

080017f4 <__sfp_lock_acquire>:
 80017f4:	4801      	ldr	r0, [pc, #4]	; (80017fc <__sfp_lock_acquire+0x8>)
 80017f6:	f000 b8b3 	b.w	8001960 <__retarget_lock_acquire_recursive>
 80017fa:	bf00      	nop
 80017fc:	200001c4 	.word	0x200001c4

08001800 <__sfp_lock_release>:
 8001800:	4801      	ldr	r0, [pc, #4]	; (8001808 <__sfp_lock_release+0x8>)
 8001802:	f000 b8ae 	b.w	8001962 <__retarget_lock_release_recursive>
 8001806:	bf00      	nop
 8001808:	200001c4 	.word	0x200001c4

0800180c <__sinit_lock_acquire>:
 800180c:	4801      	ldr	r0, [pc, #4]	; (8001814 <__sinit_lock_acquire+0x8>)
 800180e:	f000 b8a7 	b.w	8001960 <__retarget_lock_acquire_recursive>
 8001812:	bf00      	nop
 8001814:	200001bf 	.word	0x200001bf

08001818 <__sinit_lock_release>:
 8001818:	4801      	ldr	r0, [pc, #4]	; (8001820 <__sinit_lock_release+0x8>)
 800181a:	f000 b8a2 	b.w	8001962 <__retarget_lock_release_recursive>
 800181e:	bf00      	nop
 8001820:	200001bf 	.word	0x200001bf

08001824 <__sinit>:
 8001824:	b510      	push	{r4, lr}
 8001826:	4604      	mov	r4, r0
 8001828:	f7ff fff0 	bl	800180c <__sinit_lock_acquire>
 800182c:	69a3      	ldr	r3, [r4, #24]
 800182e:	b11b      	cbz	r3, 8001838 <__sinit+0x14>
 8001830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001834:	f7ff bff0 	b.w	8001818 <__sinit_lock_release>
 8001838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800183c:	6523      	str	r3, [r4, #80]	; 0x50
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <__sinit+0x68>)
 8001840:	4a13      	ldr	r2, [pc, #76]	; (8001890 <__sinit+0x6c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	62a2      	str	r2, [r4, #40]	; 0x28
 8001846:	42a3      	cmp	r3, r4
 8001848:	bf04      	itt	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	61a3      	streq	r3, [r4, #24]
 800184e:	4620      	mov	r0, r4
 8001850:	f000 f820 	bl	8001894 <__sfp>
 8001854:	6060      	str	r0, [r4, #4]
 8001856:	4620      	mov	r0, r4
 8001858:	f000 f81c 	bl	8001894 <__sfp>
 800185c:	60a0      	str	r0, [r4, #8]
 800185e:	4620      	mov	r0, r4
 8001860:	f000 f818 	bl	8001894 <__sfp>
 8001864:	2200      	movs	r2, #0
 8001866:	60e0      	str	r0, [r4, #12]
 8001868:	2104      	movs	r1, #4
 800186a:	6860      	ldr	r0, [r4, #4]
 800186c:	f7ff ff82 	bl	8001774 <std>
 8001870:	68a0      	ldr	r0, [r4, #8]
 8001872:	2201      	movs	r2, #1
 8001874:	2109      	movs	r1, #9
 8001876:	f7ff ff7d 	bl	8001774 <std>
 800187a:	68e0      	ldr	r0, [r4, #12]
 800187c:	2202      	movs	r2, #2
 800187e:	2112      	movs	r1, #18
 8001880:	f7ff ff78 	bl	8001774 <std>
 8001884:	2301      	movs	r3, #1
 8001886:	61a3      	str	r3, [r4, #24]
 8001888:	e7d2      	b.n	8001830 <__sinit+0xc>
 800188a:	bf00      	nop
 800188c:	08002880 	.word	0x08002880
 8001890:	080017bd 	.word	0x080017bd

08001894 <__sfp>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	4607      	mov	r7, r0
 8001898:	f7ff ffac 	bl	80017f4 <__sfp_lock_acquire>
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <__sfp+0x84>)
 800189e:	681e      	ldr	r6, [r3, #0]
 80018a0:	69b3      	ldr	r3, [r6, #24]
 80018a2:	b913      	cbnz	r3, 80018aa <__sfp+0x16>
 80018a4:	4630      	mov	r0, r6
 80018a6:	f7ff ffbd 	bl	8001824 <__sinit>
 80018aa:	3648      	adds	r6, #72	; 0x48
 80018ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	d503      	bpl.n	80018bc <__sfp+0x28>
 80018b4:	6833      	ldr	r3, [r6, #0]
 80018b6:	b30b      	cbz	r3, 80018fc <__sfp+0x68>
 80018b8:	6836      	ldr	r6, [r6, #0]
 80018ba:	e7f7      	b.n	80018ac <__sfp+0x18>
 80018bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80018c0:	b9d5      	cbnz	r5, 80018f8 <__sfp+0x64>
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <__sfp+0x88>)
 80018c4:	60e3      	str	r3, [r4, #12]
 80018c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80018ca:	6665      	str	r5, [r4, #100]	; 0x64
 80018cc:	f000 f847 	bl	800195e <__retarget_lock_init_recursive>
 80018d0:	f7ff ff96 	bl	8001800 <__sfp_lock_release>
 80018d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80018d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80018dc:	6025      	str	r5, [r4, #0]
 80018de:	61a5      	str	r5, [r4, #24]
 80018e0:	2208      	movs	r2, #8
 80018e2:	4629      	mov	r1, r5
 80018e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018e8:	f7ff fc48 	bl	800117c <memset>
 80018ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018f4:	4620      	mov	r0, r4
 80018f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018f8:	3468      	adds	r4, #104	; 0x68
 80018fa:	e7d9      	b.n	80018b0 <__sfp+0x1c>
 80018fc:	2104      	movs	r1, #4
 80018fe:	4638      	mov	r0, r7
 8001900:	f7ff ff62 	bl	80017c8 <__sfmoreglue>
 8001904:	4604      	mov	r4, r0
 8001906:	6030      	str	r0, [r6, #0]
 8001908:	2800      	cmp	r0, #0
 800190a:	d1d5      	bne.n	80018b8 <__sfp+0x24>
 800190c:	f7ff ff78 	bl	8001800 <__sfp_lock_release>
 8001910:	230c      	movs	r3, #12
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	e7ee      	b.n	80018f4 <__sfp+0x60>
 8001916:	bf00      	nop
 8001918:	08002880 	.word	0x08002880
 800191c:	ffff0001 	.word	0xffff0001

08001920 <_fwalk_reent>:
 8001920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001924:	4606      	mov	r6, r0
 8001926:	4688      	mov	r8, r1
 8001928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800192c:	2700      	movs	r7, #0
 800192e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001932:	f1b9 0901 	subs.w	r9, r9, #1
 8001936:	d505      	bpl.n	8001944 <_fwalk_reent+0x24>
 8001938:	6824      	ldr	r4, [r4, #0]
 800193a:	2c00      	cmp	r4, #0
 800193c:	d1f7      	bne.n	800192e <_fwalk_reent+0xe>
 800193e:	4638      	mov	r0, r7
 8001940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001944:	89ab      	ldrh	r3, [r5, #12]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d907      	bls.n	800195a <_fwalk_reent+0x3a>
 800194a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800194e:	3301      	adds	r3, #1
 8001950:	d003      	beq.n	800195a <_fwalk_reent+0x3a>
 8001952:	4629      	mov	r1, r5
 8001954:	4630      	mov	r0, r6
 8001956:	47c0      	blx	r8
 8001958:	4307      	orrs	r7, r0
 800195a:	3568      	adds	r5, #104	; 0x68
 800195c:	e7e9      	b.n	8001932 <_fwalk_reent+0x12>

0800195e <__retarget_lock_init_recursive>:
 800195e:	4770      	bx	lr

08001960 <__retarget_lock_acquire_recursive>:
 8001960:	4770      	bx	lr

08001962 <__retarget_lock_release_recursive>:
 8001962:	4770      	bx	lr

08001964 <__swhatbuf_r>:
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	460e      	mov	r6, r1
 8001968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800196c:	2900      	cmp	r1, #0
 800196e:	b096      	sub	sp, #88	; 0x58
 8001970:	4614      	mov	r4, r2
 8001972:	461d      	mov	r5, r3
 8001974:	da07      	bge.n	8001986 <__swhatbuf_r+0x22>
 8001976:	2300      	movs	r3, #0
 8001978:	602b      	str	r3, [r5, #0]
 800197a:	89b3      	ldrh	r3, [r6, #12]
 800197c:	061a      	lsls	r2, r3, #24
 800197e:	d410      	bmi.n	80019a2 <__swhatbuf_r+0x3e>
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	e00e      	b.n	80019a4 <__swhatbuf_r+0x40>
 8001986:	466a      	mov	r2, sp
 8001988:	f000 fc9c 	bl	80022c4 <_fstat_r>
 800198c:	2800      	cmp	r0, #0
 800198e:	dbf2      	blt.n	8001976 <__swhatbuf_r+0x12>
 8001990:	9a01      	ldr	r2, [sp, #4]
 8001992:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001996:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800199a:	425a      	negs	r2, r3
 800199c:	415a      	adcs	r2, r3
 800199e:	602a      	str	r2, [r5, #0]
 80019a0:	e7ee      	b.n	8001980 <__swhatbuf_r+0x1c>
 80019a2:	2340      	movs	r3, #64	; 0x40
 80019a4:	2000      	movs	r0, #0
 80019a6:	6023      	str	r3, [r4, #0]
 80019a8:	b016      	add	sp, #88	; 0x58
 80019aa:	bd70      	pop	{r4, r5, r6, pc}

080019ac <__smakebuf_r>:
 80019ac:	898b      	ldrh	r3, [r1, #12]
 80019ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019b0:	079d      	lsls	r5, r3, #30
 80019b2:	4606      	mov	r6, r0
 80019b4:	460c      	mov	r4, r1
 80019b6:	d507      	bpl.n	80019c8 <__smakebuf_r+0x1c>
 80019b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	6123      	str	r3, [r4, #16]
 80019c0:	2301      	movs	r3, #1
 80019c2:	6163      	str	r3, [r4, #20]
 80019c4:	b002      	add	sp, #8
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	ab01      	add	r3, sp, #4
 80019ca:	466a      	mov	r2, sp
 80019cc:	f7ff ffca 	bl	8001964 <__swhatbuf_r>
 80019d0:	9900      	ldr	r1, [sp, #0]
 80019d2:	4605      	mov	r5, r0
 80019d4:	4630      	mov	r0, r6
 80019d6:	f000 f881 	bl	8001adc <_malloc_r>
 80019da:	b948      	cbnz	r0, 80019f0 <__smakebuf_r+0x44>
 80019dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019e0:	059a      	lsls	r2, r3, #22
 80019e2:	d4ef      	bmi.n	80019c4 <__smakebuf_r+0x18>
 80019e4:	f023 0303 	bic.w	r3, r3, #3
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	81a3      	strh	r3, [r4, #12]
 80019ee:	e7e3      	b.n	80019b8 <__smakebuf_r+0xc>
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <__smakebuf_r+0x7c>)
 80019f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80019f4:	89a3      	ldrh	r3, [r4, #12]
 80019f6:	6020      	str	r0, [r4, #0]
 80019f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fc:	81a3      	strh	r3, [r4, #12]
 80019fe:	9b00      	ldr	r3, [sp, #0]
 8001a00:	6163      	str	r3, [r4, #20]
 8001a02:	9b01      	ldr	r3, [sp, #4]
 8001a04:	6120      	str	r0, [r4, #16]
 8001a06:	b15b      	cbz	r3, 8001a20 <__smakebuf_r+0x74>
 8001a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	f000 fc6b 	bl	80022e8 <_isatty_r>
 8001a12:	b128      	cbz	r0, 8001a20 <__smakebuf_r+0x74>
 8001a14:	89a3      	ldrh	r3, [r4, #12]
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	81a3      	strh	r3, [r4, #12]
 8001a20:	89a0      	ldrh	r0, [r4, #12]
 8001a22:	4305      	orrs	r5, r0
 8001a24:	81a5      	strh	r5, [r4, #12]
 8001a26:	e7cd      	b.n	80019c4 <__smakebuf_r+0x18>
 8001a28:	080017bd 	.word	0x080017bd

08001a2c <malloc>:
 8001a2c:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <malloc+0xc>)
 8001a2e:	4601      	mov	r1, r0
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	f000 b853 	b.w	8001adc <_malloc_r>
 8001a36:	bf00      	nop
 8001a38:	2000002c 	.word	0x2000002c

08001a3c <_free_r>:
 8001a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a3e:	2900      	cmp	r1, #0
 8001a40:	d048      	beq.n	8001ad4 <_free_r+0x98>
 8001a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a46:	9001      	str	r0, [sp, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8001a4e:	bfb8      	it	lt
 8001a50:	18e4      	addlt	r4, r4, r3
 8001a52:	f000 fc6b 	bl	800232c <__malloc_lock>
 8001a56:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <_free_r+0x9c>)
 8001a58:	9801      	ldr	r0, [sp, #4]
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	4615      	mov	r5, r2
 8001a5e:	b933      	cbnz	r3, 8001a6e <_free_r+0x32>
 8001a60:	6063      	str	r3, [r4, #4]
 8001a62:	6014      	str	r4, [r2, #0]
 8001a64:	b003      	add	sp, #12
 8001a66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a6a:	f000 bc65 	b.w	8002338 <__malloc_unlock>
 8001a6e:	42a3      	cmp	r3, r4
 8001a70:	d90b      	bls.n	8001a8a <_free_r+0x4e>
 8001a72:	6821      	ldr	r1, [r4, #0]
 8001a74:	1862      	adds	r2, r4, r1
 8001a76:	4293      	cmp	r3, r2
 8001a78:	bf04      	itt	eq
 8001a7a:	681a      	ldreq	r2, [r3, #0]
 8001a7c:	685b      	ldreq	r3, [r3, #4]
 8001a7e:	6063      	str	r3, [r4, #4]
 8001a80:	bf04      	itt	eq
 8001a82:	1852      	addeq	r2, r2, r1
 8001a84:	6022      	streq	r2, [r4, #0]
 8001a86:	602c      	str	r4, [r5, #0]
 8001a88:	e7ec      	b.n	8001a64 <_free_r+0x28>
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	b10b      	cbz	r3, 8001a94 <_free_r+0x58>
 8001a90:	42a3      	cmp	r3, r4
 8001a92:	d9fa      	bls.n	8001a8a <_free_r+0x4e>
 8001a94:	6811      	ldr	r1, [r2, #0]
 8001a96:	1855      	adds	r5, r2, r1
 8001a98:	42a5      	cmp	r5, r4
 8001a9a:	d10b      	bne.n	8001ab4 <_free_r+0x78>
 8001a9c:	6824      	ldr	r4, [r4, #0]
 8001a9e:	4421      	add	r1, r4
 8001aa0:	1854      	adds	r4, r2, r1
 8001aa2:	42a3      	cmp	r3, r4
 8001aa4:	6011      	str	r1, [r2, #0]
 8001aa6:	d1dd      	bne.n	8001a64 <_free_r+0x28>
 8001aa8:	681c      	ldr	r4, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	6053      	str	r3, [r2, #4]
 8001aae:	4421      	add	r1, r4
 8001ab0:	6011      	str	r1, [r2, #0]
 8001ab2:	e7d7      	b.n	8001a64 <_free_r+0x28>
 8001ab4:	d902      	bls.n	8001abc <_free_r+0x80>
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	6003      	str	r3, [r0, #0]
 8001aba:	e7d3      	b.n	8001a64 <_free_r+0x28>
 8001abc:	6825      	ldr	r5, [r4, #0]
 8001abe:	1961      	adds	r1, r4, r5
 8001ac0:	428b      	cmp	r3, r1
 8001ac2:	bf04      	itt	eq
 8001ac4:	6819      	ldreq	r1, [r3, #0]
 8001ac6:	685b      	ldreq	r3, [r3, #4]
 8001ac8:	6063      	str	r3, [r4, #4]
 8001aca:	bf04      	itt	eq
 8001acc:	1949      	addeq	r1, r1, r5
 8001ace:	6021      	streq	r1, [r4, #0]
 8001ad0:	6054      	str	r4, [r2, #4]
 8001ad2:	e7c7      	b.n	8001a64 <_free_r+0x28>
 8001ad4:	b003      	add	sp, #12
 8001ad6:	bd30      	pop	{r4, r5, pc}
 8001ad8:	200001b4 	.word	0x200001b4

08001adc <_malloc_r>:
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	1ccd      	adds	r5, r1, #3
 8001ae0:	f025 0503 	bic.w	r5, r5, #3
 8001ae4:	3508      	adds	r5, #8
 8001ae6:	2d0c      	cmp	r5, #12
 8001ae8:	bf38      	it	cc
 8001aea:	250c      	movcc	r5, #12
 8001aec:	2d00      	cmp	r5, #0
 8001aee:	4606      	mov	r6, r0
 8001af0:	db01      	blt.n	8001af6 <_malloc_r+0x1a>
 8001af2:	42a9      	cmp	r1, r5
 8001af4:	d903      	bls.n	8001afe <_malloc_r+0x22>
 8001af6:	230c      	movs	r3, #12
 8001af8:	6033      	str	r3, [r6, #0]
 8001afa:	2000      	movs	r0, #0
 8001afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001afe:	f000 fc15 	bl	800232c <__malloc_lock>
 8001b02:	4921      	ldr	r1, [pc, #132]	; (8001b88 <_malloc_r+0xac>)
 8001b04:	680a      	ldr	r2, [r1, #0]
 8001b06:	4614      	mov	r4, r2
 8001b08:	b99c      	cbnz	r4, 8001b32 <_malloc_r+0x56>
 8001b0a:	4f20      	ldr	r7, [pc, #128]	; (8001b8c <_malloc_r+0xb0>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b923      	cbnz	r3, 8001b1a <_malloc_r+0x3e>
 8001b10:	4621      	mov	r1, r4
 8001b12:	4630      	mov	r0, r6
 8001b14:	f000 fb72 	bl	80021fc <_sbrk_r>
 8001b18:	6038      	str	r0, [r7, #0]
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	4630      	mov	r0, r6
 8001b1e:	f000 fb6d 	bl	80021fc <_sbrk_r>
 8001b22:	1c43      	adds	r3, r0, #1
 8001b24:	d123      	bne.n	8001b6e <_malloc_r+0x92>
 8001b26:	230c      	movs	r3, #12
 8001b28:	6033      	str	r3, [r6, #0]
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	f000 fc04 	bl	8002338 <__malloc_unlock>
 8001b30:	e7e3      	b.n	8001afa <_malloc_r+0x1e>
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	1b5b      	subs	r3, r3, r5
 8001b36:	d417      	bmi.n	8001b68 <_malloc_r+0x8c>
 8001b38:	2b0b      	cmp	r3, #11
 8001b3a:	d903      	bls.n	8001b44 <_malloc_r+0x68>
 8001b3c:	6023      	str	r3, [r4, #0]
 8001b3e:	441c      	add	r4, r3
 8001b40:	6025      	str	r5, [r4, #0]
 8001b42:	e004      	b.n	8001b4e <_malloc_r+0x72>
 8001b44:	6863      	ldr	r3, [r4, #4]
 8001b46:	42a2      	cmp	r2, r4
 8001b48:	bf0c      	ite	eq
 8001b4a:	600b      	streq	r3, [r1, #0]
 8001b4c:	6053      	strne	r3, [r2, #4]
 8001b4e:	4630      	mov	r0, r6
 8001b50:	f000 fbf2 	bl	8002338 <__malloc_unlock>
 8001b54:	f104 000b 	add.w	r0, r4, #11
 8001b58:	1d23      	adds	r3, r4, #4
 8001b5a:	f020 0007 	bic.w	r0, r0, #7
 8001b5e:	1ac2      	subs	r2, r0, r3
 8001b60:	d0cc      	beq.n	8001afc <_malloc_r+0x20>
 8001b62:	1a1b      	subs	r3, r3, r0
 8001b64:	50a3      	str	r3, [r4, r2]
 8001b66:	e7c9      	b.n	8001afc <_malloc_r+0x20>
 8001b68:	4622      	mov	r2, r4
 8001b6a:	6864      	ldr	r4, [r4, #4]
 8001b6c:	e7cc      	b.n	8001b08 <_malloc_r+0x2c>
 8001b6e:	1cc4      	adds	r4, r0, #3
 8001b70:	f024 0403 	bic.w	r4, r4, #3
 8001b74:	42a0      	cmp	r0, r4
 8001b76:	d0e3      	beq.n	8001b40 <_malloc_r+0x64>
 8001b78:	1a21      	subs	r1, r4, r0
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f000 fb3e 	bl	80021fc <_sbrk_r>
 8001b80:	3001      	adds	r0, #1
 8001b82:	d1dd      	bne.n	8001b40 <_malloc_r+0x64>
 8001b84:	e7cf      	b.n	8001b26 <_malloc_r+0x4a>
 8001b86:	bf00      	nop
 8001b88:	200001b4 	.word	0x200001b4
 8001b8c:	200001b8 	.word	0x200001b8

08001b90 <__sfputc_r>:
 8001b90:	6893      	ldr	r3, [r2, #8]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	b410      	push	{r4}
 8001b98:	6093      	str	r3, [r2, #8]
 8001b9a:	da08      	bge.n	8001bae <__sfputc_r+0x1e>
 8001b9c:	6994      	ldr	r4, [r2, #24]
 8001b9e:	42a3      	cmp	r3, r4
 8001ba0:	db01      	blt.n	8001ba6 <__sfputc_r+0x16>
 8001ba2:	290a      	cmp	r1, #10
 8001ba4:	d103      	bne.n	8001bae <__sfputc_r+0x1e>
 8001ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001baa:	f7ff bc61 	b.w	8001470 <__swbuf_r>
 8001bae:	6813      	ldr	r3, [r2, #0]
 8001bb0:	1c58      	adds	r0, r3, #1
 8001bb2:	6010      	str	r0, [r2, #0]
 8001bb4:	7019      	strb	r1, [r3, #0]
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <__sfputs_r>:
 8001bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc0:	4606      	mov	r6, r0
 8001bc2:	460f      	mov	r7, r1
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	18d5      	adds	r5, r2, r3
 8001bc8:	42ac      	cmp	r4, r5
 8001bca:	d101      	bne.n	8001bd0 <__sfputs_r+0x12>
 8001bcc:	2000      	movs	r0, #0
 8001bce:	e007      	b.n	8001be0 <__sfputs_r+0x22>
 8001bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bd4:	463a      	mov	r2, r7
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	f7ff ffda 	bl	8001b90 <__sfputc_r>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d1f3      	bne.n	8001bc8 <__sfputs_r+0xa>
 8001be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001be4 <_vfiprintf_r>:
 8001be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be8:	460d      	mov	r5, r1
 8001bea:	b09d      	sub	sp, #116	; 0x74
 8001bec:	4614      	mov	r4, r2
 8001bee:	4698      	mov	r8, r3
 8001bf0:	4606      	mov	r6, r0
 8001bf2:	b118      	cbz	r0, 8001bfc <_vfiprintf_r+0x18>
 8001bf4:	6983      	ldr	r3, [r0, #24]
 8001bf6:	b90b      	cbnz	r3, 8001bfc <_vfiprintf_r+0x18>
 8001bf8:	f7ff fe14 	bl	8001824 <__sinit>
 8001bfc:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <_vfiprintf_r+0x240>)
 8001bfe:	429d      	cmp	r5, r3
 8001c00:	d11b      	bne.n	8001c3a <_vfiprintf_r+0x56>
 8001c02:	6875      	ldr	r5, [r6, #4]
 8001c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c06:	07d9      	lsls	r1, r3, #31
 8001c08:	d405      	bmi.n	8001c16 <_vfiprintf_r+0x32>
 8001c0a:	89ab      	ldrh	r3, [r5, #12]
 8001c0c:	059a      	lsls	r2, r3, #22
 8001c0e:	d402      	bmi.n	8001c16 <_vfiprintf_r+0x32>
 8001c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c12:	f7ff fea5 	bl	8001960 <__retarget_lock_acquire_recursive>
 8001c16:	89ab      	ldrh	r3, [r5, #12]
 8001c18:	071b      	lsls	r3, r3, #28
 8001c1a:	d501      	bpl.n	8001c20 <_vfiprintf_r+0x3c>
 8001c1c:	692b      	ldr	r3, [r5, #16]
 8001c1e:	b9eb      	cbnz	r3, 8001c5c <_vfiprintf_r+0x78>
 8001c20:	4629      	mov	r1, r5
 8001c22:	4630      	mov	r0, r6
 8001c24:	f7ff fc76 	bl	8001514 <__swsetup_r>
 8001c28:	b1c0      	cbz	r0, 8001c5c <_vfiprintf_r+0x78>
 8001c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c2c:	07dc      	lsls	r4, r3, #31
 8001c2e:	d50e      	bpl.n	8001c4e <_vfiprintf_r+0x6a>
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	b01d      	add	sp, #116	; 0x74
 8001c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c3a:	4b7b      	ldr	r3, [pc, #492]	; (8001e28 <_vfiprintf_r+0x244>)
 8001c3c:	429d      	cmp	r5, r3
 8001c3e:	d101      	bne.n	8001c44 <_vfiprintf_r+0x60>
 8001c40:	68b5      	ldr	r5, [r6, #8]
 8001c42:	e7df      	b.n	8001c04 <_vfiprintf_r+0x20>
 8001c44:	4b79      	ldr	r3, [pc, #484]	; (8001e2c <_vfiprintf_r+0x248>)
 8001c46:	429d      	cmp	r5, r3
 8001c48:	bf08      	it	eq
 8001c4a:	68f5      	ldreq	r5, [r6, #12]
 8001c4c:	e7da      	b.n	8001c04 <_vfiprintf_r+0x20>
 8001c4e:	89ab      	ldrh	r3, [r5, #12]
 8001c50:	0598      	lsls	r0, r3, #22
 8001c52:	d4ed      	bmi.n	8001c30 <_vfiprintf_r+0x4c>
 8001c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c56:	f7ff fe84 	bl	8001962 <__retarget_lock_release_recursive>
 8001c5a:	e7e9      	b.n	8001c30 <_vfiprintf_r+0x4c>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8001c60:	2320      	movs	r3, #32
 8001c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c6a:	2330      	movs	r3, #48	; 0x30
 8001c6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001e30 <_vfiprintf_r+0x24c>
 8001c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c74:	f04f 0901 	mov.w	r9, #1
 8001c78:	4623      	mov	r3, r4
 8001c7a:	469a      	mov	sl, r3
 8001c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c80:	b10a      	cbz	r2, 8001c86 <_vfiprintf_r+0xa2>
 8001c82:	2a25      	cmp	r2, #37	; 0x25
 8001c84:	d1f9      	bne.n	8001c7a <_vfiprintf_r+0x96>
 8001c86:	ebba 0b04 	subs.w	fp, sl, r4
 8001c8a:	d00b      	beq.n	8001ca4 <_vfiprintf_r+0xc0>
 8001c8c:	465b      	mov	r3, fp
 8001c8e:	4622      	mov	r2, r4
 8001c90:	4629      	mov	r1, r5
 8001c92:	4630      	mov	r0, r6
 8001c94:	f7ff ff93 	bl	8001bbe <__sfputs_r>
 8001c98:	3001      	adds	r0, #1
 8001c9a:	f000 80aa 	beq.w	8001df2 <_vfiprintf_r+0x20e>
 8001c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ca0:	445a      	add	r2, fp
 8001ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8001ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a2 	beq.w	8001df2 <_vfiprintf_r+0x20e>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cb8:	f10a 0a01 	add.w	sl, sl, #1
 8001cbc:	9304      	str	r3, [sp, #16]
 8001cbe:	9307      	str	r3, [sp, #28]
 8001cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8001cc6:	4654      	mov	r4, sl
 8001cc8:	2205      	movs	r2, #5
 8001cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cce:	4858      	ldr	r0, [pc, #352]	; (8001e30 <_vfiprintf_r+0x24c>)
 8001cd0:	f7fe fa7e 	bl	80001d0 <memchr>
 8001cd4:	9a04      	ldr	r2, [sp, #16]
 8001cd6:	b9d8      	cbnz	r0, 8001d10 <_vfiprintf_r+0x12c>
 8001cd8:	06d1      	lsls	r1, r2, #27
 8001cda:	bf44      	itt	mi
 8001cdc:	2320      	movmi	r3, #32
 8001cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ce2:	0713      	lsls	r3, r2, #28
 8001ce4:	bf44      	itt	mi
 8001ce6:	232b      	movmi	r3, #43	; 0x2b
 8001ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cec:	f89a 3000 	ldrb.w	r3, [sl]
 8001cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8001cf2:	d015      	beq.n	8001d20 <_vfiprintf_r+0x13c>
 8001cf4:	9a07      	ldr	r2, [sp, #28]
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f04f 0c0a 	mov.w	ip, #10
 8001cfe:	4621      	mov	r1, r4
 8001d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d04:	3b30      	subs	r3, #48	; 0x30
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	d94e      	bls.n	8001da8 <_vfiprintf_r+0x1c4>
 8001d0a:	b1b0      	cbz	r0, 8001d3a <_vfiprintf_r+0x156>
 8001d0c:	9207      	str	r2, [sp, #28]
 8001d0e:	e014      	b.n	8001d3a <_vfiprintf_r+0x156>
 8001d10:	eba0 0308 	sub.w	r3, r0, r8
 8001d14:	fa09 f303 	lsl.w	r3, r9, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	9304      	str	r3, [sp, #16]
 8001d1c:	46a2      	mov	sl, r4
 8001d1e:	e7d2      	b.n	8001cc6 <_vfiprintf_r+0xe2>
 8001d20:	9b03      	ldr	r3, [sp, #12]
 8001d22:	1d19      	adds	r1, r3, #4
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	9103      	str	r1, [sp, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bfbb      	ittet	lt
 8001d2c:	425b      	neglt	r3, r3
 8001d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8001d32:	9307      	strge	r3, [sp, #28]
 8001d34:	9307      	strlt	r3, [sp, #28]
 8001d36:	bfb8      	it	lt
 8001d38:	9204      	strlt	r2, [sp, #16]
 8001d3a:	7823      	ldrb	r3, [r4, #0]
 8001d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d3e:	d10c      	bne.n	8001d5a <_vfiprintf_r+0x176>
 8001d40:	7863      	ldrb	r3, [r4, #1]
 8001d42:	2b2a      	cmp	r3, #42	; 0x2a
 8001d44:	d135      	bne.n	8001db2 <_vfiprintf_r+0x1ce>
 8001d46:	9b03      	ldr	r3, [sp, #12]
 8001d48:	1d1a      	adds	r2, r3, #4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	9203      	str	r2, [sp, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bfb8      	it	lt
 8001d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d56:	3402      	adds	r4, #2
 8001d58:	9305      	str	r3, [sp, #20]
 8001d5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001e40 <_vfiprintf_r+0x25c>
 8001d5e:	7821      	ldrb	r1, [r4, #0]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4650      	mov	r0, sl
 8001d64:	f7fe fa34 	bl	80001d0 <memchr>
 8001d68:	b140      	cbz	r0, 8001d7c <_vfiprintf_r+0x198>
 8001d6a:	2340      	movs	r3, #64	; 0x40
 8001d6c:	eba0 000a 	sub.w	r0, r0, sl
 8001d70:	fa03 f000 	lsl.w	r0, r3, r0
 8001d74:	9b04      	ldr	r3, [sp, #16]
 8001d76:	4303      	orrs	r3, r0
 8001d78:	3401      	adds	r4, #1
 8001d7a:	9304      	str	r3, [sp, #16]
 8001d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d80:	482c      	ldr	r0, [pc, #176]	; (8001e34 <_vfiprintf_r+0x250>)
 8001d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d86:	2206      	movs	r2, #6
 8001d88:	f7fe fa22 	bl	80001d0 <memchr>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	d03f      	beq.n	8001e10 <_vfiprintf_r+0x22c>
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <_vfiprintf_r+0x254>)
 8001d92:	bb1b      	cbnz	r3, 8001ddc <_vfiprintf_r+0x1f8>
 8001d94:	9b03      	ldr	r3, [sp, #12]
 8001d96:	3307      	adds	r3, #7
 8001d98:	f023 0307 	bic.w	r3, r3, #7
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	9303      	str	r3, [sp, #12]
 8001da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001da2:	443b      	add	r3, r7
 8001da4:	9309      	str	r3, [sp, #36]	; 0x24
 8001da6:	e767      	b.n	8001c78 <_vfiprintf_r+0x94>
 8001da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001dac:	460c      	mov	r4, r1
 8001dae:	2001      	movs	r0, #1
 8001db0:	e7a5      	b.n	8001cfe <_vfiprintf_r+0x11a>
 8001db2:	2300      	movs	r3, #0
 8001db4:	3401      	adds	r4, #1
 8001db6:	9305      	str	r3, [sp, #20]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 0c0a 	mov.w	ip, #10
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001dc4:	3a30      	subs	r2, #48	; 0x30
 8001dc6:	2a09      	cmp	r2, #9
 8001dc8:	d903      	bls.n	8001dd2 <_vfiprintf_r+0x1ee>
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0c5      	beq.n	8001d5a <_vfiprintf_r+0x176>
 8001dce:	9105      	str	r1, [sp, #20]
 8001dd0:	e7c3      	b.n	8001d5a <_vfiprintf_r+0x176>
 8001dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e7f0      	b.n	8001dbe <_vfiprintf_r+0x1da>
 8001ddc:	ab03      	add	r3, sp, #12
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	462a      	mov	r2, r5
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <_vfiprintf_r+0x258>)
 8001de4:	a904      	add	r1, sp, #16
 8001de6:	4630      	mov	r0, r6
 8001de8:	f3af 8000 	nop.w
 8001dec:	4607      	mov	r7, r0
 8001dee:	1c78      	adds	r0, r7, #1
 8001df0:	d1d6      	bne.n	8001da0 <_vfiprintf_r+0x1bc>
 8001df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001df4:	07d9      	lsls	r1, r3, #31
 8001df6:	d405      	bmi.n	8001e04 <_vfiprintf_r+0x220>
 8001df8:	89ab      	ldrh	r3, [r5, #12]
 8001dfa:	059a      	lsls	r2, r3, #22
 8001dfc:	d402      	bmi.n	8001e04 <_vfiprintf_r+0x220>
 8001dfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e00:	f7ff fdaf 	bl	8001962 <__retarget_lock_release_recursive>
 8001e04:	89ab      	ldrh	r3, [r5, #12]
 8001e06:	065b      	lsls	r3, r3, #25
 8001e08:	f53f af12 	bmi.w	8001c30 <_vfiprintf_r+0x4c>
 8001e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e0e:	e711      	b.n	8001c34 <_vfiprintf_r+0x50>
 8001e10:	ab03      	add	r3, sp, #12
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	462a      	mov	r2, r5
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <_vfiprintf_r+0x258>)
 8001e18:	a904      	add	r1, sp, #16
 8001e1a:	4630      	mov	r0, r6
 8001e1c:	f000 f880 	bl	8001f20 <_printf_i>
 8001e20:	e7e4      	b.n	8001dec <_vfiprintf_r+0x208>
 8001e22:	bf00      	nop
 8001e24:	080028a4 	.word	0x080028a4
 8001e28:	080028c4 	.word	0x080028c4
 8001e2c:	08002884 	.word	0x08002884
 8001e30:	080028e4 	.word	0x080028e4
 8001e34:	080028ee 	.word	0x080028ee
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	08001bbf 	.word	0x08001bbf
 8001e40:	080028ea 	.word	0x080028ea

08001e44 <_printf_common>:
 8001e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e48:	4616      	mov	r6, r2
 8001e4a:	4699      	mov	r9, r3
 8001e4c:	688a      	ldr	r2, [r1, #8]
 8001e4e:	690b      	ldr	r3, [r1, #16]
 8001e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	bfb8      	it	lt
 8001e58:	4613      	movlt	r3, r2
 8001e5a:	6033      	str	r3, [r6, #0]
 8001e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e60:	4607      	mov	r7, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	b10a      	cbz	r2, 8001e6a <_printf_common+0x26>
 8001e66:	3301      	adds	r3, #1
 8001e68:	6033      	str	r3, [r6, #0]
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	0699      	lsls	r1, r3, #26
 8001e6e:	bf42      	ittt	mi
 8001e70:	6833      	ldrmi	r3, [r6, #0]
 8001e72:	3302      	addmi	r3, #2
 8001e74:	6033      	strmi	r3, [r6, #0]
 8001e76:	6825      	ldr	r5, [r4, #0]
 8001e78:	f015 0506 	ands.w	r5, r5, #6
 8001e7c:	d106      	bne.n	8001e8c <_printf_common+0x48>
 8001e7e:	f104 0a19 	add.w	sl, r4, #25
 8001e82:	68e3      	ldr	r3, [r4, #12]
 8001e84:	6832      	ldr	r2, [r6, #0]
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	42ab      	cmp	r3, r5
 8001e8a:	dc26      	bgt.n	8001eda <_printf_common+0x96>
 8001e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e90:	1e13      	subs	r3, r2, #0
 8001e92:	6822      	ldr	r2, [r4, #0]
 8001e94:	bf18      	it	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	0692      	lsls	r2, r2, #26
 8001e9a:	d42b      	bmi.n	8001ef4 <_printf_common+0xb0>
 8001e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	4638      	mov	r0, r7
 8001ea4:	47c0      	blx	r8
 8001ea6:	3001      	adds	r0, #1
 8001ea8:	d01e      	beq.n	8001ee8 <_printf_common+0xa4>
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	68e5      	ldr	r5, [r4, #12]
 8001eae:	6832      	ldr	r2, [r6, #0]
 8001eb0:	f003 0306 	and.w	r3, r3, #6
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	bf08      	it	eq
 8001eb8:	1aad      	subeq	r5, r5, r2
 8001eba:	68a3      	ldr	r3, [r4, #8]
 8001ebc:	6922      	ldr	r2, [r4, #16]
 8001ebe:	bf0c      	ite	eq
 8001ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ec4:	2500      	movne	r5, #0
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	bfc4      	itt	gt
 8001eca:	1a9b      	subgt	r3, r3, r2
 8001ecc:	18ed      	addgt	r5, r5, r3
 8001ece:	2600      	movs	r6, #0
 8001ed0:	341a      	adds	r4, #26
 8001ed2:	42b5      	cmp	r5, r6
 8001ed4:	d11a      	bne.n	8001f0c <_printf_common+0xc8>
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	e008      	b.n	8001eec <_printf_common+0xa8>
 8001eda:	2301      	movs	r3, #1
 8001edc:	4652      	mov	r2, sl
 8001ede:	4649      	mov	r1, r9
 8001ee0:	4638      	mov	r0, r7
 8001ee2:	47c0      	blx	r8
 8001ee4:	3001      	adds	r0, #1
 8001ee6:	d103      	bne.n	8001ef0 <_printf_common+0xac>
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ef0:	3501      	adds	r5, #1
 8001ef2:	e7c6      	b.n	8001e82 <_printf_common+0x3e>
 8001ef4:	18e1      	adds	r1, r4, r3
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	2030      	movs	r0, #48	; 0x30
 8001efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001efe:	4422      	add	r2, r4
 8001f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f08:	3302      	adds	r3, #2
 8001f0a:	e7c7      	b.n	8001e9c <_printf_common+0x58>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4622      	mov	r2, r4
 8001f10:	4649      	mov	r1, r9
 8001f12:	4638      	mov	r0, r7
 8001f14:	47c0      	blx	r8
 8001f16:	3001      	adds	r0, #1
 8001f18:	d0e6      	beq.n	8001ee8 <_printf_common+0xa4>
 8001f1a:	3601      	adds	r6, #1
 8001f1c:	e7d9      	b.n	8001ed2 <_printf_common+0x8e>
	...

08001f20 <_printf_i>:
 8001f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f24:	460c      	mov	r4, r1
 8001f26:	4691      	mov	r9, r2
 8001f28:	7e27      	ldrb	r7, [r4, #24]
 8001f2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f2c:	2f78      	cmp	r7, #120	; 0x78
 8001f2e:	4680      	mov	r8, r0
 8001f30:	469a      	mov	sl, r3
 8001f32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f36:	d807      	bhi.n	8001f48 <_printf_i+0x28>
 8001f38:	2f62      	cmp	r7, #98	; 0x62
 8001f3a:	d80a      	bhi.n	8001f52 <_printf_i+0x32>
 8001f3c:	2f00      	cmp	r7, #0
 8001f3e:	f000 80d8 	beq.w	80020f2 <_printf_i+0x1d2>
 8001f42:	2f58      	cmp	r7, #88	; 0x58
 8001f44:	f000 80a3 	beq.w	800208e <_printf_i+0x16e>
 8001f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f50:	e03a      	b.n	8001fc8 <_printf_i+0xa8>
 8001f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f56:	2b15      	cmp	r3, #21
 8001f58:	d8f6      	bhi.n	8001f48 <_printf_i+0x28>
 8001f5a:	a001      	add	r0, pc, #4	; (adr r0, 8001f60 <_printf_i+0x40>)
 8001f5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001f60:	08001fb9 	.word	0x08001fb9
 8001f64:	08001fcd 	.word	0x08001fcd
 8001f68:	08001f49 	.word	0x08001f49
 8001f6c:	08001f49 	.word	0x08001f49
 8001f70:	08001f49 	.word	0x08001f49
 8001f74:	08001f49 	.word	0x08001f49
 8001f78:	08001fcd 	.word	0x08001fcd
 8001f7c:	08001f49 	.word	0x08001f49
 8001f80:	08001f49 	.word	0x08001f49
 8001f84:	08001f49 	.word	0x08001f49
 8001f88:	08001f49 	.word	0x08001f49
 8001f8c:	080020d9 	.word	0x080020d9
 8001f90:	08001ffd 	.word	0x08001ffd
 8001f94:	080020bb 	.word	0x080020bb
 8001f98:	08001f49 	.word	0x08001f49
 8001f9c:	08001f49 	.word	0x08001f49
 8001fa0:	080020fb 	.word	0x080020fb
 8001fa4:	08001f49 	.word	0x08001f49
 8001fa8:	08001ffd 	.word	0x08001ffd
 8001fac:	08001f49 	.word	0x08001f49
 8001fb0:	08001f49 	.word	0x08001f49
 8001fb4:	080020c3 	.word	0x080020c3
 8001fb8:	680b      	ldr	r3, [r1, #0]
 8001fba:	1d1a      	adds	r2, r3, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	600a      	str	r2, [r1, #0]
 8001fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0a3      	b.n	8002114 <_printf_i+0x1f4>
 8001fcc:	6825      	ldr	r5, [r4, #0]
 8001fce:	6808      	ldr	r0, [r1, #0]
 8001fd0:	062e      	lsls	r6, r5, #24
 8001fd2:	f100 0304 	add.w	r3, r0, #4
 8001fd6:	d50a      	bpl.n	8001fee <_printf_i+0xce>
 8001fd8:	6805      	ldr	r5, [r0, #0]
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	2d00      	cmp	r5, #0
 8001fde:	da03      	bge.n	8001fe8 <_printf_i+0xc8>
 8001fe0:	232d      	movs	r3, #45	; 0x2d
 8001fe2:	426d      	negs	r5, r5
 8001fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fe8:	485e      	ldr	r0, [pc, #376]	; (8002164 <_printf_i+0x244>)
 8001fea:	230a      	movs	r3, #10
 8001fec:	e019      	b.n	8002022 <_printf_i+0x102>
 8001fee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001ff2:	6805      	ldr	r5, [r0, #0]
 8001ff4:	600b      	str	r3, [r1, #0]
 8001ff6:	bf18      	it	ne
 8001ff8:	b22d      	sxthne	r5, r5
 8001ffa:	e7ef      	b.n	8001fdc <_printf_i+0xbc>
 8001ffc:	680b      	ldr	r3, [r1, #0]
 8001ffe:	6825      	ldr	r5, [r4, #0]
 8002000:	1d18      	adds	r0, r3, #4
 8002002:	6008      	str	r0, [r1, #0]
 8002004:	0628      	lsls	r0, r5, #24
 8002006:	d501      	bpl.n	800200c <_printf_i+0xec>
 8002008:	681d      	ldr	r5, [r3, #0]
 800200a:	e002      	b.n	8002012 <_printf_i+0xf2>
 800200c:	0669      	lsls	r1, r5, #25
 800200e:	d5fb      	bpl.n	8002008 <_printf_i+0xe8>
 8002010:	881d      	ldrh	r5, [r3, #0]
 8002012:	4854      	ldr	r0, [pc, #336]	; (8002164 <_printf_i+0x244>)
 8002014:	2f6f      	cmp	r7, #111	; 0x6f
 8002016:	bf0c      	ite	eq
 8002018:	2308      	moveq	r3, #8
 800201a:	230a      	movne	r3, #10
 800201c:	2100      	movs	r1, #0
 800201e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002022:	6866      	ldr	r6, [r4, #4]
 8002024:	60a6      	str	r6, [r4, #8]
 8002026:	2e00      	cmp	r6, #0
 8002028:	bfa2      	ittt	ge
 800202a:	6821      	ldrge	r1, [r4, #0]
 800202c:	f021 0104 	bicge.w	r1, r1, #4
 8002030:	6021      	strge	r1, [r4, #0]
 8002032:	b90d      	cbnz	r5, 8002038 <_printf_i+0x118>
 8002034:	2e00      	cmp	r6, #0
 8002036:	d04d      	beq.n	80020d4 <_printf_i+0x1b4>
 8002038:	4616      	mov	r6, r2
 800203a:	fbb5 f1f3 	udiv	r1, r5, r3
 800203e:	fb03 5711 	mls	r7, r3, r1, r5
 8002042:	5dc7      	ldrb	r7, [r0, r7]
 8002044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002048:	462f      	mov	r7, r5
 800204a:	42bb      	cmp	r3, r7
 800204c:	460d      	mov	r5, r1
 800204e:	d9f4      	bls.n	800203a <_printf_i+0x11a>
 8002050:	2b08      	cmp	r3, #8
 8002052:	d10b      	bne.n	800206c <_printf_i+0x14c>
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	07df      	lsls	r7, r3, #31
 8002058:	d508      	bpl.n	800206c <_printf_i+0x14c>
 800205a:	6923      	ldr	r3, [r4, #16]
 800205c:	6861      	ldr	r1, [r4, #4]
 800205e:	4299      	cmp	r1, r3
 8002060:	bfde      	ittt	le
 8002062:	2330      	movle	r3, #48	; 0x30
 8002064:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800206c:	1b92      	subs	r2, r2, r6
 800206e:	6122      	str	r2, [r4, #16]
 8002070:	f8cd a000 	str.w	sl, [sp]
 8002074:	464b      	mov	r3, r9
 8002076:	aa03      	add	r2, sp, #12
 8002078:	4621      	mov	r1, r4
 800207a:	4640      	mov	r0, r8
 800207c:	f7ff fee2 	bl	8001e44 <_printf_common>
 8002080:	3001      	adds	r0, #1
 8002082:	d14c      	bne.n	800211e <_printf_i+0x1fe>
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	b004      	add	sp, #16
 800208a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800208e:	4835      	ldr	r0, [pc, #212]	; (8002164 <_printf_i+0x244>)
 8002090:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	680e      	ldr	r6, [r1, #0]
 8002098:	061f      	lsls	r7, r3, #24
 800209a:	f856 5b04 	ldr.w	r5, [r6], #4
 800209e:	600e      	str	r6, [r1, #0]
 80020a0:	d514      	bpl.n	80020cc <_printf_i+0x1ac>
 80020a2:	07d9      	lsls	r1, r3, #31
 80020a4:	bf44      	itt	mi
 80020a6:	f043 0320 	orrmi.w	r3, r3, #32
 80020aa:	6023      	strmi	r3, [r4, #0]
 80020ac:	b91d      	cbnz	r5, 80020b6 <_printf_i+0x196>
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	f023 0320 	bic.w	r3, r3, #32
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	2310      	movs	r3, #16
 80020b8:	e7b0      	b.n	800201c <_printf_i+0xfc>
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	f043 0320 	orr.w	r3, r3, #32
 80020c0:	6023      	str	r3, [r4, #0]
 80020c2:	2378      	movs	r3, #120	; 0x78
 80020c4:	4828      	ldr	r0, [pc, #160]	; (8002168 <_printf_i+0x248>)
 80020c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020ca:	e7e3      	b.n	8002094 <_printf_i+0x174>
 80020cc:	065e      	lsls	r6, r3, #25
 80020ce:	bf48      	it	mi
 80020d0:	b2ad      	uxthmi	r5, r5
 80020d2:	e7e6      	b.n	80020a2 <_printf_i+0x182>
 80020d4:	4616      	mov	r6, r2
 80020d6:	e7bb      	b.n	8002050 <_printf_i+0x130>
 80020d8:	680b      	ldr	r3, [r1, #0]
 80020da:	6826      	ldr	r6, [r4, #0]
 80020dc:	6960      	ldr	r0, [r4, #20]
 80020de:	1d1d      	adds	r5, r3, #4
 80020e0:	600d      	str	r5, [r1, #0]
 80020e2:	0635      	lsls	r5, r6, #24
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	d501      	bpl.n	80020ec <_printf_i+0x1cc>
 80020e8:	6018      	str	r0, [r3, #0]
 80020ea:	e002      	b.n	80020f2 <_printf_i+0x1d2>
 80020ec:	0671      	lsls	r1, r6, #25
 80020ee:	d5fb      	bpl.n	80020e8 <_printf_i+0x1c8>
 80020f0:	8018      	strh	r0, [r3, #0]
 80020f2:	2300      	movs	r3, #0
 80020f4:	6123      	str	r3, [r4, #16]
 80020f6:	4616      	mov	r6, r2
 80020f8:	e7ba      	b.n	8002070 <_printf_i+0x150>
 80020fa:	680b      	ldr	r3, [r1, #0]
 80020fc:	1d1a      	adds	r2, r3, #4
 80020fe:	600a      	str	r2, [r1, #0]
 8002100:	681e      	ldr	r6, [r3, #0]
 8002102:	6862      	ldr	r2, [r4, #4]
 8002104:	2100      	movs	r1, #0
 8002106:	4630      	mov	r0, r6
 8002108:	f7fe f862 	bl	80001d0 <memchr>
 800210c:	b108      	cbz	r0, 8002112 <_printf_i+0x1f2>
 800210e:	1b80      	subs	r0, r0, r6
 8002110:	6060      	str	r0, [r4, #4]
 8002112:	6863      	ldr	r3, [r4, #4]
 8002114:	6123      	str	r3, [r4, #16]
 8002116:	2300      	movs	r3, #0
 8002118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800211c:	e7a8      	b.n	8002070 <_printf_i+0x150>
 800211e:	6923      	ldr	r3, [r4, #16]
 8002120:	4632      	mov	r2, r6
 8002122:	4649      	mov	r1, r9
 8002124:	4640      	mov	r0, r8
 8002126:	47d0      	blx	sl
 8002128:	3001      	adds	r0, #1
 800212a:	d0ab      	beq.n	8002084 <_printf_i+0x164>
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	079b      	lsls	r3, r3, #30
 8002130:	d413      	bmi.n	800215a <_printf_i+0x23a>
 8002132:	68e0      	ldr	r0, [r4, #12]
 8002134:	9b03      	ldr	r3, [sp, #12]
 8002136:	4298      	cmp	r0, r3
 8002138:	bfb8      	it	lt
 800213a:	4618      	movlt	r0, r3
 800213c:	e7a4      	b.n	8002088 <_printf_i+0x168>
 800213e:	2301      	movs	r3, #1
 8002140:	4632      	mov	r2, r6
 8002142:	4649      	mov	r1, r9
 8002144:	4640      	mov	r0, r8
 8002146:	47d0      	blx	sl
 8002148:	3001      	adds	r0, #1
 800214a:	d09b      	beq.n	8002084 <_printf_i+0x164>
 800214c:	3501      	adds	r5, #1
 800214e:	68e3      	ldr	r3, [r4, #12]
 8002150:	9903      	ldr	r1, [sp, #12]
 8002152:	1a5b      	subs	r3, r3, r1
 8002154:	42ab      	cmp	r3, r5
 8002156:	dcf2      	bgt.n	800213e <_printf_i+0x21e>
 8002158:	e7eb      	b.n	8002132 <_printf_i+0x212>
 800215a:	2500      	movs	r5, #0
 800215c:	f104 0619 	add.w	r6, r4, #25
 8002160:	e7f5      	b.n	800214e <_printf_i+0x22e>
 8002162:	bf00      	nop
 8002164:	080028f5 	.word	0x080028f5
 8002168:	08002906 	.word	0x08002906

0800216c <_putc_r>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	460d      	mov	r5, r1
 8002170:	4614      	mov	r4, r2
 8002172:	4606      	mov	r6, r0
 8002174:	b118      	cbz	r0, 800217e <_putc_r+0x12>
 8002176:	6983      	ldr	r3, [r0, #24]
 8002178:	b90b      	cbnz	r3, 800217e <_putc_r+0x12>
 800217a:	f7ff fb53 	bl	8001824 <__sinit>
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <_putc_r+0x84>)
 8002180:	429c      	cmp	r4, r3
 8002182:	d124      	bne.n	80021ce <_putc_r+0x62>
 8002184:	6874      	ldr	r4, [r6, #4]
 8002186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002188:	07d8      	lsls	r0, r3, #31
 800218a:	d405      	bmi.n	8002198 <_putc_r+0x2c>
 800218c:	89a3      	ldrh	r3, [r4, #12]
 800218e:	0599      	lsls	r1, r3, #22
 8002190:	d402      	bmi.n	8002198 <_putc_r+0x2c>
 8002192:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002194:	f7ff fbe4 	bl	8001960 <__retarget_lock_acquire_recursive>
 8002198:	68a3      	ldr	r3, [r4, #8]
 800219a:	3b01      	subs	r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	60a3      	str	r3, [r4, #8]
 80021a0:	da05      	bge.n	80021ae <_putc_r+0x42>
 80021a2:	69a2      	ldr	r2, [r4, #24]
 80021a4:	4293      	cmp	r3, r2
 80021a6:	db1c      	blt.n	80021e2 <_putc_r+0x76>
 80021a8:	b2eb      	uxtb	r3, r5
 80021aa:	2b0a      	cmp	r3, #10
 80021ac:	d019      	beq.n	80021e2 <_putc_r+0x76>
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	6022      	str	r2, [r4, #0]
 80021b4:	701d      	strb	r5, [r3, #0]
 80021b6:	b2ed      	uxtb	r5, r5
 80021b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021ba:	07da      	lsls	r2, r3, #31
 80021bc:	d405      	bmi.n	80021ca <_putc_r+0x5e>
 80021be:	89a3      	ldrh	r3, [r4, #12]
 80021c0:	059b      	lsls	r3, r3, #22
 80021c2:	d402      	bmi.n	80021ca <_putc_r+0x5e>
 80021c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021c6:	f7ff fbcc 	bl	8001962 <__retarget_lock_release_recursive>
 80021ca:	4628      	mov	r0, r5
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <_putc_r+0x88>)
 80021d0:	429c      	cmp	r4, r3
 80021d2:	d101      	bne.n	80021d8 <_putc_r+0x6c>
 80021d4:	68b4      	ldr	r4, [r6, #8]
 80021d6:	e7d6      	b.n	8002186 <_putc_r+0x1a>
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <_putc_r+0x8c>)
 80021da:	429c      	cmp	r4, r3
 80021dc:	bf08      	it	eq
 80021de:	68f4      	ldreq	r4, [r6, #12]
 80021e0:	e7d1      	b.n	8002186 <_putc_r+0x1a>
 80021e2:	4629      	mov	r1, r5
 80021e4:	4622      	mov	r2, r4
 80021e6:	4630      	mov	r0, r6
 80021e8:	f7ff f942 	bl	8001470 <__swbuf_r>
 80021ec:	4605      	mov	r5, r0
 80021ee:	e7e3      	b.n	80021b8 <_putc_r+0x4c>
 80021f0:	080028a4 	.word	0x080028a4
 80021f4:	080028c4 	.word	0x080028c4
 80021f8:	08002884 	.word	0x08002884

080021fc <_sbrk_r>:
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	4d06      	ldr	r5, [pc, #24]	; (8002218 <_sbrk_r+0x1c>)
 8002200:	2300      	movs	r3, #0
 8002202:	4604      	mov	r4, r0
 8002204:	4608      	mov	r0, r1
 8002206:	602b      	str	r3, [r5, #0]
 8002208:	f7fe fea4 	bl	8000f54 <_sbrk>
 800220c:	1c43      	adds	r3, r0, #1
 800220e:	d102      	bne.n	8002216 <_sbrk_r+0x1a>
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	b103      	cbz	r3, 8002216 <_sbrk_r+0x1a>
 8002214:	6023      	str	r3, [r4, #0]
 8002216:	bd38      	pop	{r3, r4, r5, pc}
 8002218:	200001c8 	.word	0x200001c8

0800221c <__sread>:
 800221c:	b510      	push	{r4, lr}
 800221e:	460c      	mov	r4, r1
 8002220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002224:	f000 f88e 	bl	8002344 <_read_r>
 8002228:	2800      	cmp	r0, #0
 800222a:	bfab      	itete	ge
 800222c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800222e:	89a3      	ldrhlt	r3, [r4, #12]
 8002230:	181b      	addge	r3, r3, r0
 8002232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002236:	bfac      	ite	ge
 8002238:	6563      	strge	r3, [r4, #84]	; 0x54
 800223a:	81a3      	strhlt	r3, [r4, #12]
 800223c:	bd10      	pop	{r4, pc}

0800223e <__swrite>:
 800223e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002242:	461f      	mov	r7, r3
 8002244:	898b      	ldrh	r3, [r1, #12]
 8002246:	05db      	lsls	r3, r3, #23
 8002248:	4605      	mov	r5, r0
 800224a:	460c      	mov	r4, r1
 800224c:	4616      	mov	r6, r2
 800224e:	d505      	bpl.n	800225c <__swrite+0x1e>
 8002250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002254:	2302      	movs	r3, #2
 8002256:	2200      	movs	r2, #0
 8002258:	f000 f856 	bl	8002308 <_lseek_r>
 800225c:	89a3      	ldrh	r3, [r4, #12]
 800225e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002266:	81a3      	strh	r3, [r4, #12]
 8002268:	4632      	mov	r2, r6
 800226a:	463b      	mov	r3, r7
 800226c:	4628      	mov	r0, r5
 800226e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002272:	f7fe bb03 	b.w	800087c <_write_r>

08002276 <__sseek>:
 8002276:	b510      	push	{r4, lr}
 8002278:	460c      	mov	r4, r1
 800227a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800227e:	f000 f843 	bl	8002308 <_lseek_r>
 8002282:	1c43      	adds	r3, r0, #1
 8002284:	89a3      	ldrh	r3, [r4, #12]
 8002286:	bf15      	itete	ne
 8002288:	6560      	strne	r0, [r4, #84]	; 0x54
 800228a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800228e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002292:	81a3      	strheq	r3, [r4, #12]
 8002294:	bf18      	it	ne
 8002296:	81a3      	strhne	r3, [r4, #12]
 8002298:	bd10      	pop	{r4, pc}

0800229a <__sclose>:
 800229a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800229e:	f000 b801 	b.w	80022a4 <_close_r>
	...

080022a4 <_close_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4d06      	ldr	r5, [pc, #24]	; (80022c0 <_close_r+0x1c>)
 80022a8:	2300      	movs	r3, #0
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	602b      	str	r3, [r5, #0]
 80022b0:	f7fe fe1b 	bl	8000eea <_close>
 80022b4:	1c43      	adds	r3, r0, #1
 80022b6:	d102      	bne.n	80022be <_close_r+0x1a>
 80022b8:	682b      	ldr	r3, [r5, #0]
 80022ba:	b103      	cbz	r3, 80022be <_close_r+0x1a>
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	bd38      	pop	{r3, r4, r5, pc}
 80022c0:	200001c8 	.word	0x200001c8

080022c4 <_fstat_r>:
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	4d07      	ldr	r5, [pc, #28]	; (80022e4 <_fstat_r+0x20>)
 80022c8:	2300      	movs	r3, #0
 80022ca:	4604      	mov	r4, r0
 80022cc:	4608      	mov	r0, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	602b      	str	r3, [r5, #0]
 80022d2:	f7fe fe16 	bl	8000f02 <_fstat>
 80022d6:	1c43      	adds	r3, r0, #1
 80022d8:	d102      	bne.n	80022e0 <_fstat_r+0x1c>
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	b103      	cbz	r3, 80022e0 <_fstat_r+0x1c>
 80022de:	6023      	str	r3, [r4, #0]
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	200001c8 	.word	0x200001c8

080022e8 <_isatty_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	4d06      	ldr	r5, [pc, #24]	; (8002304 <_isatty_r+0x1c>)
 80022ec:	2300      	movs	r3, #0
 80022ee:	4604      	mov	r4, r0
 80022f0:	4608      	mov	r0, r1
 80022f2:	602b      	str	r3, [r5, #0]
 80022f4:	f7fe fe15 	bl	8000f22 <_isatty>
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d102      	bne.n	8002302 <_isatty_r+0x1a>
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	b103      	cbz	r3, 8002302 <_isatty_r+0x1a>
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	200001c8 	.word	0x200001c8

08002308 <_lseek_r>:
 8002308:	b538      	push	{r3, r4, r5, lr}
 800230a:	4d07      	ldr	r5, [pc, #28]	; (8002328 <_lseek_r+0x20>)
 800230c:	4604      	mov	r4, r0
 800230e:	4608      	mov	r0, r1
 8002310:	4611      	mov	r1, r2
 8002312:	2200      	movs	r2, #0
 8002314:	602a      	str	r2, [r5, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	f7fe fe0e 	bl	8000f38 <_lseek>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d102      	bne.n	8002326 <_lseek_r+0x1e>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	b103      	cbz	r3, 8002326 <_lseek_r+0x1e>
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	200001c8 	.word	0x200001c8

0800232c <__malloc_lock>:
 800232c:	4801      	ldr	r0, [pc, #4]	; (8002334 <__malloc_lock+0x8>)
 800232e:	f7ff bb17 	b.w	8001960 <__retarget_lock_acquire_recursive>
 8002332:	bf00      	nop
 8002334:	200001c0 	.word	0x200001c0

08002338 <__malloc_unlock>:
 8002338:	4801      	ldr	r0, [pc, #4]	; (8002340 <__malloc_unlock+0x8>)
 800233a:	f7ff bb12 	b.w	8001962 <__retarget_lock_release_recursive>
 800233e:	bf00      	nop
 8002340:	200001c0 	.word	0x200001c0

08002344 <_read_r>:
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	4d07      	ldr	r5, [pc, #28]	; (8002364 <_read_r+0x20>)
 8002348:	4604      	mov	r4, r0
 800234a:	4608      	mov	r0, r1
 800234c:	4611      	mov	r1, r2
 800234e:	2200      	movs	r2, #0
 8002350:	602a      	str	r2, [r5, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	f7fe fdac 	bl	8000eb0 <_read>
 8002358:	1c43      	adds	r3, r0, #1
 800235a:	d102      	bne.n	8002362 <_read_r+0x1e>
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	b103      	cbz	r3, 8002362 <_read_r+0x1e>
 8002360:	6023      	str	r3, [r4, #0]
 8002362:	bd38      	pop	{r3, r4, r5, pc}
 8002364:	200001c8 	.word	0x200001c8

08002368 <_init>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr

08002374 <_fini>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr
